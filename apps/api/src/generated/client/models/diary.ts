
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `diary` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model diary
 * 
 */
export type diaryModel = runtime.Types.Result.DefaultSelection<Prisma.$diaryPayload>

export type AggregateDiary = {
  _count: DiaryCountAggregateOutputType | null
  _avg: DiaryAvgAggregateOutputType | null
  _sum: DiarySumAggregateOutputType | null
  _min: DiaryMinAggregateOutputType | null
  _max: DiaryMaxAggregateOutputType | null
}

export type DiaryAvgAggregateOutputType = {
  ID: number | null
}

export type DiarySumAggregateOutputType = {
  ID: bigint | null
}

export type DiaryMinAggregateOutputType = {
  ID: bigint | null
  post_date: Date | null
  post_content: string | null
  post_title: string | null
  post_name: string | null
}

export type DiaryMaxAggregateOutputType = {
  ID: bigint | null
  post_date: Date | null
  post_content: string | null
  post_title: string | null
  post_name: string | null
}

export type DiaryCountAggregateOutputType = {
  ID: number
  post_date: number
  post_content: number
  post_title: number
  post_name: number
  _all: number
}


export type DiaryAvgAggregateInputType = {
  ID?: true
}

export type DiarySumAggregateInputType = {
  ID?: true
}

export type DiaryMinAggregateInputType = {
  ID?: true
  post_date?: true
  post_content?: true
  post_title?: true
  post_name?: true
}

export type DiaryMaxAggregateInputType = {
  ID?: true
  post_date?: true
  post_content?: true
  post_title?: true
  post_name?: true
}

export type DiaryCountAggregateInputType = {
  ID?: true
  post_date?: true
  post_content?: true
  post_title?: true
  post_name?: true
  _all?: true
}

export type DiaryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which diary to aggregate.
   */
  where?: Prisma.diaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of diaries to fetch.
   */
  orderBy?: Prisma.diaryOrderByWithRelationInput | Prisma.diaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.diaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` diaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` diaries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned diaries
  **/
  _count?: true | DiaryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DiaryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DiarySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DiaryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DiaryMaxAggregateInputType
}

export type GetDiaryAggregateType<T extends DiaryAggregateArgs> = {
      [P in keyof T & keyof AggregateDiary]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDiary[P]>
    : Prisma.GetScalarType<T[P], AggregateDiary[P]>
}




export type diaryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.diaryWhereInput
  orderBy?: Prisma.diaryOrderByWithAggregationInput | Prisma.diaryOrderByWithAggregationInput[]
  by: Prisma.DiaryScalarFieldEnum[] | Prisma.DiaryScalarFieldEnum
  having?: Prisma.diaryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DiaryCountAggregateInputType | true
  _avg?: DiaryAvgAggregateInputType
  _sum?: DiarySumAggregateInputType
  _min?: DiaryMinAggregateInputType
  _max?: DiaryMaxAggregateInputType
}

export type DiaryGroupByOutputType = {
  ID: bigint
  post_date: Date | null
  post_content: string
  post_title: string
  post_name: string
  _count: DiaryCountAggregateOutputType | null
  _avg: DiaryAvgAggregateOutputType | null
  _sum: DiarySumAggregateOutputType | null
  _min: DiaryMinAggregateOutputType | null
  _max: DiaryMaxAggregateOutputType | null
}

type GetDiaryGroupByPayload<T extends diaryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DiaryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DiaryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DiaryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DiaryGroupByOutputType[P]>
      }
    >
  >



export type diaryWhereInput = {
  AND?: Prisma.diaryWhereInput | Prisma.diaryWhereInput[]
  OR?: Prisma.diaryWhereInput[]
  NOT?: Prisma.diaryWhereInput | Prisma.diaryWhereInput[]
  ID?: Prisma.BigIntFilter<"diary"> | bigint | number
  post_date?: Prisma.DateTimeNullableFilter<"diary"> | Date | string | null
  post_content?: Prisma.StringFilter<"diary"> | string
  post_title?: Prisma.StringFilter<"diary"> | string
  post_name?: Prisma.StringFilter<"diary"> | string
}

export type diaryOrderByWithRelationInput = {
  ID?: Prisma.SortOrder
  post_date?: Prisma.SortOrderInput | Prisma.SortOrder
  post_content?: Prisma.SortOrder
  post_title?: Prisma.SortOrder
  post_name?: Prisma.SortOrder
}

export type diaryWhereUniqueInput = Prisma.AtLeast<{
  ID?: bigint | number
  AND?: Prisma.diaryWhereInput | Prisma.diaryWhereInput[]
  OR?: Prisma.diaryWhereInput[]
  NOT?: Prisma.diaryWhereInput | Prisma.diaryWhereInput[]
  post_date?: Prisma.DateTimeNullableFilter<"diary"> | Date | string | null
  post_content?: Prisma.StringFilter<"diary"> | string
  post_title?: Prisma.StringFilter<"diary"> | string
  post_name?: Prisma.StringFilter<"diary"> | string
}, "ID">

export type diaryOrderByWithAggregationInput = {
  ID?: Prisma.SortOrder
  post_date?: Prisma.SortOrderInput | Prisma.SortOrder
  post_content?: Prisma.SortOrder
  post_title?: Prisma.SortOrder
  post_name?: Prisma.SortOrder
  _count?: Prisma.diaryCountOrderByAggregateInput
  _avg?: Prisma.diaryAvgOrderByAggregateInput
  _max?: Prisma.diaryMaxOrderByAggregateInput
  _min?: Prisma.diaryMinOrderByAggregateInput
  _sum?: Prisma.diarySumOrderByAggregateInput
}

export type diaryScalarWhereWithAggregatesInput = {
  AND?: Prisma.diaryScalarWhereWithAggregatesInput | Prisma.diaryScalarWhereWithAggregatesInput[]
  OR?: Prisma.diaryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.diaryScalarWhereWithAggregatesInput | Prisma.diaryScalarWhereWithAggregatesInput[]
  ID?: Prisma.BigIntWithAggregatesFilter<"diary"> | bigint | number
  post_date?: Prisma.DateTimeNullableWithAggregatesFilter<"diary"> | Date | string | null
  post_content?: Prisma.StringWithAggregatesFilter<"diary"> | string
  post_title?: Prisma.StringWithAggregatesFilter<"diary"> | string
  post_name?: Prisma.StringWithAggregatesFilter<"diary"> | string
}

export type diaryCreateInput = {
  ID?: bigint | number
  post_date?: Date | string | null
  post_content: string
  post_title: string
  post_name?: string
}

export type diaryUncheckedCreateInput = {
  ID?: bigint | number
  post_date?: Date | string | null
  post_content: string
  post_title: string
  post_name?: string
}

export type diaryUpdateInput = {
  ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  post_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  post_content?: Prisma.StringFieldUpdateOperationsInput | string
  post_title?: Prisma.StringFieldUpdateOperationsInput | string
  post_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type diaryUncheckedUpdateInput = {
  ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  post_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  post_content?: Prisma.StringFieldUpdateOperationsInput | string
  post_title?: Prisma.StringFieldUpdateOperationsInput | string
  post_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type diaryCreateManyInput = {
  ID?: bigint | number
  post_date?: Date | string | null
  post_content: string
  post_title: string
  post_name?: string
}

export type diaryUpdateManyMutationInput = {
  ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  post_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  post_content?: Prisma.StringFieldUpdateOperationsInput | string
  post_title?: Prisma.StringFieldUpdateOperationsInput | string
  post_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type diaryUncheckedUpdateManyInput = {
  ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  post_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  post_content?: Prisma.StringFieldUpdateOperationsInput | string
  post_title?: Prisma.StringFieldUpdateOperationsInput | string
  post_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type diaryCountOrderByAggregateInput = {
  ID?: Prisma.SortOrder
  post_date?: Prisma.SortOrder
  post_content?: Prisma.SortOrder
  post_title?: Prisma.SortOrder
  post_name?: Prisma.SortOrder
}

export type diaryAvgOrderByAggregateInput = {
  ID?: Prisma.SortOrder
}

export type diaryMaxOrderByAggregateInput = {
  ID?: Prisma.SortOrder
  post_date?: Prisma.SortOrder
  post_content?: Prisma.SortOrder
  post_title?: Prisma.SortOrder
  post_name?: Prisma.SortOrder
}

export type diaryMinOrderByAggregateInput = {
  ID?: Prisma.SortOrder
  post_date?: Prisma.SortOrder
  post_content?: Prisma.SortOrder
  post_title?: Prisma.SortOrder
  post_name?: Prisma.SortOrder
}

export type diarySumOrderByAggregateInput = {
  ID?: Prisma.SortOrder
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}



export type diarySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  ID?: boolean
  post_date?: boolean
  post_content?: boolean
  post_title?: boolean
  post_name?: boolean
}, ExtArgs["result"]["diary"]>

export type diarySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  ID?: boolean
  post_date?: boolean
  post_content?: boolean
  post_title?: boolean
  post_name?: boolean
}, ExtArgs["result"]["diary"]>

export type diarySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  ID?: boolean
  post_date?: boolean
  post_content?: boolean
  post_title?: boolean
  post_name?: boolean
}, ExtArgs["result"]["diary"]>

export type diarySelectScalar = {
  ID?: boolean
  post_date?: boolean
  post_content?: boolean
  post_title?: boolean
  post_name?: boolean
}

export type diaryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"ID" | "post_date" | "post_content" | "post_title" | "post_name", ExtArgs["result"]["diary"]>

export type $diaryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "diary"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    ID: bigint
    post_date: Date | null
    post_content: string
    post_title: string
    post_name: string
  }, ExtArgs["result"]["diary"]>
  composites: {}
}

export type diaryGetPayload<S extends boolean | null | undefined | diaryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$diaryPayload, S>

export type diaryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<diaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DiaryCountAggregateInputType | true
  }

export interface diaryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['diary'], meta: { name: 'diary' } }
  /**
   * Find zero or one Diary that matches the filter.
   * @param {diaryFindUniqueArgs} args - Arguments to find a Diary
   * @example
   * // Get one Diary
   * const diary = await prisma.diary.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends diaryFindUniqueArgs>(args: Prisma.SelectSubset<T, diaryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Diary that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {diaryFindUniqueOrThrowArgs} args - Arguments to find a Diary
   * @example
   * // Get one Diary
   * const diary = await prisma.diary.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends diaryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, diaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Diary that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {diaryFindFirstArgs} args - Arguments to find a Diary
   * @example
   * // Get one Diary
   * const diary = await prisma.diary.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends diaryFindFirstArgs>(args?: Prisma.SelectSubset<T, diaryFindFirstArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Diary that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {diaryFindFirstOrThrowArgs} args - Arguments to find a Diary
   * @example
   * // Get one Diary
   * const diary = await prisma.diary.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends diaryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, diaryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Diaries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {diaryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Diaries
   * const diaries = await prisma.diary.findMany()
   * 
   * // Get first 10 Diaries
   * const diaries = await prisma.diary.findMany({ take: 10 })
   * 
   * // Only select the `ID`
   * const diaryWithIDOnly = await prisma.diary.findMany({ select: { ID: true } })
   * 
   */
  findMany<T extends diaryFindManyArgs>(args?: Prisma.SelectSubset<T, diaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Diary.
   * @param {diaryCreateArgs} args - Arguments to create a Diary.
   * @example
   * // Create one Diary
   * const Diary = await prisma.diary.create({
   *   data: {
   *     // ... data to create a Diary
   *   }
   * })
   * 
   */
  create<T extends diaryCreateArgs>(args: Prisma.SelectSubset<T, diaryCreateArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Diaries.
   * @param {diaryCreateManyArgs} args - Arguments to create many Diaries.
   * @example
   * // Create many Diaries
   * const diary = await prisma.diary.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends diaryCreateManyArgs>(args?: Prisma.SelectSubset<T, diaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Diaries and returns the data saved in the database.
   * @param {diaryCreateManyAndReturnArgs} args - Arguments to create many Diaries.
   * @example
   * // Create many Diaries
   * const diary = await prisma.diary.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Diaries and only return the `ID`
   * const diaryWithIDOnly = await prisma.diary.createManyAndReturn({
   *   select: { ID: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends diaryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, diaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Diary.
   * @param {diaryDeleteArgs} args - Arguments to delete one Diary.
   * @example
   * // Delete one Diary
   * const Diary = await prisma.diary.delete({
   *   where: {
   *     // ... filter to delete one Diary
   *   }
   * })
   * 
   */
  delete<T extends diaryDeleteArgs>(args: Prisma.SelectSubset<T, diaryDeleteArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Diary.
   * @param {diaryUpdateArgs} args - Arguments to update one Diary.
   * @example
   * // Update one Diary
   * const diary = await prisma.diary.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends diaryUpdateArgs>(args: Prisma.SelectSubset<T, diaryUpdateArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Diaries.
   * @param {diaryDeleteManyArgs} args - Arguments to filter Diaries to delete.
   * @example
   * // Delete a few Diaries
   * const { count } = await prisma.diary.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends diaryDeleteManyArgs>(args?: Prisma.SelectSubset<T, diaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Diaries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {diaryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Diaries
   * const diary = await prisma.diary.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends diaryUpdateManyArgs>(args: Prisma.SelectSubset<T, diaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Diaries and returns the data updated in the database.
   * @param {diaryUpdateManyAndReturnArgs} args - Arguments to update many Diaries.
   * @example
   * // Update many Diaries
   * const diary = await prisma.diary.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Diaries and only return the `ID`
   * const diaryWithIDOnly = await prisma.diary.updateManyAndReturn({
   *   select: { ID: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends diaryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, diaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Diary.
   * @param {diaryUpsertArgs} args - Arguments to update or create a Diary.
   * @example
   * // Update or create a Diary
   * const diary = await prisma.diary.upsert({
   *   create: {
   *     // ... data to create a Diary
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Diary we want to update
   *   }
   * })
   */
  upsert<T extends diaryUpsertArgs>(args: Prisma.SelectSubset<T, diaryUpsertArgs<ExtArgs>>): Prisma.Prisma__diaryClient<runtime.Types.Result.GetResult<Prisma.$diaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Diaries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {diaryCountArgs} args - Arguments to filter Diaries to count.
   * @example
   * // Count the number of Diaries
   * const count = await prisma.diary.count({
   *   where: {
   *     // ... the filter for the Diaries we want to count
   *   }
   * })
  **/
  count<T extends diaryCountArgs>(
    args?: Prisma.Subset<T, diaryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DiaryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Diary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DiaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DiaryAggregateArgs>(args: Prisma.Subset<T, DiaryAggregateArgs>): Prisma.PrismaPromise<GetDiaryAggregateType<T>>

  /**
   * Group by Diary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {diaryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends diaryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: diaryGroupByArgs['orderBy'] }
      : { orderBy?: diaryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, diaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the diary model
 */
readonly fields: diaryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for diary.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__diaryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the diary model
 */
export interface diaryFieldRefs {
  readonly ID: Prisma.FieldRef<"diary", 'BigInt'>
  readonly post_date: Prisma.FieldRef<"diary", 'DateTime'>
  readonly post_content: Prisma.FieldRef<"diary", 'String'>
  readonly post_title: Prisma.FieldRef<"diary", 'String'>
  readonly post_name: Prisma.FieldRef<"diary", 'String'>
}
    

// Custom InputTypes
/**
 * diary findUnique
 */
export type diaryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * Filter, which diary to fetch.
   */
  where: Prisma.diaryWhereUniqueInput
}

/**
 * diary findUniqueOrThrow
 */
export type diaryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * Filter, which diary to fetch.
   */
  where: Prisma.diaryWhereUniqueInput
}

/**
 * diary findFirst
 */
export type diaryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * Filter, which diary to fetch.
   */
  where?: Prisma.diaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of diaries to fetch.
   */
  orderBy?: Prisma.diaryOrderByWithRelationInput | Prisma.diaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for diaries.
   */
  cursor?: Prisma.diaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` diaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` diaries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of diaries.
   */
  distinct?: Prisma.DiaryScalarFieldEnum | Prisma.DiaryScalarFieldEnum[]
}

/**
 * diary findFirstOrThrow
 */
export type diaryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * Filter, which diary to fetch.
   */
  where?: Prisma.diaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of diaries to fetch.
   */
  orderBy?: Prisma.diaryOrderByWithRelationInput | Prisma.diaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for diaries.
   */
  cursor?: Prisma.diaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` diaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` diaries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of diaries.
   */
  distinct?: Prisma.DiaryScalarFieldEnum | Prisma.DiaryScalarFieldEnum[]
}

/**
 * diary findMany
 */
export type diaryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * Filter, which diaries to fetch.
   */
  where?: Prisma.diaryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of diaries to fetch.
   */
  orderBy?: Prisma.diaryOrderByWithRelationInput | Prisma.diaryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing diaries.
   */
  cursor?: Prisma.diaryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` diaries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` diaries.
   */
  skip?: number
  distinct?: Prisma.DiaryScalarFieldEnum | Prisma.DiaryScalarFieldEnum[]
}

/**
 * diary create
 */
export type diaryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * The data needed to create a diary.
   */
  data: Prisma.XOR<Prisma.diaryCreateInput, Prisma.diaryUncheckedCreateInput>
}

/**
 * diary createMany
 */
export type diaryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many diaries.
   */
  data: Prisma.diaryCreateManyInput | Prisma.diaryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * diary createManyAndReturn
 */
export type diaryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * The data used to create many diaries.
   */
  data: Prisma.diaryCreateManyInput | Prisma.diaryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * diary update
 */
export type diaryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * The data needed to update a diary.
   */
  data: Prisma.XOR<Prisma.diaryUpdateInput, Prisma.diaryUncheckedUpdateInput>
  /**
   * Choose, which diary to update.
   */
  where: Prisma.diaryWhereUniqueInput
}

/**
 * diary updateMany
 */
export type diaryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update diaries.
   */
  data: Prisma.XOR<Prisma.diaryUpdateManyMutationInput, Prisma.diaryUncheckedUpdateManyInput>
  /**
   * Filter which diaries to update
   */
  where?: Prisma.diaryWhereInput
  /**
   * Limit how many diaries to update.
   */
  limit?: number
}

/**
 * diary updateManyAndReturn
 */
export type diaryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * The data used to update diaries.
   */
  data: Prisma.XOR<Prisma.diaryUpdateManyMutationInput, Prisma.diaryUncheckedUpdateManyInput>
  /**
   * Filter which diaries to update
   */
  where?: Prisma.diaryWhereInput
  /**
   * Limit how many diaries to update.
   */
  limit?: number
}

/**
 * diary upsert
 */
export type diaryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * The filter to search for the diary to update in case it exists.
   */
  where: Prisma.diaryWhereUniqueInput
  /**
   * In case the diary found by the `where` argument doesn't exist, create a new diary with this data.
   */
  create: Prisma.XOR<Prisma.diaryCreateInput, Prisma.diaryUncheckedCreateInput>
  /**
   * In case the diary was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.diaryUpdateInput, Prisma.diaryUncheckedUpdateInput>
}

/**
 * diary delete
 */
export type diaryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
  /**
   * Filter which diary to delete.
   */
  where: Prisma.diaryWhereUniqueInput
}

/**
 * diary deleteMany
 */
export type diaryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which diaries to delete
   */
  where?: Prisma.diaryWhereInput
  /**
   * Limit how many diaries to delete.
   */
  limit?: number
}

/**
 * diary without action
 */
export type diaryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the diary
   */
  select?: Prisma.diarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the diary
   */
  omit?: Prisma.diaryOmit<ExtArgs> | null
}
