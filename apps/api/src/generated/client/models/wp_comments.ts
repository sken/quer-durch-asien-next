
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `wp_comments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model wp_comments
 * 
 */
export type wp_commentsModel = runtime.Types.Result.DefaultSelection<Prisma.$wp_commentsPayload>

export type AggregateWp_comments = {
  _count: Wp_commentsCountAggregateOutputType | null
  _avg: Wp_commentsAvgAggregateOutputType | null
  _sum: Wp_commentsSumAggregateOutputType | null
  _min: Wp_commentsMinAggregateOutputType | null
  _max: Wp_commentsMaxAggregateOutputType | null
}

export type Wp_commentsAvgAggregateOutputType = {
  comment_ID: number | null
  comment_post_ID: runtime.Decimal | null
  comment_karma: number | null
  comment_parent: runtime.Decimal | null
  user_id: runtime.Decimal | null
}

export type Wp_commentsSumAggregateOutputType = {
  comment_ID: bigint | null
  comment_post_ID: runtime.Decimal | null
  comment_karma: bigint | null
  comment_parent: runtime.Decimal | null
  user_id: runtime.Decimal | null
}

export type Wp_commentsMinAggregateOutputType = {
  comment_ID: bigint | null
  comment_post_ID: runtime.Decimal | null
  comment_author: string | null
  comment_author_email: string | null
  comment_author_url: string | null
  comment_author_IP: string | null
  comment_date: Date | null
  comment_date_gmt: Date | null
  comment_content: string | null
  comment_karma: bigint | null
  comment_approved: string | null
  comment_agent: string | null
  comment_type: string | null
  comment_parent: runtime.Decimal | null
  user_id: runtime.Decimal | null
}

export type Wp_commentsMaxAggregateOutputType = {
  comment_ID: bigint | null
  comment_post_ID: runtime.Decimal | null
  comment_author: string | null
  comment_author_email: string | null
  comment_author_url: string | null
  comment_author_IP: string | null
  comment_date: Date | null
  comment_date_gmt: Date | null
  comment_content: string | null
  comment_karma: bigint | null
  comment_approved: string | null
  comment_agent: string | null
  comment_type: string | null
  comment_parent: runtime.Decimal | null
  user_id: runtime.Decimal | null
}

export type Wp_commentsCountAggregateOutputType = {
  comment_ID: number
  comment_post_ID: number
  comment_author: number
  comment_author_email: number
  comment_author_url: number
  comment_author_IP: number
  comment_date: number
  comment_date_gmt: number
  comment_content: number
  comment_karma: number
  comment_approved: number
  comment_agent: number
  comment_type: number
  comment_parent: number
  user_id: number
  _all: number
}


export type Wp_commentsAvgAggregateInputType = {
  comment_ID?: true
  comment_post_ID?: true
  comment_karma?: true
  comment_parent?: true
  user_id?: true
}

export type Wp_commentsSumAggregateInputType = {
  comment_ID?: true
  comment_post_ID?: true
  comment_karma?: true
  comment_parent?: true
  user_id?: true
}

export type Wp_commentsMinAggregateInputType = {
  comment_ID?: true
  comment_post_ID?: true
  comment_author?: true
  comment_author_email?: true
  comment_author_url?: true
  comment_author_IP?: true
  comment_date?: true
  comment_date_gmt?: true
  comment_content?: true
  comment_karma?: true
  comment_approved?: true
  comment_agent?: true
  comment_type?: true
  comment_parent?: true
  user_id?: true
}

export type Wp_commentsMaxAggregateInputType = {
  comment_ID?: true
  comment_post_ID?: true
  comment_author?: true
  comment_author_email?: true
  comment_author_url?: true
  comment_author_IP?: true
  comment_date?: true
  comment_date_gmt?: true
  comment_content?: true
  comment_karma?: true
  comment_approved?: true
  comment_agent?: true
  comment_type?: true
  comment_parent?: true
  user_id?: true
}

export type Wp_commentsCountAggregateInputType = {
  comment_ID?: true
  comment_post_ID?: true
  comment_author?: true
  comment_author_email?: true
  comment_author_url?: true
  comment_author_IP?: true
  comment_date?: true
  comment_date_gmt?: true
  comment_content?: true
  comment_karma?: true
  comment_approved?: true
  comment_agent?: true
  comment_type?: true
  comment_parent?: true
  user_id?: true
  _all?: true
}

export type Wp_commentsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_comments to aggregate.
   */
  where?: Prisma.wp_commentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_comments to fetch.
   */
  orderBy?: Prisma.wp_commentsOrderByWithRelationInput | Prisma.wp_commentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.wp_commentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned wp_comments
  **/
  _count?: true | Wp_commentsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Wp_commentsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Wp_commentsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Wp_commentsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Wp_commentsMaxAggregateInputType
}

export type GetWp_commentsAggregateType<T extends Wp_commentsAggregateArgs> = {
      [P in keyof T & keyof AggregateWp_comments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWp_comments[P]>
    : Prisma.GetScalarType<T[P], AggregateWp_comments[P]>
}




export type wp_commentsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.wp_commentsWhereInput
  orderBy?: Prisma.wp_commentsOrderByWithAggregationInput | Prisma.wp_commentsOrderByWithAggregationInput[]
  by: Prisma.Wp_commentsScalarFieldEnum[] | Prisma.Wp_commentsScalarFieldEnum
  having?: Prisma.wp_commentsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Wp_commentsCountAggregateInputType | true
  _avg?: Wp_commentsAvgAggregateInputType
  _sum?: Wp_commentsSumAggregateInputType
  _min?: Wp_commentsMinAggregateInputType
  _max?: Wp_commentsMaxAggregateInputType
}

export type Wp_commentsGroupByOutputType = {
  comment_ID: bigint
  comment_post_ID: runtime.Decimal
  comment_author: string
  comment_author_email: string
  comment_author_url: string
  comment_author_IP: string
  comment_date: Date | null
  comment_date_gmt: Date | null
  comment_content: string
  comment_karma: bigint
  comment_approved: string
  comment_agent: string
  comment_type: string
  comment_parent: runtime.Decimal
  user_id: runtime.Decimal
  _count: Wp_commentsCountAggregateOutputType | null
  _avg: Wp_commentsAvgAggregateOutputType | null
  _sum: Wp_commentsSumAggregateOutputType | null
  _min: Wp_commentsMinAggregateOutputType | null
  _max: Wp_commentsMaxAggregateOutputType | null
}

type GetWp_commentsGroupByPayload<T extends wp_commentsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Wp_commentsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Wp_commentsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Wp_commentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Wp_commentsGroupByOutputType[P]>
      }
    >
  >



export type wp_commentsWhereInput = {
  AND?: Prisma.wp_commentsWhereInput | Prisma.wp_commentsWhereInput[]
  OR?: Prisma.wp_commentsWhereInput[]
  NOT?: Prisma.wp_commentsWhereInput | Prisma.wp_commentsWhereInput[]
  comment_ID?: Prisma.BigIntFilter<"wp_comments"> | bigint | number
  comment_post_ID?: Prisma.DecimalFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author?: Prisma.StringFilter<"wp_comments"> | string
  comment_author_email?: Prisma.StringFilter<"wp_comments"> | string
  comment_author_url?: Prisma.StringFilter<"wp_comments"> | string
  comment_author_IP?: Prisma.StringFilter<"wp_comments"> | string
  comment_date?: Prisma.DateTimeNullableFilter<"wp_comments"> | Date | string | null
  comment_date_gmt?: Prisma.DateTimeNullableFilter<"wp_comments"> | Date | string | null
  comment_content?: Prisma.StringFilter<"wp_comments"> | string
  comment_karma?: Prisma.BigIntFilter<"wp_comments"> | bigint | number
  comment_approved?: Prisma.StringFilter<"wp_comments"> | string
  comment_agent?: Prisma.StringFilter<"wp_comments"> | string
  comment_type?: Prisma.StringFilter<"wp_comments"> | string
  comment_parent?: Prisma.DecimalFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: Prisma.DecimalFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsOrderByWithRelationInput = {
  comment_ID?: Prisma.SortOrder
  comment_post_ID?: Prisma.SortOrder
  comment_author?: Prisma.SortOrder
  comment_author_email?: Prisma.SortOrder
  comment_author_url?: Prisma.SortOrder
  comment_author_IP?: Prisma.SortOrder
  comment_date?: Prisma.SortOrderInput | Prisma.SortOrder
  comment_date_gmt?: Prisma.SortOrderInput | Prisma.SortOrder
  comment_content?: Prisma.SortOrder
  comment_karma?: Prisma.SortOrder
  comment_approved?: Prisma.SortOrder
  comment_agent?: Prisma.SortOrder
  comment_type?: Prisma.SortOrder
  comment_parent?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type wp_commentsWhereUniqueInput = Prisma.AtLeast<{
  comment_ID?: bigint | number
  AND?: Prisma.wp_commentsWhereInput | Prisma.wp_commentsWhereInput[]
  OR?: Prisma.wp_commentsWhereInput[]
  NOT?: Prisma.wp_commentsWhereInput | Prisma.wp_commentsWhereInput[]
  comment_post_ID?: Prisma.DecimalFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author?: Prisma.StringFilter<"wp_comments"> | string
  comment_author_email?: Prisma.StringFilter<"wp_comments"> | string
  comment_author_url?: Prisma.StringFilter<"wp_comments"> | string
  comment_author_IP?: Prisma.StringFilter<"wp_comments"> | string
  comment_date?: Prisma.DateTimeNullableFilter<"wp_comments"> | Date | string | null
  comment_date_gmt?: Prisma.DateTimeNullableFilter<"wp_comments"> | Date | string | null
  comment_content?: Prisma.StringFilter<"wp_comments"> | string
  comment_karma?: Prisma.BigIntFilter<"wp_comments"> | bigint | number
  comment_approved?: Prisma.StringFilter<"wp_comments"> | string
  comment_agent?: Prisma.StringFilter<"wp_comments"> | string
  comment_type?: Prisma.StringFilter<"wp_comments"> | string
  comment_parent?: Prisma.DecimalFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: Prisma.DecimalFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}, "comment_ID">

export type wp_commentsOrderByWithAggregationInput = {
  comment_ID?: Prisma.SortOrder
  comment_post_ID?: Prisma.SortOrder
  comment_author?: Prisma.SortOrder
  comment_author_email?: Prisma.SortOrder
  comment_author_url?: Prisma.SortOrder
  comment_author_IP?: Prisma.SortOrder
  comment_date?: Prisma.SortOrderInput | Prisma.SortOrder
  comment_date_gmt?: Prisma.SortOrderInput | Prisma.SortOrder
  comment_content?: Prisma.SortOrder
  comment_karma?: Prisma.SortOrder
  comment_approved?: Prisma.SortOrder
  comment_agent?: Prisma.SortOrder
  comment_type?: Prisma.SortOrder
  comment_parent?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  _count?: Prisma.wp_commentsCountOrderByAggregateInput
  _avg?: Prisma.wp_commentsAvgOrderByAggregateInput
  _max?: Prisma.wp_commentsMaxOrderByAggregateInput
  _min?: Prisma.wp_commentsMinOrderByAggregateInput
  _sum?: Prisma.wp_commentsSumOrderByAggregateInput
}

export type wp_commentsScalarWhereWithAggregatesInput = {
  AND?: Prisma.wp_commentsScalarWhereWithAggregatesInput | Prisma.wp_commentsScalarWhereWithAggregatesInput[]
  OR?: Prisma.wp_commentsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.wp_commentsScalarWhereWithAggregatesInput | Prisma.wp_commentsScalarWhereWithAggregatesInput[]
  comment_ID?: Prisma.BigIntWithAggregatesFilter<"wp_comments"> | bigint | number
  comment_post_ID?: Prisma.DecimalWithAggregatesFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_author_email?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_author_url?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_author_IP?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_date?: Prisma.DateTimeNullableWithAggregatesFilter<"wp_comments"> | Date | string | null
  comment_date_gmt?: Prisma.DateTimeNullableWithAggregatesFilter<"wp_comments"> | Date | string | null
  comment_content?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_karma?: Prisma.BigIntWithAggregatesFilter<"wp_comments"> | bigint | number
  comment_approved?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_agent?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_type?: Prisma.StringWithAggregatesFilter<"wp_comments"> | string
  comment_parent?: Prisma.DecimalWithAggregatesFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: Prisma.DecimalWithAggregatesFilter<"wp_comments"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsCreateInput = {
  comment_ID?: bigint | number
  comment_post_ID?: runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author: string
  comment_author_email?: string
  comment_author_url?: string
  comment_author_IP?: string
  comment_date?: Date | string | null
  comment_date_gmt?: Date | string | null
  comment_content: string
  comment_karma?: bigint | number
  comment_approved?: string
  comment_agent?: string
  comment_type?: string
  comment_parent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsUncheckedCreateInput = {
  comment_ID?: bigint | number
  comment_post_ID?: runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author: string
  comment_author_email?: string
  comment_author_url?: string
  comment_author_IP?: string
  comment_date?: Date | string | null
  comment_date_gmt?: Date | string | null
  comment_content: string
  comment_karma?: bigint | number
  comment_approved?: string
  comment_agent?: string
  comment_type?: string
  comment_parent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsUpdateInput = {
  comment_ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_post_ID?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_email?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_url?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_IP?: Prisma.StringFieldUpdateOperationsInput | string
  comment_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_date_gmt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_content?: Prisma.StringFieldUpdateOperationsInput | string
  comment_karma?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_approved?: Prisma.StringFieldUpdateOperationsInput | string
  comment_agent?: Prisma.StringFieldUpdateOperationsInput | string
  comment_type?: Prisma.StringFieldUpdateOperationsInput | string
  comment_parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsUncheckedUpdateInput = {
  comment_ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_post_ID?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_email?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_url?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_IP?: Prisma.StringFieldUpdateOperationsInput | string
  comment_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_date_gmt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_content?: Prisma.StringFieldUpdateOperationsInput | string
  comment_karma?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_approved?: Prisma.StringFieldUpdateOperationsInput | string
  comment_agent?: Prisma.StringFieldUpdateOperationsInput | string
  comment_type?: Prisma.StringFieldUpdateOperationsInput | string
  comment_parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsCreateManyInput = {
  comment_ID?: bigint | number
  comment_post_ID?: runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author: string
  comment_author_email?: string
  comment_author_url?: string
  comment_author_IP?: string
  comment_date?: Date | string | null
  comment_date_gmt?: Date | string | null
  comment_content: string
  comment_karma?: bigint | number
  comment_approved?: string
  comment_agent?: string
  comment_type?: string
  comment_parent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsUpdateManyMutationInput = {
  comment_ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_post_ID?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_email?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_url?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_IP?: Prisma.StringFieldUpdateOperationsInput | string
  comment_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_date_gmt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_content?: Prisma.StringFieldUpdateOperationsInput | string
  comment_karma?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_approved?: Prisma.StringFieldUpdateOperationsInput | string
  comment_agent?: Prisma.StringFieldUpdateOperationsInput | string
  comment_type?: Prisma.StringFieldUpdateOperationsInput | string
  comment_parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsUncheckedUpdateManyInput = {
  comment_ID?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_post_ID?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  comment_author?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_email?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_url?: Prisma.StringFieldUpdateOperationsInput | string
  comment_author_IP?: Prisma.StringFieldUpdateOperationsInput | string
  comment_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_date_gmt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment_content?: Prisma.StringFieldUpdateOperationsInput | string
  comment_karma?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_approved?: Prisma.StringFieldUpdateOperationsInput | string
  comment_agent?: Prisma.StringFieldUpdateOperationsInput | string
  comment_type?: Prisma.StringFieldUpdateOperationsInput | string
  comment_parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  user_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type wp_commentsCountOrderByAggregateInput = {
  comment_ID?: Prisma.SortOrder
  comment_post_ID?: Prisma.SortOrder
  comment_author?: Prisma.SortOrder
  comment_author_email?: Prisma.SortOrder
  comment_author_url?: Prisma.SortOrder
  comment_author_IP?: Prisma.SortOrder
  comment_date?: Prisma.SortOrder
  comment_date_gmt?: Prisma.SortOrder
  comment_content?: Prisma.SortOrder
  comment_karma?: Prisma.SortOrder
  comment_approved?: Prisma.SortOrder
  comment_agent?: Prisma.SortOrder
  comment_type?: Prisma.SortOrder
  comment_parent?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type wp_commentsAvgOrderByAggregateInput = {
  comment_ID?: Prisma.SortOrder
  comment_post_ID?: Prisma.SortOrder
  comment_karma?: Prisma.SortOrder
  comment_parent?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type wp_commentsMaxOrderByAggregateInput = {
  comment_ID?: Prisma.SortOrder
  comment_post_ID?: Prisma.SortOrder
  comment_author?: Prisma.SortOrder
  comment_author_email?: Prisma.SortOrder
  comment_author_url?: Prisma.SortOrder
  comment_author_IP?: Prisma.SortOrder
  comment_date?: Prisma.SortOrder
  comment_date_gmt?: Prisma.SortOrder
  comment_content?: Prisma.SortOrder
  comment_karma?: Prisma.SortOrder
  comment_approved?: Prisma.SortOrder
  comment_agent?: Prisma.SortOrder
  comment_type?: Prisma.SortOrder
  comment_parent?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type wp_commentsMinOrderByAggregateInput = {
  comment_ID?: Prisma.SortOrder
  comment_post_ID?: Prisma.SortOrder
  comment_author?: Prisma.SortOrder
  comment_author_email?: Prisma.SortOrder
  comment_author_url?: Prisma.SortOrder
  comment_author_IP?: Prisma.SortOrder
  comment_date?: Prisma.SortOrder
  comment_date_gmt?: Prisma.SortOrder
  comment_content?: Prisma.SortOrder
  comment_karma?: Prisma.SortOrder
  comment_approved?: Prisma.SortOrder
  comment_agent?: Prisma.SortOrder
  comment_type?: Prisma.SortOrder
  comment_parent?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type wp_commentsSumOrderByAggregateInput = {
  comment_ID?: Prisma.SortOrder
  comment_post_ID?: Prisma.SortOrder
  comment_karma?: Prisma.SortOrder
  comment_parent?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}



export type wp_commentsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  comment_ID?: boolean
  comment_post_ID?: boolean
  comment_author?: boolean
  comment_author_email?: boolean
  comment_author_url?: boolean
  comment_author_IP?: boolean
  comment_date?: boolean
  comment_date_gmt?: boolean
  comment_content?: boolean
  comment_karma?: boolean
  comment_approved?: boolean
  comment_agent?: boolean
  comment_type?: boolean
  comment_parent?: boolean
  user_id?: boolean
}, ExtArgs["result"]["wp_comments"]>

export type wp_commentsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  comment_ID?: boolean
  comment_post_ID?: boolean
  comment_author?: boolean
  comment_author_email?: boolean
  comment_author_url?: boolean
  comment_author_IP?: boolean
  comment_date?: boolean
  comment_date_gmt?: boolean
  comment_content?: boolean
  comment_karma?: boolean
  comment_approved?: boolean
  comment_agent?: boolean
  comment_type?: boolean
  comment_parent?: boolean
  user_id?: boolean
}, ExtArgs["result"]["wp_comments"]>

export type wp_commentsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  comment_ID?: boolean
  comment_post_ID?: boolean
  comment_author?: boolean
  comment_author_email?: boolean
  comment_author_url?: boolean
  comment_author_IP?: boolean
  comment_date?: boolean
  comment_date_gmt?: boolean
  comment_content?: boolean
  comment_karma?: boolean
  comment_approved?: boolean
  comment_agent?: boolean
  comment_type?: boolean
  comment_parent?: boolean
  user_id?: boolean
}, ExtArgs["result"]["wp_comments"]>

export type wp_commentsSelectScalar = {
  comment_ID?: boolean
  comment_post_ID?: boolean
  comment_author?: boolean
  comment_author_email?: boolean
  comment_author_url?: boolean
  comment_author_IP?: boolean
  comment_date?: boolean
  comment_date_gmt?: boolean
  comment_content?: boolean
  comment_karma?: boolean
  comment_approved?: boolean
  comment_agent?: boolean
  comment_type?: boolean
  comment_parent?: boolean
  user_id?: boolean
}

export type wp_commentsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"comment_ID" | "comment_post_ID" | "comment_author" | "comment_author_email" | "comment_author_url" | "comment_author_IP" | "comment_date" | "comment_date_gmt" | "comment_content" | "comment_karma" | "comment_approved" | "comment_agent" | "comment_type" | "comment_parent" | "user_id", ExtArgs["result"]["wp_comments"]>

export type $wp_commentsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "wp_comments"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    comment_ID: bigint
    comment_post_ID: runtime.Decimal
    comment_author: string
    comment_author_email: string
    comment_author_url: string
    comment_author_IP: string
    comment_date: Date | null
    comment_date_gmt: Date | null
    comment_content: string
    comment_karma: bigint
    comment_approved: string
    comment_agent: string
    comment_type: string
    comment_parent: runtime.Decimal
    user_id: runtime.Decimal
  }, ExtArgs["result"]["wp_comments"]>
  composites: {}
}

export type wp_commentsGetPayload<S extends boolean | null | undefined | wp_commentsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload, S>

export type wp_commentsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<wp_commentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Wp_commentsCountAggregateInputType | true
  }

export interface wp_commentsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wp_comments'], meta: { name: 'wp_comments' } }
  /**
   * Find zero or one Wp_comments that matches the filter.
   * @param {wp_commentsFindUniqueArgs} args - Arguments to find a Wp_comments
   * @example
   * // Get one Wp_comments
   * const wp_comments = await prisma.wp_comments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends wp_commentsFindUniqueArgs>(args: Prisma.SelectSubset<T, wp_commentsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Wp_comments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {wp_commentsFindUniqueOrThrowArgs} args - Arguments to find a Wp_comments
   * @example
   * // Get one Wp_comments
   * const wp_comments = await prisma.wp_comments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends wp_commentsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, wp_commentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_comments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentsFindFirstArgs} args - Arguments to find a Wp_comments
   * @example
   * // Get one Wp_comments
   * const wp_comments = await prisma.wp_comments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends wp_commentsFindFirstArgs>(args?: Prisma.SelectSubset<T, wp_commentsFindFirstArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_comments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentsFindFirstOrThrowArgs} args - Arguments to find a Wp_comments
   * @example
   * // Get one Wp_comments
   * const wp_comments = await prisma.wp_comments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends wp_commentsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, wp_commentsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Wp_comments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Wp_comments
   * const wp_comments = await prisma.wp_comments.findMany()
   * 
   * // Get first 10 Wp_comments
   * const wp_comments = await prisma.wp_comments.findMany({ take: 10 })
   * 
   * // Only select the `comment_ID`
   * const wp_commentsWithComment_IDOnly = await prisma.wp_comments.findMany({ select: { comment_ID: true } })
   * 
   */
  findMany<T extends wp_commentsFindManyArgs>(args?: Prisma.SelectSubset<T, wp_commentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Wp_comments.
   * @param {wp_commentsCreateArgs} args - Arguments to create a Wp_comments.
   * @example
   * // Create one Wp_comments
   * const Wp_comments = await prisma.wp_comments.create({
   *   data: {
   *     // ... data to create a Wp_comments
   *   }
   * })
   * 
   */
  create<T extends wp_commentsCreateArgs>(args: Prisma.SelectSubset<T, wp_commentsCreateArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Wp_comments.
   * @param {wp_commentsCreateManyArgs} args - Arguments to create many Wp_comments.
   * @example
   * // Create many Wp_comments
   * const wp_comments = await prisma.wp_comments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends wp_commentsCreateManyArgs>(args?: Prisma.SelectSubset<T, wp_commentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Wp_comments and returns the data saved in the database.
   * @param {wp_commentsCreateManyAndReturnArgs} args - Arguments to create many Wp_comments.
   * @example
   * // Create many Wp_comments
   * const wp_comments = await prisma.wp_comments.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Wp_comments and only return the `comment_ID`
   * const wp_commentsWithComment_IDOnly = await prisma.wp_comments.createManyAndReturn({
   *   select: { comment_ID: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends wp_commentsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, wp_commentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Wp_comments.
   * @param {wp_commentsDeleteArgs} args - Arguments to delete one Wp_comments.
   * @example
   * // Delete one Wp_comments
   * const Wp_comments = await prisma.wp_comments.delete({
   *   where: {
   *     // ... filter to delete one Wp_comments
   *   }
   * })
   * 
   */
  delete<T extends wp_commentsDeleteArgs>(args: Prisma.SelectSubset<T, wp_commentsDeleteArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Wp_comments.
   * @param {wp_commentsUpdateArgs} args - Arguments to update one Wp_comments.
   * @example
   * // Update one Wp_comments
   * const wp_comments = await prisma.wp_comments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends wp_commentsUpdateArgs>(args: Prisma.SelectSubset<T, wp_commentsUpdateArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Wp_comments.
   * @param {wp_commentsDeleteManyArgs} args - Arguments to filter Wp_comments to delete.
   * @example
   * // Delete a few Wp_comments
   * const { count } = await prisma.wp_comments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends wp_commentsDeleteManyArgs>(args?: Prisma.SelectSubset<T, wp_commentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Wp_comments
   * const wp_comments = await prisma.wp_comments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends wp_commentsUpdateManyArgs>(args: Prisma.SelectSubset<T, wp_commentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_comments and returns the data updated in the database.
   * @param {wp_commentsUpdateManyAndReturnArgs} args - Arguments to update many Wp_comments.
   * @example
   * // Update many Wp_comments
   * const wp_comments = await prisma.wp_comments.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Wp_comments and only return the `comment_ID`
   * const wp_commentsWithComment_IDOnly = await prisma.wp_comments.updateManyAndReturn({
   *   select: { comment_ID: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends wp_commentsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, wp_commentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Wp_comments.
   * @param {wp_commentsUpsertArgs} args - Arguments to update or create a Wp_comments.
   * @example
   * // Update or create a Wp_comments
   * const wp_comments = await prisma.wp_comments.upsert({
   *   create: {
   *     // ... data to create a Wp_comments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Wp_comments we want to update
   *   }
   * })
   */
  upsert<T extends wp_commentsUpsertArgs>(args: Prisma.SelectSubset<T, wp_commentsUpsertArgs<ExtArgs>>): Prisma.Prisma__wp_commentsClient<runtime.Types.Result.GetResult<Prisma.$wp_commentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Wp_comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentsCountArgs} args - Arguments to filter Wp_comments to count.
   * @example
   * // Count the number of Wp_comments
   * const count = await prisma.wp_comments.count({
   *   where: {
   *     // ... the filter for the Wp_comments we want to count
   *   }
   * })
  **/
  count<T extends wp_commentsCountArgs>(
    args?: Prisma.Subset<T, wp_commentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Wp_commentsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Wp_comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Wp_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Wp_commentsAggregateArgs>(args: Prisma.Subset<T, Wp_commentsAggregateArgs>): Prisma.PrismaPromise<GetWp_commentsAggregateType<T>>

  /**
   * Group by Wp_comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends wp_commentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: wp_commentsGroupByArgs['orderBy'] }
      : { orderBy?: wp_commentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, wp_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWp_commentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the wp_comments model
 */
readonly fields: wp_commentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for wp_comments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__wp_commentsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the wp_comments model
 */
export interface wp_commentsFieldRefs {
  readonly comment_ID: Prisma.FieldRef<"wp_comments", 'BigInt'>
  readonly comment_post_ID: Prisma.FieldRef<"wp_comments", 'Decimal'>
  readonly comment_author: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_author_email: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_author_url: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_author_IP: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_date: Prisma.FieldRef<"wp_comments", 'DateTime'>
  readonly comment_date_gmt: Prisma.FieldRef<"wp_comments", 'DateTime'>
  readonly comment_content: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_karma: Prisma.FieldRef<"wp_comments", 'BigInt'>
  readonly comment_approved: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_agent: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_type: Prisma.FieldRef<"wp_comments", 'String'>
  readonly comment_parent: Prisma.FieldRef<"wp_comments", 'Decimal'>
  readonly user_id: Prisma.FieldRef<"wp_comments", 'Decimal'>
}
    

// Custom InputTypes
/**
 * wp_comments findUnique
 */
export type wp_commentsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * Filter, which wp_comments to fetch.
   */
  where: Prisma.wp_commentsWhereUniqueInput
}

/**
 * wp_comments findUniqueOrThrow
 */
export type wp_commentsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * Filter, which wp_comments to fetch.
   */
  where: Prisma.wp_commentsWhereUniqueInput
}

/**
 * wp_comments findFirst
 */
export type wp_commentsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * Filter, which wp_comments to fetch.
   */
  where?: Prisma.wp_commentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_comments to fetch.
   */
  orderBy?: Prisma.wp_commentsOrderByWithRelationInput | Prisma.wp_commentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_comments.
   */
  cursor?: Prisma.wp_commentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_comments.
   */
  distinct?: Prisma.Wp_commentsScalarFieldEnum | Prisma.Wp_commentsScalarFieldEnum[]
}

/**
 * wp_comments findFirstOrThrow
 */
export type wp_commentsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * Filter, which wp_comments to fetch.
   */
  where?: Prisma.wp_commentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_comments to fetch.
   */
  orderBy?: Prisma.wp_commentsOrderByWithRelationInput | Prisma.wp_commentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_comments.
   */
  cursor?: Prisma.wp_commentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_comments.
   */
  distinct?: Prisma.Wp_commentsScalarFieldEnum | Prisma.Wp_commentsScalarFieldEnum[]
}

/**
 * wp_comments findMany
 */
export type wp_commentsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * Filter, which wp_comments to fetch.
   */
  where?: Prisma.wp_commentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_comments to fetch.
   */
  orderBy?: Prisma.wp_commentsOrderByWithRelationInput | Prisma.wp_commentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing wp_comments.
   */
  cursor?: Prisma.wp_commentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_comments.
   */
  skip?: number
  distinct?: Prisma.Wp_commentsScalarFieldEnum | Prisma.Wp_commentsScalarFieldEnum[]
}

/**
 * wp_comments create
 */
export type wp_commentsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * The data needed to create a wp_comments.
   */
  data: Prisma.XOR<Prisma.wp_commentsCreateInput, Prisma.wp_commentsUncheckedCreateInput>
}

/**
 * wp_comments createMany
 */
export type wp_commentsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many wp_comments.
   */
  data: Prisma.wp_commentsCreateManyInput | Prisma.wp_commentsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_comments createManyAndReturn
 */
export type wp_commentsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * The data used to create many wp_comments.
   */
  data: Prisma.wp_commentsCreateManyInput | Prisma.wp_commentsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_comments update
 */
export type wp_commentsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * The data needed to update a wp_comments.
   */
  data: Prisma.XOR<Prisma.wp_commentsUpdateInput, Prisma.wp_commentsUncheckedUpdateInput>
  /**
   * Choose, which wp_comments to update.
   */
  where: Prisma.wp_commentsWhereUniqueInput
}

/**
 * wp_comments updateMany
 */
export type wp_commentsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update wp_comments.
   */
  data: Prisma.XOR<Prisma.wp_commentsUpdateManyMutationInput, Prisma.wp_commentsUncheckedUpdateManyInput>
  /**
   * Filter which wp_comments to update
   */
  where?: Prisma.wp_commentsWhereInput
  /**
   * Limit how many wp_comments to update.
   */
  limit?: number
}

/**
 * wp_comments updateManyAndReturn
 */
export type wp_commentsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * The data used to update wp_comments.
   */
  data: Prisma.XOR<Prisma.wp_commentsUpdateManyMutationInput, Prisma.wp_commentsUncheckedUpdateManyInput>
  /**
   * Filter which wp_comments to update
   */
  where?: Prisma.wp_commentsWhereInput
  /**
   * Limit how many wp_comments to update.
   */
  limit?: number
}

/**
 * wp_comments upsert
 */
export type wp_commentsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * The filter to search for the wp_comments to update in case it exists.
   */
  where: Prisma.wp_commentsWhereUniqueInput
  /**
   * In case the wp_comments found by the `where` argument doesn't exist, create a new wp_comments with this data.
   */
  create: Prisma.XOR<Prisma.wp_commentsCreateInput, Prisma.wp_commentsUncheckedCreateInput>
  /**
   * In case the wp_comments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.wp_commentsUpdateInput, Prisma.wp_commentsUncheckedUpdateInput>
}

/**
 * wp_comments delete
 */
export type wp_commentsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
  /**
   * Filter which wp_comments to delete.
   */
  where: Prisma.wp_commentsWhereUniqueInput
}

/**
 * wp_comments deleteMany
 */
export type wp_commentsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_comments to delete
   */
  where?: Prisma.wp_commentsWhereInput
  /**
   * Limit how many wp_comments to delete.
   */
  limit?: number
}

/**
 * wp_comments without action
 */
export type wp_commentsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_comments
   */
  select?: Prisma.wp_commentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_comments
   */
  omit?: Prisma.wp_commentsOmit<ExtArgs> | null
}
