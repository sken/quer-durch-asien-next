
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `colors` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model colors
 * 
 */
export type colorsModel = runtime.Types.Result.DefaultSelection<Prisma.$colorsPayload>

export type AggregateColors = {
  _count: ColorsCountAggregateOutputType | null
  _avg: ColorsAvgAggregateOutputType | null
  _sum: ColorsSumAggregateOutputType | null
  _min: ColorsMinAggregateOutputType | null
  _max: ColorsMaxAggregateOutputType | null
}

export type ColorsAvgAggregateOutputType = {
  id: number | null
  hue: number | null
  saturation: number | null
  value: number | null
  red: number | null
  green: number | null
  blue: number | null
}

export type ColorsSumAggregateOutputType = {
  id: bigint | null
  hue: number | null
  saturation: number | null
  value: number | null
  red: number | null
  green: number | null
  blue: number | null
}

export type ColorsMinAggregateOutputType = {
  id: bigint | null
  hue: number | null
  saturation: number | null
  value: number | null
  red: number | null
  green: number | null
  blue: number | null
  hex: string | null
  websafe: string | null
}

export type ColorsMaxAggregateOutputType = {
  id: bigint | null
  hue: number | null
  saturation: number | null
  value: number | null
  red: number | null
  green: number | null
  blue: number | null
  hex: string | null
  websafe: string | null
}

export type ColorsCountAggregateOutputType = {
  id: number
  hue: number
  saturation: number
  value: number
  red: number
  green: number
  blue: number
  hex: number
  websafe: number
  _all: number
}


export type ColorsAvgAggregateInputType = {
  id?: true
  hue?: true
  saturation?: true
  value?: true
  red?: true
  green?: true
  blue?: true
}

export type ColorsSumAggregateInputType = {
  id?: true
  hue?: true
  saturation?: true
  value?: true
  red?: true
  green?: true
  blue?: true
}

export type ColorsMinAggregateInputType = {
  id?: true
  hue?: true
  saturation?: true
  value?: true
  red?: true
  green?: true
  blue?: true
  hex?: true
  websafe?: true
}

export type ColorsMaxAggregateInputType = {
  id?: true
  hue?: true
  saturation?: true
  value?: true
  red?: true
  green?: true
  blue?: true
  hex?: true
  websafe?: true
}

export type ColorsCountAggregateInputType = {
  id?: true
  hue?: true
  saturation?: true
  value?: true
  red?: true
  green?: true
  blue?: true
  hex?: true
  websafe?: true
  _all?: true
}

export type ColorsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which colors to aggregate.
   */
  where?: Prisma.colorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of colors to fetch.
   */
  orderBy?: Prisma.colorsOrderByWithRelationInput | Prisma.colorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.colorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` colors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` colors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned colors
  **/
  _count?: true | ColorsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ColorsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ColorsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ColorsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ColorsMaxAggregateInputType
}

export type GetColorsAggregateType<T extends ColorsAggregateArgs> = {
      [P in keyof T & keyof AggregateColors]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateColors[P]>
    : Prisma.GetScalarType<T[P], AggregateColors[P]>
}




export type colorsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.colorsWhereInput
  orderBy?: Prisma.colorsOrderByWithAggregationInput | Prisma.colorsOrderByWithAggregationInput[]
  by: Prisma.ColorsScalarFieldEnum[] | Prisma.ColorsScalarFieldEnum
  having?: Prisma.colorsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ColorsCountAggregateInputType | true
  _avg?: ColorsAvgAggregateInputType
  _sum?: ColorsSumAggregateInputType
  _min?: ColorsMinAggregateInputType
  _max?: ColorsMaxAggregateInputType
}

export type ColorsGroupByOutputType = {
  id: bigint
  hue: number
  saturation: number
  value: number
  red: number
  green: number
  blue: number
  hex: string
  websafe: string
  _count: ColorsCountAggregateOutputType | null
  _avg: ColorsAvgAggregateOutputType | null
  _sum: ColorsSumAggregateOutputType | null
  _min: ColorsMinAggregateOutputType | null
  _max: ColorsMaxAggregateOutputType | null
}

type GetColorsGroupByPayload<T extends colorsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ColorsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ColorsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ColorsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ColorsGroupByOutputType[P]>
      }
    >
  >



export type colorsWhereInput = {
  AND?: Prisma.colorsWhereInput | Prisma.colorsWhereInput[]
  OR?: Prisma.colorsWhereInput[]
  NOT?: Prisma.colorsWhereInput | Prisma.colorsWhereInput[]
  id?: Prisma.BigIntFilter<"colors"> | bigint | number
  hue?: Prisma.IntFilter<"colors"> | number
  saturation?: Prisma.IntFilter<"colors"> | number
  value?: Prisma.IntFilter<"colors"> | number
  red?: Prisma.IntFilter<"colors"> | number
  green?: Prisma.IntFilter<"colors"> | number
  blue?: Prisma.IntFilter<"colors"> | number
  hex?: Prisma.StringFilter<"colors"> | string
  websafe?: Prisma.StringFilter<"colors"> | string
}

export type colorsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  hue?: Prisma.SortOrder
  saturation?: Prisma.SortOrder
  value?: Prisma.SortOrder
  red?: Prisma.SortOrder
  green?: Prisma.SortOrder
  blue?: Prisma.SortOrder
  hex?: Prisma.SortOrder
  websafe?: Prisma.SortOrder
}

export type colorsWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.colorsWhereInput | Prisma.colorsWhereInput[]
  OR?: Prisma.colorsWhereInput[]
  NOT?: Prisma.colorsWhereInput | Prisma.colorsWhereInput[]
  hue?: Prisma.IntFilter<"colors"> | number
  saturation?: Prisma.IntFilter<"colors"> | number
  value?: Prisma.IntFilter<"colors"> | number
  red?: Prisma.IntFilter<"colors"> | number
  green?: Prisma.IntFilter<"colors"> | number
  blue?: Prisma.IntFilter<"colors"> | number
  hex?: Prisma.StringFilter<"colors"> | string
  websafe?: Prisma.StringFilter<"colors"> | string
}, "id">

export type colorsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  hue?: Prisma.SortOrder
  saturation?: Prisma.SortOrder
  value?: Prisma.SortOrder
  red?: Prisma.SortOrder
  green?: Prisma.SortOrder
  blue?: Prisma.SortOrder
  hex?: Prisma.SortOrder
  websafe?: Prisma.SortOrder
  _count?: Prisma.colorsCountOrderByAggregateInput
  _avg?: Prisma.colorsAvgOrderByAggregateInput
  _max?: Prisma.colorsMaxOrderByAggregateInput
  _min?: Prisma.colorsMinOrderByAggregateInput
  _sum?: Prisma.colorsSumOrderByAggregateInput
}

export type colorsScalarWhereWithAggregatesInput = {
  AND?: Prisma.colorsScalarWhereWithAggregatesInput | Prisma.colorsScalarWhereWithAggregatesInput[]
  OR?: Prisma.colorsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.colorsScalarWhereWithAggregatesInput | Prisma.colorsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"colors"> | bigint | number
  hue?: Prisma.IntWithAggregatesFilter<"colors"> | number
  saturation?: Prisma.IntWithAggregatesFilter<"colors"> | number
  value?: Prisma.IntWithAggregatesFilter<"colors"> | number
  red?: Prisma.IntWithAggregatesFilter<"colors"> | number
  green?: Prisma.IntWithAggregatesFilter<"colors"> | number
  blue?: Prisma.IntWithAggregatesFilter<"colors"> | number
  hex?: Prisma.StringWithAggregatesFilter<"colors"> | string
  websafe?: Prisma.StringWithAggregatesFilter<"colors"> | string
}

export type colorsCreateInput = {
  id?: bigint | number
  hue: number
  saturation: number
  value: number
  red: number
  green: number
  blue: number
  hex: string
  websafe: string
}

export type colorsUncheckedCreateInput = {
  id?: bigint | number
  hue: number
  saturation: number
  value: number
  red: number
  green: number
  blue: number
  hex: string
  websafe: string
}

export type colorsUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  hue?: Prisma.IntFieldUpdateOperationsInput | number
  saturation?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.IntFieldUpdateOperationsInput | number
  red?: Prisma.IntFieldUpdateOperationsInput | number
  green?: Prisma.IntFieldUpdateOperationsInput | number
  blue?: Prisma.IntFieldUpdateOperationsInput | number
  hex?: Prisma.StringFieldUpdateOperationsInput | string
  websafe?: Prisma.StringFieldUpdateOperationsInput | string
}

export type colorsUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  hue?: Prisma.IntFieldUpdateOperationsInput | number
  saturation?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.IntFieldUpdateOperationsInput | number
  red?: Prisma.IntFieldUpdateOperationsInput | number
  green?: Prisma.IntFieldUpdateOperationsInput | number
  blue?: Prisma.IntFieldUpdateOperationsInput | number
  hex?: Prisma.StringFieldUpdateOperationsInput | string
  websafe?: Prisma.StringFieldUpdateOperationsInput | string
}

export type colorsCreateManyInput = {
  id?: bigint | number
  hue: number
  saturation: number
  value: number
  red: number
  green: number
  blue: number
  hex: string
  websafe: string
}

export type colorsUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  hue?: Prisma.IntFieldUpdateOperationsInput | number
  saturation?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.IntFieldUpdateOperationsInput | number
  red?: Prisma.IntFieldUpdateOperationsInput | number
  green?: Prisma.IntFieldUpdateOperationsInput | number
  blue?: Prisma.IntFieldUpdateOperationsInput | number
  hex?: Prisma.StringFieldUpdateOperationsInput | string
  websafe?: Prisma.StringFieldUpdateOperationsInput | string
}

export type colorsUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  hue?: Prisma.IntFieldUpdateOperationsInput | number
  saturation?: Prisma.IntFieldUpdateOperationsInput | number
  value?: Prisma.IntFieldUpdateOperationsInput | number
  red?: Prisma.IntFieldUpdateOperationsInput | number
  green?: Prisma.IntFieldUpdateOperationsInput | number
  blue?: Prisma.IntFieldUpdateOperationsInput | number
  hex?: Prisma.StringFieldUpdateOperationsInput | string
  websafe?: Prisma.StringFieldUpdateOperationsInput | string
}

export type colorsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hue?: Prisma.SortOrder
  saturation?: Prisma.SortOrder
  value?: Prisma.SortOrder
  red?: Prisma.SortOrder
  green?: Prisma.SortOrder
  blue?: Prisma.SortOrder
  hex?: Prisma.SortOrder
  websafe?: Prisma.SortOrder
}

export type colorsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hue?: Prisma.SortOrder
  saturation?: Prisma.SortOrder
  value?: Prisma.SortOrder
  red?: Prisma.SortOrder
  green?: Prisma.SortOrder
  blue?: Prisma.SortOrder
}

export type colorsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hue?: Prisma.SortOrder
  saturation?: Prisma.SortOrder
  value?: Prisma.SortOrder
  red?: Prisma.SortOrder
  green?: Prisma.SortOrder
  blue?: Prisma.SortOrder
  hex?: Prisma.SortOrder
  websafe?: Prisma.SortOrder
}

export type colorsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hue?: Prisma.SortOrder
  saturation?: Prisma.SortOrder
  value?: Prisma.SortOrder
  red?: Prisma.SortOrder
  green?: Prisma.SortOrder
  blue?: Prisma.SortOrder
  hex?: Prisma.SortOrder
  websafe?: Prisma.SortOrder
}

export type colorsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hue?: Prisma.SortOrder
  saturation?: Prisma.SortOrder
  value?: Prisma.SortOrder
  red?: Prisma.SortOrder
  green?: Prisma.SortOrder
  blue?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type colorsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  hue?: boolean
  saturation?: boolean
  value?: boolean
  red?: boolean
  green?: boolean
  blue?: boolean
  hex?: boolean
  websafe?: boolean
}, ExtArgs["result"]["colors"]>

export type colorsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  hue?: boolean
  saturation?: boolean
  value?: boolean
  red?: boolean
  green?: boolean
  blue?: boolean
  hex?: boolean
  websafe?: boolean
}, ExtArgs["result"]["colors"]>

export type colorsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  hue?: boolean
  saturation?: boolean
  value?: boolean
  red?: boolean
  green?: boolean
  blue?: boolean
  hex?: boolean
  websafe?: boolean
}, ExtArgs["result"]["colors"]>

export type colorsSelectScalar = {
  id?: boolean
  hue?: boolean
  saturation?: boolean
  value?: boolean
  red?: boolean
  green?: boolean
  blue?: boolean
  hex?: boolean
  websafe?: boolean
}

export type colorsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "hue" | "saturation" | "value" | "red" | "green" | "blue" | "hex" | "websafe", ExtArgs["result"]["colors"]>

export type $colorsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "colors"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    hue: number
    saturation: number
    value: number
    red: number
    green: number
    blue: number
    hex: string
    websafe: string
  }, ExtArgs["result"]["colors"]>
  composites: {}
}

export type colorsGetPayload<S extends boolean | null | undefined | colorsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$colorsPayload, S>

export type colorsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<colorsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ColorsCountAggregateInputType | true
  }

export interface colorsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['colors'], meta: { name: 'colors' } }
  /**
   * Find zero or one Colors that matches the filter.
   * @param {colorsFindUniqueArgs} args - Arguments to find a Colors
   * @example
   * // Get one Colors
   * const colors = await prisma.colors.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends colorsFindUniqueArgs>(args: Prisma.SelectSubset<T, colorsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Colors that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {colorsFindUniqueOrThrowArgs} args - Arguments to find a Colors
   * @example
   * // Get one Colors
   * const colors = await prisma.colors.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends colorsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, colorsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Colors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {colorsFindFirstArgs} args - Arguments to find a Colors
   * @example
   * // Get one Colors
   * const colors = await prisma.colors.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends colorsFindFirstArgs>(args?: Prisma.SelectSubset<T, colorsFindFirstArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Colors that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {colorsFindFirstOrThrowArgs} args - Arguments to find a Colors
   * @example
   * // Get one Colors
   * const colors = await prisma.colors.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends colorsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, colorsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Colors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {colorsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Colors
   * const colors = await prisma.colors.findMany()
   * 
   * // Get first 10 Colors
   * const colors = await prisma.colors.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const colorsWithIdOnly = await prisma.colors.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends colorsFindManyArgs>(args?: Prisma.SelectSubset<T, colorsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Colors.
   * @param {colorsCreateArgs} args - Arguments to create a Colors.
   * @example
   * // Create one Colors
   * const Colors = await prisma.colors.create({
   *   data: {
   *     // ... data to create a Colors
   *   }
   * })
   * 
   */
  create<T extends colorsCreateArgs>(args: Prisma.SelectSubset<T, colorsCreateArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Colors.
   * @param {colorsCreateManyArgs} args - Arguments to create many Colors.
   * @example
   * // Create many Colors
   * const colors = await prisma.colors.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends colorsCreateManyArgs>(args?: Prisma.SelectSubset<T, colorsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Colors and returns the data saved in the database.
   * @param {colorsCreateManyAndReturnArgs} args - Arguments to create many Colors.
   * @example
   * // Create many Colors
   * const colors = await prisma.colors.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Colors and only return the `id`
   * const colorsWithIdOnly = await prisma.colors.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends colorsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, colorsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Colors.
   * @param {colorsDeleteArgs} args - Arguments to delete one Colors.
   * @example
   * // Delete one Colors
   * const Colors = await prisma.colors.delete({
   *   where: {
   *     // ... filter to delete one Colors
   *   }
   * })
   * 
   */
  delete<T extends colorsDeleteArgs>(args: Prisma.SelectSubset<T, colorsDeleteArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Colors.
   * @param {colorsUpdateArgs} args - Arguments to update one Colors.
   * @example
   * // Update one Colors
   * const colors = await prisma.colors.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends colorsUpdateArgs>(args: Prisma.SelectSubset<T, colorsUpdateArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Colors.
   * @param {colorsDeleteManyArgs} args - Arguments to filter Colors to delete.
   * @example
   * // Delete a few Colors
   * const { count } = await prisma.colors.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends colorsDeleteManyArgs>(args?: Prisma.SelectSubset<T, colorsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Colors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {colorsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Colors
   * const colors = await prisma.colors.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends colorsUpdateManyArgs>(args: Prisma.SelectSubset<T, colorsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Colors and returns the data updated in the database.
   * @param {colorsUpdateManyAndReturnArgs} args - Arguments to update many Colors.
   * @example
   * // Update many Colors
   * const colors = await prisma.colors.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Colors and only return the `id`
   * const colorsWithIdOnly = await prisma.colors.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends colorsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, colorsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Colors.
   * @param {colorsUpsertArgs} args - Arguments to update or create a Colors.
   * @example
   * // Update or create a Colors
   * const colors = await prisma.colors.upsert({
   *   create: {
   *     // ... data to create a Colors
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Colors we want to update
   *   }
   * })
   */
  upsert<T extends colorsUpsertArgs>(args: Prisma.SelectSubset<T, colorsUpsertArgs<ExtArgs>>): Prisma.Prisma__colorsClient<runtime.Types.Result.GetResult<Prisma.$colorsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Colors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {colorsCountArgs} args - Arguments to filter Colors to count.
   * @example
   * // Count the number of Colors
   * const count = await prisma.colors.count({
   *   where: {
   *     // ... the filter for the Colors we want to count
   *   }
   * })
  **/
  count<T extends colorsCountArgs>(
    args?: Prisma.Subset<T, colorsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ColorsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Colors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ColorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ColorsAggregateArgs>(args: Prisma.Subset<T, ColorsAggregateArgs>): Prisma.PrismaPromise<GetColorsAggregateType<T>>

  /**
   * Group by Colors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {colorsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends colorsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: colorsGroupByArgs['orderBy'] }
      : { orderBy?: colorsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, colorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the colors model
 */
readonly fields: colorsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for colors.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__colorsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the colors model
 */
export interface colorsFieldRefs {
  readonly id: Prisma.FieldRef<"colors", 'BigInt'>
  readonly hue: Prisma.FieldRef<"colors", 'Int'>
  readonly saturation: Prisma.FieldRef<"colors", 'Int'>
  readonly value: Prisma.FieldRef<"colors", 'Int'>
  readonly red: Prisma.FieldRef<"colors", 'Int'>
  readonly green: Prisma.FieldRef<"colors", 'Int'>
  readonly blue: Prisma.FieldRef<"colors", 'Int'>
  readonly hex: Prisma.FieldRef<"colors", 'String'>
  readonly websafe: Prisma.FieldRef<"colors", 'String'>
}
    

// Custom InputTypes
/**
 * colors findUnique
 */
export type colorsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * Filter, which colors to fetch.
   */
  where: Prisma.colorsWhereUniqueInput
}

/**
 * colors findUniqueOrThrow
 */
export type colorsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * Filter, which colors to fetch.
   */
  where: Prisma.colorsWhereUniqueInput
}

/**
 * colors findFirst
 */
export type colorsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * Filter, which colors to fetch.
   */
  where?: Prisma.colorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of colors to fetch.
   */
  orderBy?: Prisma.colorsOrderByWithRelationInput | Prisma.colorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for colors.
   */
  cursor?: Prisma.colorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` colors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` colors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of colors.
   */
  distinct?: Prisma.ColorsScalarFieldEnum | Prisma.ColorsScalarFieldEnum[]
}

/**
 * colors findFirstOrThrow
 */
export type colorsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * Filter, which colors to fetch.
   */
  where?: Prisma.colorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of colors to fetch.
   */
  orderBy?: Prisma.colorsOrderByWithRelationInput | Prisma.colorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for colors.
   */
  cursor?: Prisma.colorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` colors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` colors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of colors.
   */
  distinct?: Prisma.ColorsScalarFieldEnum | Prisma.ColorsScalarFieldEnum[]
}

/**
 * colors findMany
 */
export type colorsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * Filter, which colors to fetch.
   */
  where?: Prisma.colorsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of colors to fetch.
   */
  orderBy?: Prisma.colorsOrderByWithRelationInput | Prisma.colorsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing colors.
   */
  cursor?: Prisma.colorsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` colors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` colors.
   */
  skip?: number
  distinct?: Prisma.ColorsScalarFieldEnum | Prisma.ColorsScalarFieldEnum[]
}

/**
 * colors create
 */
export type colorsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * The data needed to create a colors.
   */
  data: Prisma.XOR<Prisma.colorsCreateInput, Prisma.colorsUncheckedCreateInput>
}

/**
 * colors createMany
 */
export type colorsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many colors.
   */
  data: Prisma.colorsCreateManyInput | Prisma.colorsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * colors createManyAndReturn
 */
export type colorsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * The data used to create many colors.
   */
  data: Prisma.colorsCreateManyInput | Prisma.colorsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * colors update
 */
export type colorsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * The data needed to update a colors.
   */
  data: Prisma.XOR<Prisma.colorsUpdateInput, Prisma.colorsUncheckedUpdateInput>
  /**
   * Choose, which colors to update.
   */
  where: Prisma.colorsWhereUniqueInput
}

/**
 * colors updateMany
 */
export type colorsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update colors.
   */
  data: Prisma.XOR<Prisma.colorsUpdateManyMutationInput, Prisma.colorsUncheckedUpdateManyInput>
  /**
   * Filter which colors to update
   */
  where?: Prisma.colorsWhereInput
  /**
   * Limit how many colors to update.
   */
  limit?: number
}

/**
 * colors updateManyAndReturn
 */
export type colorsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * The data used to update colors.
   */
  data: Prisma.XOR<Prisma.colorsUpdateManyMutationInput, Prisma.colorsUncheckedUpdateManyInput>
  /**
   * Filter which colors to update
   */
  where?: Prisma.colorsWhereInput
  /**
   * Limit how many colors to update.
   */
  limit?: number
}

/**
 * colors upsert
 */
export type colorsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * The filter to search for the colors to update in case it exists.
   */
  where: Prisma.colorsWhereUniqueInput
  /**
   * In case the colors found by the `where` argument doesn't exist, create a new colors with this data.
   */
  create: Prisma.XOR<Prisma.colorsCreateInput, Prisma.colorsUncheckedCreateInput>
  /**
   * In case the colors was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.colorsUpdateInput, Prisma.colorsUncheckedUpdateInput>
}

/**
 * colors delete
 */
export type colorsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
  /**
   * Filter which colors to delete.
   */
  where: Prisma.colorsWhereUniqueInput
}

/**
 * colors deleteMany
 */
export type colorsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which colors to delete
   */
  where?: Prisma.colorsWhereInput
  /**
   * Limit how many colors to delete.
   */
  limit?: number
}

/**
 * colors without action
 */
export type colorsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the colors
   */
  select?: Prisma.colorsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the colors
   */
  omit?: Prisma.colorsOmit<ExtArgs> | null
}
