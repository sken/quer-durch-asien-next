
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `captcha` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model captcha
 * 
 */
export type captchaModel = runtime.Types.Result.DefaultSelection<Prisma.$captchaPayload>

export type AggregateCaptcha = {
  _count: CaptchaCountAggregateOutputType | null
  _avg: CaptchaAvgAggregateOutputType | null
  _sum: CaptchaSumAggregateOutputType | null
  _min: CaptchaMinAggregateOutputType | null
  _max: CaptchaMaxAggregateOutputType | null
}

export type CaptchaAvgAggregateOutputType = {
  captcha_id: number | null
  captcha_time: number | null
}

export type CaptchaSumAggregateOutputType = {
  captcha_id: bigint | null
  captcha_time: bigint | null
}

export type CaptchaMinAggregateOutputType = {
  captcha_id: bigint | null
  captcha_time: bigint | null
  ip_address: string | null
  word: string | null
}

export type CaptchaMaxAggregateOutputType = {
  captcha_id: bigint | null
  captcha_time: bigint | null
  ip_address: string | null
  word: string | null
}

export type CaptchaCountAggregateOutputType = {
  captcha_id: number
  captcha_time: number
  ip_address: number
  word: number
  _all: number
}


export type CaptchaAvgAggregateInputType = {
  captcha_id?: true
  captcha_time?: true
}

export type CaptchaSumAggregateInputType = {
  captcha_id?: true
  captcha_time?: true
}

export type CaptchaMinAggregateInputType = {
  captcha_id?: true
  captcha_time?: true
  ip_address?: true
  word?: true
}

export type CaptchaMaxAggregateInputType = {
  captcha_id?: true
  captcha_time?: true
  ip_address?: true
  word?: true
}

export type CaptchaCountAggregateInputType = {
  captcha_id?: true
  captcha_time?: true
  ip_address?: true
  word?: true
  _all?: true
}

export type CaptchaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which captcha to aggregate.
   */
  where?: Prisma.captchaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of captchas to fetch.
   */
  orderBy?: Prisma.captchaOrderByWithRelationInput | Prisma.captchaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.captchaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` captchas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` captchas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned captchas
  **/
  _count?: true | CaptchaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CaptchaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CaptchaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CaptchaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CaptchaMaxAggregateInputType
}

export type GetCaptchaAggregateType<T extends CaptchaAggregateArgs> = {
      [P in keyof T & keyof AggregateCaptcha]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCaptcha[P]>
    : Prisma.GetScalarType<T[P], AggregateCaptcha[P]>
}




export type captchaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.captchaWhereInput
  orderBy?: Prisma.captchaOrderByWithAggregationInput | Prisma.captchaOrderByWithAggregationInput[]
  by: Prisma.CaptchaScalarFieldEnum[] | Prisma.CaptchaScalarFieldEnum
  having?: Prisma.captchaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CaptchaCountAggregateInputType | true
  _avg?: CaptchaAvgAggregateInputType
  _sum?: CaptchaSumAggregateInputType
  _min?: CaptchaMinAggregateInputType
  _max?: CaptchaMaxAggregateInputType
}

export type CaptchaGroupByOutputType = {
  captcha_id: bigint
  captcha_time: bigint
  ip_address: string
  word: string
  _count: CaptchaCountAggregateOutputType | null
  _avg: CaptchaAvgAggregateOutputType | null
  _sum: CaptchaSumAggregateOutputType | null
  _min: CaptchaMinAggregateOutputType | null
  _max: CaptchaMaxAggregateOutputType | null
}

type GetCaptchaGroupByPayload<T extends captchaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CaptchaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CaptchaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CaptchaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CaptchaGroupByOutputType[P]>
      }
    >
  >



export type captchaWhereInput = {
  AND?: Prisma.captchaWhereInput | Prisma.captchaWhereInput[]
  OR?: Prisma.captchaWhereInput[]
  NOT?: Prisma.captchaWhereInput | Prisma.captchaWhereInput[]
  captcha_id?: Prisma.BigIntFilter<"captcha"> | bigint | number
  captcha_time?: Prisma.BigIntFilter<"captcha"> | bigint | number
  ip_address?: Prisma.StringFilter<"captcha"> | string
  word?: Prisma.StringFilter<"captcha"> | string
}

export type captchaOrderByWithRelationInput = {
  captcha_id?: Prisma.SortOrder
  captcha_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
  word?: Prisma.SortOrder
}

export type captchaWhereUniqueInput = Prisma.AtLeast<{
  captcha_id?: bigint | number
  AND?: Prisma.captchaWhereInput | Prisma.captchaWhereInput[]
  OR?: Prisma.captchaWhereInput[]
  NOT?: Prisma.captchaWhereInput | Prisma.captchaWhereInput[]
  captcha_time?: Prisma.BigIntFilter<"captcha"> | bigint | number
  ip_address?: Prisma.StringFilter<"captcha"> | string
  word?: Prisma.StringFilter<"captcha"> | string
}, "captcha_id">

export type captchaOrderByWithAggregationInput = {
  captcha_id?: Prisma.SortOrder
  captcha_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
  word?: Prisma.SortOrder
  _count?: Prisma.captchaCountOrderByAggregateInput
  _avg?: Prisma.captchaAvgOrderByAggregateInput
  _max?: Prisma.captchaMaxOrderByAggregateInput
  _min?: Prisma.captchaMinOrderByAggregateInput
  _sum?: Prisma.captchaSumOrderByAggregateInput
}

export type captchaScalarWhereWithAggregatesInput = {
  AND?: Prisma.captchaScalarWhereWithAggregatesInput | Prisma.captchaScalarWhereWithAggregatesInput[]
  OR?: Prisma.captchaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.captchaScalarWhereWithAggregatesInput | Prisma.captchaScalarWhereWithAggregatesInput[]
  captcha_id?: Prisma.BigIntWithAggregatesFilter<"captcha"> | bigint | number
  captcha_time?: Prisma.BigIntWithAggregatesFilter<"captcha"> | bigint | number
  ip_address?: Prisma.StringWithAggregatesFilter<"captcha"> | string
  word?: Prisma.StringWithAggregatesFilter<"captcha"> | string
}

export type captchaCreateInput = {
  captcha_id?: bigint | number
  captcha_time: bigint | number
  ip_address?: string
  word: string
}

export type captchaUncheckedCreateInput = {
  captcha_id?: bigint | number
  captcha_time: bigint | number
  ip_address?: string
  word: string
}

export type captchaUpdateInput = {
  captcha_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  captcha_time?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
  word?: Prisma.StringFieldUpdateOperationsInput | string
}

export type captchaUncheckedUpdateInput = {
  captcha_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  captcha_time?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
  word?: Prisma.StringFieldUpdateOperationsInput | string
}

export type captchaCreateManyInput = {
  captcha_id?: bigint | number
  captcha_time: bigint | number
  ip_address?: string
  word: string
}

export type captchaUpdateManyMutationInput = {
  captcha_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  captcha_time?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
  word?: Prisma.StringFieldUpdateOperationsInput | string
}

export type captchaUncheckedUpdateManyInput = {
  captcha_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  captcha_time?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
  word?: Prisma.StringFieldUpdateOperationsInput | string
}

export type captchaCountOrderByAggregateInput = {
  captcha_id?: Prisma.SortOrder
  captcha_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
  word?: Prisma.SortOrder
}

export type captchaAvgOrderByAggregateInput = {
  captcha_id?: Prisma.SortOrder
  captcha_time?: Prisma.SortOrder
}

export type captchaMaxOrderByAggregateInput = {
  captcha_id?: Prisma.SortOrder
  captcha_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
  word?: Prisma.SortOrder
}

export type captchaMinOrderByAggregateInput = {
  captcha_id?: Prisma.SortOrder
  captcha_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
  word?: Prisma.SortOrder
}

export type captchaSumOrderByAggregateInput = {
  captcha_id?: Prisma.SortOrder
  captcha_time?: Prisma.SortOrder
}

export type BigIntFieldUpdateOperationsInput = {
  set?: bigint | number
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type captchaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  captcha_id?: boolean
  captcha_time?: boolean
  ip_address?: boolean
  word?: boolean
}, ExtArgs["result"]["captcha"]>

export type captchaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  captcha_id?: boolean
  captcha_time?: boolean
  ip_address?: boolean
  word?: boolean
}, ExtArgs["result"]["captcha"]>

export type captchaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  captcha_id?: boolean
  captcha_time?: boolean
  ip_address?: boolean
  word?: boolean
}, ExtArgs["result"]["captcha"]>

export type captchaSelectScalar = {
  captcha_id?: boolean
  captcha_time?: boolean
  ip_address?: boolean
  word?: boolean
}

export type captchaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"captcha_id" | "captcha_time" | "ip_address" | "word", ExtArgs["result"]["captcha"]>

export type $captchaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "captcha"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    captcha_id: bigint
    captcha_time: bigint
    ip_address: string
    word: string
  }, ExtArgs["result"]["captcha"]>
  composites: {}
}

export type captchaGetPayload<S extends boolean | null | undefined | captchaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$captchaPayload, S>

export type captchaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<captchaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CaptchaCountAggregateInputType | true
  }

export interface captchaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['captcha'], meta: { name: 'captcha' } }
  /**
   * Find zero or one Captcha that matches the filter.
   * @param {captchaFindUniqueArgs} args - Arguments to find a Captcha
   * @example
   * // Get one Captcha
   * const captcha = await prisma.captcha.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends captchaFindUniqueArgs>(args: Prisma.SelectSubset<T, captchaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Captcha that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {captchaFindUniqueOrThrowArgs} args - Arguments to find a Captcha
   * @example
   * // Get one Captcha
   * const captcha = await prisma.captcha.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends captchaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, captchaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Captcha that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {captchaFindFirstArgs} args - Arguments to find a Captcha
   * @example
   * // Get one Captcha
   * const captcha = await prisma.captcha.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends captchaFindFirstArgs>(args?: Prisma.SelectSubset<T, captchaFindFirstArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Captcha that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {captchaFindFirstOrThrowArgs} args - Arguments to find a Captcha
   * @example
   * // Get one Captcha
   * const captcha = await prisma.captcha.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends captchaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, captchaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Captchas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {captchaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Captchas
   * const captchas = await prisma.captcha.findMany()
   * 
   * // Get first 10 Captchas
   * const captchas = await prisma.captcha.findMany({ take: 10 })
   * 
   * // Only select the `captcha_id`
   * const captchaWithCaptcha_idOnly = await prisma.captcha.findMany({ select: { captcha_id: true } })
   * 
   */
  findMany<T extends captchaFindManyArgs>(args?: Prisma.SelectSubset<T, captchaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Captcha.
   * @param {captchaCreateArgs} args - Arguments to create a Captcha.
   * @example
   * // Create one Captcha
   * const Captcha = await prisma.captcha.create({
   *   data: {
   *     // ... data to create a Captcha
   *   }
   * })
   * 
   */
  create<T extends captchaCreateArgs>(args: Prisma.SelectSubset<T, captchaCreateArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Captchas.
   * @param {captchaCreateManyArgs} args - Arguments to create many Captchas.
   * @example
   * // Create many Captchas
   * const captcha = await prisma.captcha.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends captchaCreateManyArgs>(args?: Prisma.SelectSubset<T, captchaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Captchas and returns the data saved in the database.
   * @param {captchaCreateManyAndReturnArgs} args - Arguments to create many Captchas.
   * @example
   * // Create many Captchas
   * const captcha = await prisma.captcha.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Captchas and only return the `captcha_id`
   * const captchaWithCaptcha_idOnly = await prisma.captcha.createManyAndReturn({
   *   select: { captcha_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends captchaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, captchaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Captcha.
   * @param {captchaDeleteArgs} args - Arguments to delete one Captcha.
   * @example
   * // Delete one Captcha
   * const Captcha = await prisma.captcha.delete({
   *   where: {
   *     // ... filter to delete one Captcha
   *   }
   * })
   * 
   */
  delete<T extends captchaDeleteArgs>(args: Prisma.SelectSubset<T, captchaDeleteArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Captcha.
   * @param {captchaUpdateArgs} args - Arguments to update one Captcha.
   * @example
   * // Update one Captcha
   * const captcha = await prisma.captcha.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends captchaUpdateArgs>(args: Prisma.SelectSubset<T, captchaUpdateArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Captchas.
   * @param {captchaDeleteManyArgs} args - Arguments to filter Captchas to delete.
   * @example
   * // Delete a few Captchas
   * const { count } = await prisma.captcha.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends captchaDeleteManyArgs>(args?: Prisma.SelectSubset<T, captchaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Captchas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {captchaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Captchas
   * const captcha = await prisma.captcha.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends captchaUpdateManyArgs>(args: Prisma.SelectSubset<T, captchaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Captchas and returns the data updated in the database.
   * @param {captchaUpdateManyAndReturnArgs} args - Arguments to update many Captchas.
   * @example
   * // Update many Captchas
   * const captcha = await prisma.captcha.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Captchas and only return the `captcha_id`
   * const captchaWithCaptcha_idOnly = await prisma.captcha.updateManyAndReturn({
   *   select: { captcha_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends captchaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, captchaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Captcha.
   * @param {captchaUpsertArgs} args - Arguments to update or create a Captcha.
   * @example
   * // Update or create a Captcha
   * const captcha = await prisma.captcha.upsert({
   *   create: {
   *     // ... data to create a Captcha
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Captcha we want to update
   *   }
   * })
   */
  upsert<T extends captchaUpsertArgs>(args: Prisma.SelectSubset<T, captchaUpsertArgs<ExtArgs>>): Prisma.Prisma__captchaClient<runtime.Types.Result.GetResult<Prisma.$captchaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Captchas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {captchaCountArgs} args - Arguments to filter Captchas to count.
   * @example
   * // Count the number of Captchas
   * const count = await prisma.captcha.count({
   *   where: {
   *     // ... the filter for the Captchas we want to count
   *   }
   * })
  **/
  count<T extends captchaCountArgs>(
    args?: Prisma.Subset<T, captchaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CaptchaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Captcha.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CaptchaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CaptchaAggregateArgs>(args: Prisma.Subset<T, CaptchaAggregateArgs>): Prisma.PrismaPromise<GetCaptchaAggregateType<T>>

  /**
   * Group by Captcha.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {captchaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends captchaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: captchaGroupByArgs['orderBy'] }
      : { orderBy?: captchaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, captchaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaptchaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the captcha model
 */
readonly fields: captchaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for captcha.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__captchaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the captcha model
 */
export interface captchaFieldRefs {
  readonly captcha_id: Prisma.FieldRef<"captcha", 'BigInt'>
  readonly captcha_time: Prisma.FieldRef<"captcha", 'BigInt'>
  readonly ip_address: Prisma.FieldRef<"captcha", 'String'>
  readonly word: Prisma.FieldRef<"captcha", 'String'>
}
    

// Custom InputTypes
/**
 * captcha findUnique
 */
export type captchaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * Filter, which captcha to fetch.
   */
  where: Prisma.captchaWhereUniqueInput
}

/**
 * captcha findUniqueOrThrow
 */
export type captchaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * Filter, which captcha to fetch.
   */
  where: Prisma.captchaWhereUniqueInput
}

/**
 * captcha findFirst
 */
export type captchaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * Filter, which captcha to fetch.
   */
  where?: Prisma.captchaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of captchas to fetch.
   */
  orderBy?: Prisma.captchaOrderByWithRelationInput | Prisma.captchaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for captchas.
   */
  cursor?: Prisma.captchaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` captchas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` captchas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of captchas.
   */
  distinct?: Prisma.CaptchaScalarFieldEnum | Prisma.CaptchaScalarFieldEnum[]
}

/**
 * captcha findFirstOrThrow
 */
export type captchaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * Filter, which captcha to fetch.
   */
  where?: Prisma.captchaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of captchas to fetch.
   */
  orderBy?: Prisma.captchaOrderByWithRelationInput | Prisma.captchaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for captchas.
   */
  cursor?: Prisma.captchaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` captchas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` captchas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of captchas.
   */
  distinct?: Prisma.CaptchaScalarFieldEnum | Prisma.CaptchaScalarFieldEnum[]
}

/**
 * captcha findMany
 */
export type captchaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * Filter, which captchas to fetch.
   */
  where?: Prisma.captchaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of captchas to fetch.
   */
  orderBy?: Prisma.captchaOrderByWithRelationInput | Prisma.captchaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing captchas.
   */
  cursor?: Prisma.captchaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` captchas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` captchas.
   */
  skip?: number
  distinct?: Prisma.CaptchaScalarFieldEnum | Prisma.CaptchaScalarFieldEnum[]
}

/**
 * captcha create
 */
export type captchaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * The data needed to create a captcha.
   */
  data: Prisma.XOR<Prisma.captchaCreateInput, Prisma.captchaUncheckedCreateInput>
}

/**
 * captcha createMany
 */
export type captchaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many captchas.
   */
  data: Prisma.captchaCreateManyInput | Prisma.captchaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * captcha createManyAndReturn
 */
export type captchaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * The data used to create many captchas.
   */
  data: Prisma.captchaCreateManyInput | Prisma.captchaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * captcha update
 */
export type captchaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * The data needed to update a captcha.
   */
  data: Prisma.XOR<Prisma.captchaUpdateInput, Prisma.captchaUncheckedUpdateInput>
  /**
   * Choose, which captcha to update.
   */
  where: Prisma.captchaWhereUniqueInput
}

/**
 * captcha updateMany
 */
export type captchaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update captchas.
   */
  data: Prisma.XOR<Prisma.captchaUpdateManyMutationInput, Prisma.captchaUncheckedUpdateManyInput>
  /**
   * Filter which captchas to update
   */
  where?: Prisma.captchaWhereInput
  /**
   * Limit how many captchas to update.
   */
  limit?: number
}

/**
 * captcha updateManyAndReturn
 */
export type captchaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * The data used to update captchas.
   */
  data: Prisma.XOR<Prisma.captchaUpdateManyMutationInput, Prisma.captchaUncheckedUpdateManyInput>
  /**
   * Filter which captchas to update
   */
  where?: Prisma.captchaWhereInput
  /**
   * Limit how many captchas to update.
   */
  limit?: number
}

/**
 * captcha upsert
 */
export type captchaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * The filter to search for the captcha to update in case it exists.
   */
  where: Prisma.captchaWhereUniqueInput
  /**
   * In case the captcha found by the `where` argument doesn't exist, create a new captcha with this data.
   */
  create: Prisma.XOR<Prisma.captchaCreateInput, Prisma.captchaUncheckedCreateInput>
  /**
   * In case the captcha was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.captchaUpdateInput, Prisma.captchaUncheckedUpdateInput>
}

/**
 * captcha delete
 */
export type captchaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
  /**
   * Filter which captcha to delete.
   */
  where: Prisma.captchaWhereUniqueInput
}

/**
 * captcha deleteMany
 */
export type captchaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which captchas to delete
   */
  where?: Prisma.captchaWhereInput
  /**
   * Limit how many captchas to delete.
   */
  limit?: number
}

/**
 * captcha without action
 */
export type captchaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the captcha
   */
  select?: Prisma.captchaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the captcha
   */
  omit?: Prisma.captchaOmit<ExtArgs> | null
}
