
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `gpstrack` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model gpstrack
 * 
 */
export type gpstrackModel = runtime.Types.Result.DefaultSelection<Prisma.$gpstrackPayload>

export type AggregateGpstrack = {
  _count: GpstrackCountAggregateOutputType | null
  _avg: GpstrackAvgAggregateOutputType | null
  _sum: GpstrackSumAggregateOutputType | null
  _min: GpstrackMinAggregateOutputType | null
  _max: GpstrackMaxAggregateOutputType | null
}

export type GpstrackAvgAggregateOutputType = {
  id: number | null
  utc: number | null
  lat: number | null
  lon: number | null
  altitude: number | null
}

export type GpstrackSumAggregateOutputType = {
  id: bigint | null
  utc: number | null
  lat: number | null
  lon: number | null
  altitude: number | null
}

export type GpstrackMinAggregateOutputType = {
  id: bigint | null
  data: string | null
  utc: number | null
  lat: number | null
  ns: string | null
  lon: number | null
  ew: string | null
  altitude: number | null
  countrycode: string | null
  geoidal: string | null
  spd_over_grnd: string | null
  spdkmph: string | null
  spdknts: string | null
  deg_compass: string | null
  magnetic_var: string | null
  gps_quality: string | null
  dgps: string | null
  dgps_stat: string | null
  hdp: string | null
  pdop: string | null
  hdop: string | null
  vdop: string | null
  sat1: string | null
  sat2: string | null
  sat3: string | null
  sat4: string | null
  sat5: string | null
  sat6: string | null
  sat7: string | null
  sat8: string | null
  sat9: string | null
  sat10: string | null
  sat11: string | null
  sat12: string | null
}

export type GpstrackMaxAggregateOutputType = {
  id: bigint | null
  data: string | null
  utc: number | null
  lat: number | null
  ns: string | null
  lon: number | null
  ew: string | null
  altitude: number | null
  countrycode: string | null
  geoidal: string | null
  spd_over_grnd: string | null
  spdkmph: string | null
  spdknts: string | null
  deg_compass: string | null
  magnetic_var: string | null
  gps_quality: string | null
  dgps: string | null
  dgps_stat: string | null
  hdp: string | null
  pdop: string | null
  hdop: string | null
  vdop: string | null
  sat1: string | null
  sat2: string | null
  sat3: string | null
  sat4: string | null
  sat5: string | null
  sat6: string | null
  sat7: string | null
  sat8: string | null
  sat9: string | null
  sat10: string | null
  sat11: string | null
  sat12: string | null
}

export type GpstrackCountAggregateOutputType = {
  id: number
  data: number
  utc: number
  lat: number
  ns: number
  lon: number
  ew: number
  altitude: number
  countrycode: number
  geoidal: number
  spd_over_grnd: number
  spdkmph: number
  spdknts: number
  deg_compass: number
  magnetic_var: number
  gps_quality: number
  dgps: number
  dgps_stat: number
  hdp: number
  pdop: number
  hdop: number
  vdop: number
  sat1: number
  sat2: number
  sat3: number
  sat4: number
  sat5: number
  sat6: number
  sat7: number
  sat8: number
  sat9: number
  sat10: number
  sat11: number
  sat12: number
  _all: number
}


export type GpstrackAvgAggregateInputType = {
  id?: true
  utc?: true
  lat?: true
  lon?: true
  altitude?: true
}

export type GpstrackSumAggregateInputType = {
  id?: true
  utc?: true
  lat?: true
  lon?: true
  altitude?: true
}

export type GpstrackMinAggregateInputType = {
  id?: true
  data?: true
  utc?: true
  lat?: true
  ns?: true
  lon?: true
  ew?: true
  altitude?: true
  countrycode?: true
  geoidal?: true
  spd_over_grnd?: true
  spdkmph?: true
  spdknts?: true
  deg_compass?: true
  magnetic_var?: true
  gps_quality?: true
  dgps?: true
  dgps_stat?: true
  hdp?: true
  pdop?: true
  hdop?: true
  vdop?: true
  sat1?: true
  sat2?: true
  sat3?: true
  sat4?: true
  sat5?: true
  sat6?: true
  sat7?: true
  sat8?: true
  sat9?: true
  sat10?: true
  sat11?: true
  sat12?: true
}

export type GpstrackMaxAggregateInputType = {
  id?: true
  data?: true
  utc?: true
  lat?: true
  ns?: true
  lon?: true
  ew?: true
  altitude?: true
  countrycode?: true
  geoidal?: true
  spd_over_grnd?: true
  spdkmph?: true
  spdknts?: true
  deg_compass?: true
  magnetic_var?: true
  gps_quality?: true
  dgps?: true
  dgps_stat?: true
  hdp?: true
  pdop?: true
  hdop?: true
  vdop?: true
  sat1?: true
  sat2?: true
  sat3?: true
  sat4?: true
  sat5?: true
  sat6?: true
  sat7?: true
  sat8?: true
  sat9?: true
  sat10?: true
  sat11?: true
  sat12?: true
}

export type GpstrackCountAggregateInputType = {
  id?: true
  data?: true
  utc?: true
  lat?: true
  ns?: true
  lon?: true
  ew?: true
  altitude?: true
  countrycode?: true
  geoidal?: true
  spd_over_grnd?: true
  spdkmph?: true
  spdknts?: true
  deg_compass?: true
  magnetic_var?: true
  gps_quality?: true
  dgps?: true
  dgps_stat?: true
  hdp?: true
  pdop?: true
  hdop?: true
  vdop?: true
  sat1?: true
  sat2?: true
  sat3?: true
  sat4?: true
  sat5?: true
  sat6?: true
  sat7?: true
  sat8?: true
  sat9?: true
  sat10?: true
  sat11?: true
  sat12?: true
  _all?: true
}

export type GpstrackAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which gpstrack to aggregate.
   */
  where?: Prisma.gpstrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of gpstracks to fetch.
   */
  orderBy?: Prisma.gpstrackOrderByWithRelationInput | Prisma.gpstrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.gpstrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` gpstracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` gpstracks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned gpstracks
  **/
  _count?: true | GpstrackCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GpstrackAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GpstrackSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GpstrackMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GpstrackMaxAggregateInputType
}

export type GetGpstrackAggregateType<T extends GpstrackAggregateArgs> = {
      [P in keyof T & keyof AggregateGpstrack]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGpstrack[P]>
    : Prisma.GetScalarType<T[P], AggregateGpstrack[P]>
}




export type gpstrackGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.gpstrackWhereInput
  orderBy?: Prisma.gpstrackOrderByWithAggregationInput | Prisma.gpstrackOrderByWithAggregationInput[]
  by: Prisma.GpstrackScalarFieldEnum[] | Prisma.GpstrackScalarFieldEnum
  having?: Prisma.gpstrackScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GpstrackCountAggregateInputType | true
  _avg?: GpstrackAvgAggregateInputType
  _sum?: GpstrackSumAggregateInputType
  _min?: GpstrackMinAggregateInputType
  _max?: GpstrackMaxAggregateInputType
}

export type GpstrackGroupByOutputType = {
  id: bigint
  data: string
  utc: number
  lat: number
  ns: string
  lon: number
  ew: string
  altitude: number
  countrycode: string
  geoidal: string
  spd_over_grnd: string
  spdkmph: string
  spdknts: string
  deg_compass: string
  magnetic_var: string
  gps_quality: string
  dgps: string
  dgps_stat: string
  hdp: string
  pdop: string
  hdop: string
  vdop: string
  sat1: string
  sat2: string
  sat3: string
  sat4: string
  sat5: string
  sat6: string
  sat7: string
  sat8: string
  sat9: string
  sat10: string
  sat11: string
  sat12: string
  _count: GpstrackCountAggregateOutputType | null
  _avg: GpstrackAvgAggregateOutputType | null
  _sum: GpstrackSumAggregateOutputType | null
  _min: GpstrackMinAggregateOutputType | null
  _max: GpstrackMaxAggregateOutputType | null
}

type GetGpstrackGroupByPayload<T extends gpstrackGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GpstrackGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GpstrackGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GpstrackGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GpstrackGroupByOutputType[P]>
      }
    >
  >



export type gpstrackWhereInput = {
  AND?: Prisma.gpstrackWhereInput | Prisma.gpstrackWhereInput[]
  OR?: Prisma.gpstrackWhereInput[]
  NOT?: Prisma.gpstrackWhereInput | Prisma.gpstrackWhereInput[]
  id?: Prisma.BigIntFilter<"gpstrack"> | bigint | number
  data?: Prisma.StringFilter<"gpstrack"> | string
  utc?: Prisma.IntFilter<"gpstrack"> | number
  lat?: Prisma.FloatFilter<"gpstrack"> | number
  ns?: Prisma.StringFilter<"gpstrack"> | string
  lon?: Prisma.FloatFilter<"gpstrack"> | number
  ew?: Prisma.StringFilter<"gpstrack"> | string
  altitude?: Prisma.FloatFilter<"gpstrack"> | number
  countrycode?: Prisma.StringFilter<"gpstrack"> | string
  geoidal?: Prisma.StringFilter<"gpstrack"> | string
  spd_over_grnd?: Prisma.StringFilter<"gpstrack"> | string
  spdkmph?: Prisma.StringFilter<"gpstrack"> | string
  spdknts?: Prisma.StringFilter<"gpstrack"> | string
  deg_compass?: Prisma.StringFilter<"gpstrack"> | string
  magnetic_var?: Prisma.StringFilter<"gpstrack"> | string
  gps_quality?: Prisma.StringFilter<"gpstrack"> | string
  dgps?: Prisma.StringFilter<"gpstrack"> | string
  dgps_stat?: Prisma.StringFilter<"gpstrack"> | string
  hdp?: Prisma.StringFilter<"gpstrack"> | string
  pdop?: Prisma.StringFilter<"gpstrack"> | string
  hdop?: Prisma.StringFilter<"gpstrack"> | string
  vdop?: Prisma.StringFilter<"gpstrack"> | string
  sat1?: Prisma.StringFilter<"gpstrack"> | string
  sat2?: Prisma.StringFilter<"gpstrack"> | string
  sat3?: Prisma.StringFilter<"gpstrack"> | string
  sat4?: Prisma.StringFilter<"gpstrack"> | string
  sat5?: Prisma.StringFilter<"gpstrack"> | string
  sat6?: Prisma.StringFilter<"gpstrack"> | string
  sat7?: Prisma.StringFilter<"gpstrack"> | string
  sat8?: Prisma.StringFilter<"gpstrack"> | string
  sat9?: Prisma.StringFilter<"gpstrack"> | string
  sat10?: Prisma.StringFilter<"gpstrack"> | string
  sat11?: Prisma.StringFilter<"gpstrack"> | string
  sat12?: Prisma.StringFilter<"gpstrack"> | string
}

export type gpstrackOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  utc?: Prisma.SortOrder
  lat?: Prisma.SortOrder
  ns?: Prisma.SortOrder
  lon?: Prisma.SortOrder
  ew?: Prisma.SortOrder
  altitude?: Prisma.SortOrder
  countrycode?: Prisma.SortOrder
  geoidal?: Prisma.SortOrder
  spd_over_grnd?: Prisma.SortOrder
  spdkmph?: Prisma.SortOrder
  spdknts?: Prisma.SortOrder
  deg_compass?: Prisma.SortOrder
  magnetic_var?: Prisma.SortOrder
  gps_quality?: Prisma.SortOrder
  dgps?: Prisma.SortOrder
  dgps_stat?: Prisma.SortOrder
  hdp?: Prisma.SortOrder
  pdop?: Prisma.SortOrder
  hdop?: Prisma.SortOrder
  vdop?: Prisma.SortOrder
  sat1?: Prisma.SortOrder
  sat2?: Prisma.SortOrder
  sat3?: Prisma.SortOrder
  sat4?: Prisma.SortOrder
  sat5?: Prisma.SortOrder
  sat6?: Prisma.SortOrder
  sat7?: Prisma.SortOrder
  sat8?: Prisma.SortOrder
  sat9?: Prisma.SortOrder
  sat10?: Prisma.SortOrder
  sat11?: Prisma.SortOrder
  sat12?: Prisma.SortOrder
}

export type gpstrackWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.gpstrackWhereInput | Prisma.gpstrackWhereInput[]
  OR?: Prisma.gpstrackWhereInput[]
  NOT?: Prisma.gpstrackWhereInput | Prisma.gpstrackWhereInput[]
  data?: Prisma.StringFilter<"gpstrack"> | string
  utc?: Prisma.IntFilter<"gpstrack"> | number
  lat?: Prisma.FloatFilter<"gpstrack"> | number
  ns?: Prisma.StringFilter<"gpstrack"> | string
  lon?: Prisma.FloatFilter<"gpstrack"> | number
  ew?: Prisma.StringFilter<"gpstrack"> | string
  altitude?: Prisma.FloatFilter<"gpstrack"> | number
  countrycode?: Prisma.StringFilter<"gpstrack"> | string
  geoidal?: Prisma.StringFilter<"gpstrack"> | string
  spd_over_grnd?: Prisma.StringFilter<"gpstrack"> | string
  spdkmph?: Prisma.StringFilter<"gpstrack"> | string
  spdknts?: Prisma.StringFilter<"gpstrack"> | string
  deg_compass?: Prisma.StringFilter<"gpstrack"> | string
  magnetic_var?: Prisma.StringFilter<"gpstrack"> | string
  gps_quality?: Prisma.StringFilter<"gpstrack"> | string
  dgps?: Prisma.StringFilter<"gpstrack"> | string
  dgps_stat?: Prisma.StringFilter<"gpstrack"> | string
  hdp?: Prisma.StringFilter<"gpstrack"> | string
  pdop?: Prisma.StringFilter<"gpstrack"> | string
  hdop?: Prisma.StringFilter<"gpstrack"> | string
  vdop?: Prisma.StringFilter<"gpstrack"> | string
  sat1?: Prisma.StringFilter<"gpstrack"> | string
  sat2?: Prisma.StringFilter<"gpstrack"> | string
  sat3?: Prisma.StringFilter<"gpstrack"> | string
  sat4?: Prisma.StringFilter<"gpstrack"> | string
  sat5?: Prisma.StringFilter<"gpstrack"> | string
  sat6?: Prisma.StringFilter<"gpstrack"> | string
  sat7?: Prisma.StringFilter<"gpstrack"> | string
  sat8?: Prisma.StringFilter<"gpstrack"> | string
  sat9?: Prisma.StringFilter<"gpstrack"> | string
  sat10?: Prisma.StringFilter<"gpstrack"> | string
  sat11?: Prisma.StringFilter<"gpstrack"> | string
  sat12?: Prisma.StringFilter<"gpstrack"> | string
}, "id">

export type gpstrackOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  utc?: Prisma.SortOrder
  lat?: Prisma.SortOrder
  ns?: Prisma.SortOrder
  lon?: Prisma.SortOrder
  ew?: Prisma.SortOrder
  altitude?: Prisma.SortOrder
  countrycode?: Prisma.SortOrder
  geoidal?: Prisma.SortOrder
  spd_over_grnd?: Prisma.SortOrder
  spdkmph?: Prisma.SortOrder
  spdknts?: Prisma.SortOrder
  deg_compass?: Prisma.SortOrder
  magnetic_var?: Prisma.SortOrder
  gps_quality?: Prisma.SortOrder
  dgps?: Prisma.SortOrder
  dgps_stat?: Prisma.SortOrder
  hdp?: Prisma.SortOrder
  pdop?: Prisma.SortOrder
  hdop?: Prisma.SortOrder
  vdop?: Prisma.SortOrder
  sat1?: Prisma.SortOrder
  sat2?: Prisma.SortOrder
  sat3?: Prisma.SortOrder
  sat4?: Prisma.SortOrder
  sat5?: Prisma.SortOrder
  sat6?: Prisma.SortOrder
  sat7?: Prisma.SortOrder
  sat8?: Prisma.SortOrder
  sat9?: Prisma.SortOrder
  sat10?: Prisma.SortOrder
  sat11?: Prisma.SortOrder
  sat12?: Prisma.SortOrder
  _count?: Prisma.gpstrackCountOrderByAggregateInput
  _avg?: Prisma.gpstrackAvgOrderByAggregateInput
  _max?: Prisma.gpstrackMaxOrderByAggregateInput
  _min?: Prisma.gpstrackMinOrderByAggregateInput
  _sum?: Prisma.gpstrackSumOrderByAggregateInput
}

export type gpstrackScalarWhereWithAggregatesInput = {
  AND?: Prisma.gpstrackScalarWhereWithAggregatesInput | Prisma.gpstrackScalarWhereWithAggregatesInput[]
  OR?: Prisma.gpstrackScalarWhereWithAggregatesInput[]
  NOT?: Prisma.gpstrackScalarWhereWithAggregatesInput | Prisma.gpstrackScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"gpstrack"> | bigint | number
  data?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  utc?: Prisma.IntWithAggregatesFilter<"gpstrack"> | number
  lat?: Prisma.FloatWithAggregatesFilter<"gpstrack"> | number
  ns?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  lon?: Prisma.FloatWithAggregatesFilter<"gpstrack"> | number
  ew?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  altitude?: Prisma.FloatWithAggregatesFilter<"gpstrack"> | number
  countrycode?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  geoidal?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  spd_over_grnd?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  spdkmph?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  spdknts?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  deg_compass?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  magnetic_var?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  gps_quality?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  dgps?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  dgps_stat?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  hdp?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  pdop?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  hdop?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  vdop?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat1?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat2?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat3?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat4?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat5?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat6?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat7?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat8?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat9?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat10?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat11?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
  sat12?: Prisma.StringWithAggregatesFilter<"gpstrack"> | string
}

export type gpstrackCreateInput = {
  id?: bigint | number
  data?: string
  utc?: number
  lat?: number
  ns?: string
  lon?: number
  ew?: string
  altitude?: number
  countrycode?: string
  geoidal?: string
  spd_over_grnd?: string
  spdkmph?: string
  spdknts?: string
  deg_compass?: string
  magnetic_var?: string
  gps_quality?: string
  dgps?: string
  dgps_stat?: string
  hdp?: string
  pdop?: string
  hdop?: string
  vdop?: string
  sat1?: string
  sat2?: string
  sat3?: string
  sat4?: string
  sat5?: string
  sat6?: string
  sat7?: string
  sat8?: string
  sat9?: string
  sat10?: string
  sat11?: string
  sat12?: string
}

export type gpstrackUncheckedCreateInput = {
  id?: bigint | number
  data?: string
  utc?: number
  lat?: number
  ns?: string
  lon?: number
  ew?: string
  altitude?: number
  countrycode?: string
  geoidal?: string
  spd_over_grnd?: string
  spdkmph?: string
  spdknts?: string
  deg_compass?: string
  magnetic_var?: string
  gps_quality?: string
  dgps?: string
  dgps_stat?: string
  hdp?: string
  pdop?: string
  hdop?: string
  vdop?: string
  sat1?: string
  sat2?: string
  sat3?: string
  sat4?: string
  sat5?: string
  sat6?: string
  sat7?: string
  sat8?: string
  sat9?: string
  sat10?: string
  sat11?: string
  sat12?: string
}

export type gpstrackUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  data?: Prisma.StringFieldUpdateOperationsInput | string
  utc?: Prisma.IntFieldUpdateOperationsInput | number
  lat?: Prisma.FloatFieldUpdateOperationsInput | number
  ns?: Prisma.StringFieldUpdateOperationsInput | string
  lon?: Prisma.FloatFieldUpdateOperationsInput | number
  ew?: Prisma.StringFieldUpdateOperationsInput | string
  altitude?: Prisma.FloatFieldUpdateOperationsInput | number
  countrycode?: Prisma.StringFieldUpdateOperationsInput | string
  geoidal?: Prisma.StringFieldUpdateOperationsInput | string
  spd_over_grnd?: Prisma.StringFieldUpdateOperationsInput | string
  spdkmph?: Prisma.StringFieldUpdateOperationsInput | string
  spdknts?: Prisma.StringFieldUpdateOperationsInput | string
  deg_compass?: Prisma.StringFieldUpdateOperationsInput | string
  magnetic_var?: Prisma.StringFieldUpdateOperationsInput | string
  gps_quality?: Prisma.StringFieldUpdateOperationsInput | string
  dgps?: Prisma.StringFieldUpdateOperationsInput | string
  dgps_stat?: Prisma.StringFieldUpdateOperationsInput | string
  hdp?: Prisma.StringFieldUpdateOperationsInput | string
  pdop?: Prisma.StringFieldUpdateOperationsInput | string
  hdop?: Prisma.StringFieldUpdateOperationsInput | string
  vdop?: Prisma.StringFieldUpdateOperationsInput | string
  sat1?: Prisma.StringFieldUpdateOperationsInput | string
  sat2?: Prisma.StringFieldUpdateOperationsInput | string
  sat3?: Prisma.StringFieldUpdateOperationsInput | string
  sat4?: Prisma.StringFieldUpdateOperationsInput | string
  sat5?: Prisma.StringFieldUpdateOperationsInput | string
  sat6?: Prisma.StringFieldUpdateOperationsInput | string
  sat7?: Prisma.StringFieldUpdateOperationsInput | string
  sat8?: Prisma.StringFieldUpdateOperationsInput | string
  sat9?: Prisma.StringFieldUpdateOperationsInput | string
  sat10?: Prisma.StringFieldUpdateOperationsInput | string
  sat11?: Prisma.StringFieldUpdateOperationsInput | string
  sat12?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gpstrackUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  data?: Prisma.StringFieldUpdateOperationsInput | string
  utc?: Prisma.IntFieldUpdateOperationsInput | number
  lat?: Prisma.FloatFieldUpdateOperationsInput | number
  ns?: Prisma.StringFieldUpdateOperationsInput | string
  lon?: Prisma.FloatFieldUpdateOperationsInput | number
  ew?: Prisma.StringFieldUpdateOperationsInput | string
  altitude?: Prisma.FloatFieldUpdateOperationsInput | number
  countrycode?: Prisma.StringFieldUpdateOperationsInput | string
  geoidal?: Prisma.StringFieldUpdateOperationsInput | string
  spd_over_grnd?: Prisma.StringFieldUpdateOperationsInput | string
  spdkmph?: Prisma.StringFieldUpdateOperationsInput | string
  spdknts?: Prisma.StringFieldUpdateOperationsInput | string
  deg_compass?: Prisma.StringFieldUpdateOperationsInput | string
  magnetic_var?: Prisma.StringFieldUpdateOperationsInput | string
  gps_quality?: Prisma.StringFieldUpdateOperationsInput | string
  dgps?: Prisma.StringFieldUpdateOperationsInput | string
  dgps_stat?: Prisma.StringFieldUpdateOperationsInput | string
  hdp?: Prisma.StringFieldUpdateOperationsInput | string
  pdop?: Prisma.StringFieldUpdateOperationsInput | string
  hdop?: Prisma.StringFieldUpdateOperationsInput | string
  vdop?: Prisma.StringFieldUpdateOperationsInput | string
  sat1?: Prisma.StringFieldUpdateOperationsInput | string
  sat2?: Prisma.StringFieldUpdateOperationsInput | string
  sat3?: Prisma.StringFieldUpdateOperationsInput | string
  sat4?: Prisma.StringFieldUpdateOperationsInput | string
  sat5?: Prisma.StringFieldUpdateOperationsInput | string
  sat6?: Prisma.StringFieldUpdateOperationsInput | string
  sat7?: Prisma.StringFieldUpdateOperationsInput | string
  sat8?: Prisma.StringFieldUpdateOperationsInput | string
  sat9?: Prisma.StringFieldUpdateOperationsInput | string
  sat10?: Prisma.StringFieldUpdateOperationsInput | string
  sat11?: Prisma.StringFieldUpdateOperationsInput | string
  sat12?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gpstrackCreateManyInput = {
  id?: bigint | number
  data?: string
  utc?: number
  lat?: number
  ns?: string
  lon?: number
  ew?: string
  altitude?: number
  countrycode?: string
  geoidal?: string
  spd_over_grnd?: string
  spdkmph?: string
  spdknts?: string
  deg_compass?: string
  magnetic_var?: string
  gps_quality?: string
  dgps?: string
  dgps_stat?: string
  hdp?: string
  pdop?: string
  hdop?: string
  vdop?: string
  sat1?: string
  sat2?: string
  sat3?: string
  sat4?: string
  sat5?: string
  sat6?: string
  sat7?: string
  sat8?: string
  sat9?: string
  sat10?: string
  sat11?: string
  sat12?: string
}

export type gpstrackUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  data?: Prisma.StringFieldUpdateOperationsInput | string
  utc?: Prisma.IntFieldUpdateOperationsInput | number
  lat?: Prisma.FloatFieldUpdateOperationsInput | number
  ns?: Prisma.StringFieldUpdateOperationsInput | string
  lon?: Prisma.FloatFieldUpdateOperationsInput | number
  ew?: Prisma.StringFieldUpdateOperationsInput | string
  altitude?: Prisma.FloatFieldUpdateOperationsInput | number
  countrycode?: Prisma.StringFieldUpdateOperationsInput | string
  geoidal?: Prisma.StringFieldUpdateOperationsInput | string
  spd_over_grnd?: Prisma.StringFieldUpdateOperationsInput | string
  spdkmph?: Prisma.StringFieldUpdateOperationsInput | string
  spdknts?: Prisma.StringFieldUpdateOperationsInput | string
  deg_compass?: Prisma.StringFieldUpdateOperationsInput | string
  magnetic_var?: Prisma.StringFieldUpdateOperationsInput | string
  gps_quality?: Prisma.StringFieldUpdateOperationsInput | string
  dgps?: Prisma.StringFieldUpdateOperationsInput | string
  dgps_stat?: Prisma.StringFieldUpdateOperationsInput | string
  hdp?: Prisma.StringFieldUpdateOperationsInput | string
  pdop?: Prisma.StringFieldUpdateOperationsInput | string
  hdop?: Prisma.StringFieldUpdateOperationsInput | string
  vdop?: Prisma.StringFieldUpdateOperationsInput | string
  sat1?: Prisma.StringFieldUpdateOperationsInput | string
  sat2?: Prisma.StringFieldUpdateOperationsInput | string
  sat3?: Prisma.StringFieldUpdateOperationsInput | string
  sat4?: Prisma.StringFieldUpdateOperationsInput | string
  sat5?: Prisma.StringFieldUpdateOperationsInput | string
  sat6?: Prisma.StringFieldUpdateOperationsInput | string
  sat7?: Prisma.StringFieldUpdateOperationsInput | string
  sat8?: Prisma.StringFieldUpdateOperationsInput | string
  sat9?: Prisma.StringFieldUpdateOperationsInput | string
  sat10?: Prisma.StringFieldUpdateOperationsInput | string
  sat11?: Prisma.StringFieldUpdateOperationsInput | string
  sat12?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gpstrackUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  data?: Prisma.StringFieldUpdateOperationsInput | string
  utc?: Prisma.IntFieldUpdateOperationsInput | number
  lat?: Prisma.FloatFieldUpdateOperationsInput | number
  ns?: Prisma.StringFieldUpdateOperationsInput | string
  lon?: Prisma.FloatFieldUpdateOperationsInput | number
  ew?: Prisma.StringFieldUpdateOperationsInput | string
  altitude?: Prisma.FloatFieldUpdateOperationsInput | number
  countrycode?: Prisma.StringFieldUpdateOperationsInput | string
  geoidal?: Prisma.StringFieldUpdateOperationsInput | string
  spd_over_grnd?: Prisma.StringFieldUpdateOperationsInput | string
  spdkmph?: Prisma.StringFieldUpdateOperationsInput | string
  spdknts?: Prisma.StringFieldUpdateOperationsInput | string
  deg_compass?: Prisma.StringFieldUpdateOperationsInput | string
  magnetic_var?: Prisma.StringFieldUpdateOperationsInput | string
  gps_quality?: Prisma.StringFieldUpdateOperationsInput | string
  dgps?: Prisma.StringFieldUpdateOperationsInput | string
  dgps_stat?: Prisma.StringFieldUpdateOperationsInput | string
  hdp?: Prisma.StringFieldUpdateOperationsInput | string
  pdop?: Prisma.StringFieldUpdateOperationsInput | string
  hdop?: Prisma.StringFieldUpdateOperationsInput | string
  vdop?: Prisma.StringFieldUpdateOperationsInput | string
  sat1?: Prisma.StringFieldUpdateOperationsInput | string
  sat2?: Prisma.StringFieldUpdateOperationsInput | string
  sat3?: Prisma.StringFieldUpdateOperationsInput | string
  sat4?: Prisma.StringFieldUpdateOperationsInput | string
  sat5?: Prisma.StringFieldUpdateOperationsInput | string
  sat6?: Prisma.StringFieldUpdateOperationsInput | string
  sat7?: Prisma.StringFieldUpdateOperationsInput | string
  sat8?: Prisma.StringFieldUpdateOperationsInput | string
  sat9?: Prisma.StringFieldUpdateOperationsInput | string
  sat10?: Prisma.StringFieldUpdateOperationsInput | string
  sat11?: Prisma.StringFieldUpdateOperationsInput | string
  sat12?: Prisma.StringFieldUpdateOperationsInput | string
}

export type gpstrackCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  utc?: Prisma.SortOrder
  lat?: Prisma.SortOrder
  ns?: Prisma.SortOrder
  lon?: Prisma.SortOrder
  ew?: Prisma.SortOrder
  altitude?: Prisma.SortOrder
  countrycode?: Prisma.SortOrder
  geoidal?: Prisma.SortOrder
  spd_over_grnd?: Prisma.SortOrder
  spdkmph?: Prisma.SortOrder
  spdknts?: Prisma.SortOrder
  deg_compass?: Prisma.SortOrder
  magnetic_var?: Prisma.SortOrder
  gps_quality?: Prisma.SortOrder
  dgps?: Prisma.SortOrder
  dgps_stat?: Prisma.SortOrder
  hdp?: Prisma.SortOrder
  pdop?: Prisma.SortOrder
  hdop?: Prisma.SortOrder
  vdop?: Prisma.SortOrder
  sat1?: Prisma.SortOrder
  sat2?: Prisma.SortOrder
  sat3?: Prisma.SortOrder
  sat4?: Prisma.SortOrder
  sat5?: Prisma.SortOrder
  sat6?: Prisma.SortOrder
  sat7?: Prisma.SortOrder
  sat8?: Prisma.SortOrder
  sat9?: Prisma.SortOrder
  sat10?: Prisma.SortOrder
  sat11?: Prisma.SortOrder
  sat12?: Prisma.SortOrder
}

export type gpstrackAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  utc?: Prisma.SortOrder
  lat?: Prisma.SortOrder
  lon?: Prisma.SortOrder
  altitude?: Prisma.SortOrder
}

export type gpstrackMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  utc?: Prisma.SortOrder
  lat?: Prisma.SortOrder
  ns?: Prisma.SortOrder
  lon?: Prisma.SortOrder
  ew?: Prisma.SortOrder
  altitude?: Prisma.SortOrder
  countrycode?: Prisma.SortOrder
  geoidal?: Prisma.SortOrder
  spd_over_grnd?: Prisma.SortOrder
  spdkmph?: Prisma.SortOrder
  spdknts?: Prisma.SortOrder
  deg_compass?: Prisma.SortOrder
  magnetic_var?: Prisma.SortOrder
  gps_quality?: Prisma.SortOrder
  dgps?: Prisma.SortOrder
  dgps_stat?: Prisma.SortOrder
  hdp?: Prisma.SortOrder
  pdop?: Prisma.SortOrder
  hdop?: Prisma.SortOrder
  vdop?: Prisma.SortOrder
  sat1?: Prisma.SortOrder
  sat2?: Prisma.SortOrder
  sat3?: Prisma.SortOrder
  sat4?: Prisma.SortOrder
  sat5?: Prisma.SortOrder
  sat6?: Prisma.SortOrder
  sat7?: Prisma.SortOrder
  sat8?: Prisma.SortOrder
  sat9?: Prisma.SortOrder
  sat10?: Prisma.SortOrder
  sat11?: Prisma.SortOrder
  sat12?: Prisma.SortOrder
}

export type gpstrackMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  utc?: Prisma.SortOrder
  lat?: Prisma.SortOrder
  ns?: Prisma.SortOrder
  lon?: Prisma.SortOrder
  ew?: Prisma.SortOrder
  altitude?: Prisma.SortOrder
  countrycode?: Prisma.SortOrder
  geoidal?: Prisma.SortOrder
  spd_over_grnd?: Prisma.SortOrder
  spdkmph?: Prisma.SortOrder
  spdknts?: Prisma.SortOrder
  deg_compass?: Prisma.SortOrder
  magnetic_var?: Prisma.SortOrder
  gps_quality?: Prisma.SortOrder
  dgps?: Prisma.SortOrder
  dgps_stat?: Prisma.SortOrder
  hdp?: Prisma.SortOrder
  pdop?: Prisma.SortOrder
  hdop?: Prisma.SortOrder
  vdop?: Prisma.SortOrder
  sat1?: Prisma.SortOrder
  sat2?: Prisma.SortOrder
  sat3?: Prisma.SortOrder
  sat4?: Prisma.SortOrder
  sat5?: Prisma.SortOrder
  sat6?: Prisma.SortOrder
  sat7?: Prisma.SortOrder
  sat8?: Prisma.SortOrder
  sat9?: Prisma.SortOrder
  sat10?: Prisma.SortOrder
  sat11?: Prisma.SortOrder
  sat12?: Prisma.SortOrder
}

export type gpstrackSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  utc?: Prisma.SortOrder
  lat?: Prisma.SortOrder
  lon?: Prisma.SortOrder
  altitude?: Prisma.SortOrder
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type gpstrackSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  data?: boolean
  utc?: boolean
  lat?: boolean
  ns?: boolean
  lon?: boolean
  ew?: boolean
  altitude?: boolean
  countrycode?: boolean
  geoidal?: boolean
  spd_over_grnd?: boolean
  spdkmph?: boolean
  spdknts?: boolean
  deg_compass?: boolean
  magnetic_var?: boolean
  gps_quality?: boolean
  dgps?: boolean
  dgps_stat?: boolean
  hdp?: boolean
  pdop?: boolean
  hdop?: boolean
  vdop?: boolean
  sat1?: boolean
  sat2?: boolean
  sat3?: boolean
  sat4?: boolean
  sat5?: boolean
  sat6?: boolean
  sat7?: boolean
  sat8?: boolean
  sat9?: boolean
  sat10?: boolean
  sat11?: boolean
  sat12?: boolean
}, ExtArgs["result"]["gpstrack"]>

export type gpstrackSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  data?: boolean
  utc?: boolean
  lat?: boolean
  ns?: boolean
  lon?: boolean
  ew?: boolean
  altitude?: boolean
  countrycode?: boolean
  geoidal?: boolean
  spd_over_grnd?: boolean
  spdkmph?: boolean
  spdknts?: boolean
  deg_compass?: boolean
  magnetic_var?: boolean
  gps_quality?: boolean
  dgps?: boolean
  dgps_stat?: boolean
  hdp?: boolean
  pdop?: boolean
  hdop?: boolean
  vdop?: boolean
  sat1?: boolean
  sat2?: boolean
  sat3?: boolean
  sat4?: boolean
  sat5?: boolean
  sat6?: boolean
  sat7?: boolean
  sat8?: boolean
  sat9?: boolean
  sat10?: boolean
  sat11?: boolean
  sat12?: boolean
}, ExtArgs["result"]["gpstrack"]>

export type gpstrackSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  data?: boolean
  utc?: boolean
  lat?: boolean
  ns?: boolean
  lon?: boolean
  ew?: boolean
  altitude?: boolean
  countrycode?: boolean
  geoidal?: boolean
  spd_over_grnd?: boolean
  spdkmph?: boolean
  spdknts?: boolean
  deg_compass?: boolean
  magnetic_var?: boolean
  gps_quality?: boolean
  dgps?: boolean
  dgps_stat?: boolean
  hdp?: boolean
  pdop?: boolean
  hdop?: boolean
  vdop?: boolean
  sat1?: boolean
  sat2?: boolean
  sat3?: boolean
  sat4?: boolean
  sat5?: boolean
  sat6?: boolean
  sat7?: boolean
  sat8?: boolean
  sat9?: boolean
  sat10?: boolean
  sat11?: boolean
  sat12?: boolean
}, ExtArgs["result"]["gpstrack"]>

export type gpstrackSelectScalar = {
  id?: boolean
  data?: boolean
  utc?: boolean
  lat?: boolean
  ns?: boolean
  lon?: boolean
  ew?: boolean
  altitude?: boolean
  countrycode?: boolean
  geoidal?: boolean
  spd_over_grnd?: boolean
  spdkmph?: boolean
  spdknts?: boolean
  deg_compass?: boolean
  magnetic_var?: boolean
  gps_quality?: boolean
  dgps?: boolean
  dgps_stat?: boolean
  hdp?: boolean
  pdop?: boolean
  hdop?: boolean
  vdop?: boolean
  sat1?: boolean
  sat2?: boolean
  sat3?: boolean
  sat4?: boolean
  sat5?: boolean
  sat6?: boolean
  sat7?: boolean
  sat8?: boolean
  sat9?: boolean
  sat10?: boolean
  sat11?: boolean
  sat12?: boolean
}

export type gpstrackOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "data" | "utc" | "lat" | "ns" | "lon" | "ew" | "altitude" | "countrycode" | "geoidal" | "spd_over_grnd" | "spdkmph" | "spdknts" | "deg_compass" | "magnetic_var" | "gps_quality" | "dgps" | "dgps_stat" | "hdp" | "pdop" | "hdop" | "vdop" | "sat1" | "sat2" | "sat3" | "sat4" | "sat5" | "sat6" | "sat7" | "sat8" | "sat9" | "sat10" | "sat11" | "sat12", ExtArgs["result"]["gpstrack"]>

export type $gpstrackPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "gpstrack"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    data: string
    utc: number
    lat: number
    ns: string
    lon: number
    ew: string
    altitude: number
    countrycode: string
    geoidal: string
    spd_over_grnd: string
    spdkmph: string
    spdknts: string
    deg_compass: string
    magnetic_var: string
    gps_quality: string
    dgps: string
    dgps_stat: string
    hdp: string
    pdop: string
    hdop: string
    vdop: string
    sat1: string
    sat2: string
    sat3: string
    sat4: string
    sat5: string
    sat6: string
    sat7: string
    sat8: string
    sat9: string
    sat10: string
    sat11: string
    sat12: string
  }, ExtArgs["result"]["gpstrack"]>
  composites: {}
}

export type gpstrackGetPayload<S extends boolean | null | undefined | gpstrackDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$gpstrackPayload, S>

export type gpstrackCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<gpstrackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GpstrackCountAggregateInputType | true
  }

export interface gpstrackDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['gpstrack'], meta: { name: 'gpstrack' } }
  /**
   * Find zero or one Gpstrack that matches the filter.
   * @param {gpstrackFindUniqueArgs} args - Arguments to find a Gpstrack
   * @example
   * // Get one Gpstrack
   * const gpstrack = await prisma.gpstrack.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends gpstrackFindUniqueArgs>(args: Prisma.SelectSubset<T, gpstrackFindUniqueArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Gpstrack that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {gpstrackFindUniqueOrThrowArgs} args - Arguments to find a Gpstrack
   * @example
   * // Get one Gpstrack
   * const gpstrack = await prisma.gpstrack.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends gpstrackFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, gpstrackFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Gpstrack that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gpstrackFindFirstArgs} args - Arguments to find a Gpstrack
   * @example
   * // Get one Gpstrack
   * const gpstrack = await prisma.gpstrack.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends gpstrackFindFirstArgs>(args?: Prisma.SelectSubset<T, gpstrackFindFirstArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Gpstrack that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gpstrackFindFirstOrThrowArgs} args - Arguments to find a Gpstrack
   * @example
   * // Get one Gpstrack
   * const gpstrack = await prisma.gpstrack.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends gpstrackFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, gpstrackFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Gpstracks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gpstrackFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Gpstracks
   * const gpstracks = await prisma.gpstrack.findMany()
   * 
   * // Get first 10 Gpstracks
   * const gpstracks = await prisma.gpstrack.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gpstrackWithIdOnly = await prisma.gpstrack.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends gpstrackFindManyArgs>(args?: Prisma.SelectSubset<T, gpstrackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Gpstrack.
   * @param {gpstrackCreateArgs} args - Arguments to create a Gpstrack.
   * @example
   * // Create one Gpstrack
   * const Gpstrack = await prisma.gpstrack.create({
   *   data: {
   *     // ... data to create a Gpstrack
   *   }
   * })
   * 
   */
  create<T extends gpstrackCreateArgs>(args: Prisma.SelectSubset<T, gpstrackCreateArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Gpstracks.
   * @param {gpstrackCreateManyArgs} args - Arguments to create many Gpstracks.
   * @example
   * // Create many Gpstracks
   * const gpstrack = await prisma.gpstrack.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends gpstrackCreateManyArgs>(args?: Prisma.SelectSubset<T, gpstrackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Gpstracks and returns the data saved in the database.
   * @param {gpstrackCreateManyAndReturnArgs} args - Arguments to create many Gpstracks.
   * @example
   * // Create many Gpstracks
   * const gpstrack = await prisma.gpstrack.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Gpstracks and only return the `id`
   * const gpstrackWithIdOnly = await prisma.gpstrack.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends gpstrackCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, gpstrackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Gpstrack.
   * @param {gpstrackDeleteArgs} args - Arguments to delete one Gpstrack.
   * @example
   * // Delete one Gpstrack
   * const Gpstrack = await prisma.gpstrack.delete({
   *   where: {
   *     // ... filter to delete one Gpstrack
   *   }
   * })
   * 
   */
  delete<T extends gpstrackDeleteArgs>(args: Prisma.SelectSubset<T, gpstrackDeleteArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Gpstrack.
   * @param {gpstrackUpdateArgs} args - Arguments to update one Gpstrack.
   * @example
   * // Update one Gpstrack
   * const gpstrack = await prisma.gpstrack.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends gpstrackUpdateArgs>(args: Prisma.SelectSubset<T, gpstrackUpdateArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Gpstracks.
   * @param {gpstrackDeleteManyArgs} args - Arguments to filter Gpstracks to delete.
   * @example
   * // Delete a few Gpstracks
   * const { count } = await prisma.gpstrack.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends gpstrackDeleteManyArgs>(args?: Prisma.SelectSubset<T, gpstrackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Gpstracks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gpstrackUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Gpstracks
   * const gpstrack = await prisma.gpstrack.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends gpstrackUpdateManyArgs>(args: Prisma.SelectSubset<T, gpstrackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Gpstracks and returns the data updated in the database.
   * @param {gpstrackUpdateManyAndReturnArgs} args - Arguments to update many Gpstracks.
   * @example
   * // Update many Gpstracks
   * const gpstrack = await prisma.gpstrack.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Gpstracks and only return the `id`
   * const gpstrackWithIdOnly = await prisma.gpstrack.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends gpstrackUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, gpstrackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Gpstrack.
   * @param {gpstrackUpsertArgs} args - Arguments to update or create a Gpstrack.
   * @example
   * // Update or create a Gpstrack
   * const gpstrack = await prisma.gpstrack.upsert({
   *   create: {
   *     // ... data to create a Gpstrack
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Gpstrack we want to update
   *   }
   * })
   */
  upsert<T extends gpstrackUpsertArgs>(args: Prisma.SelectSubset<T, gpstrackUpsertArgs<ExtArgs>>): Prisma.Prisma__gpstrackClient<runtime.Types.Result.GetResult<Prisma.$gpstrackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Gpstracks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gpstrackCountArgs} args - Arguments to filter Gpstracks to count.
   * @example
   * // Count the number of Gpstracks
   * const count = await prisma.gpstrack.count({
   *   where: {
   *     // ... the filter for the Gpstracks we want to count
   *   }
   * })
  **/
  count<T extends gpstrackCountArgs>(
    args?: Prisma.Subset<T, gpstrackCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GpstrackCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Gpstrack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GpstrackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GpstrackAggregateArgs>(args: Prisma.Subset<T, GpstrackAggregateArgs>): Prisma.PrismaPromise<GetGpstrackAggregateType<T>>

  /**
   * Group by Gpstrack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gpstrackGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends gpstrackGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: gpstrackGroupByArgs['orderBy'] }
      : { orderBy?: gpstrackGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, gpstrackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGpstrackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the gpstrack model
 */
readonly fields: gpstrackFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for gpstrack.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__gpstrackClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the gpstrack model
 */
export interface gpstrackFieldRefs {
  readonly id: Prisma.FieldRef<"gpstrack", 'BigInt'>
  readonly data: Prisma.FieldRef<"gpstrack", 'String'>
  readonly utc: Prisma.FieldRef<"gpstrack", 'Int'>
  readonly lat: Prisma.FieldRef<"gpstrack", 'Float'>
  readonly ns: Prisma.FieldRef<"gpstrack", 'String'>
  readonly lon: Prisma.FieldRef<"gpstrack", 'Float'>
  readonly ew: Prisma.FieldRef<"gpstrack", 'String'>
  readonly altitude: Prisma.FieldRef<"gpstrack", 'Float'>
  readonly countrycode: Prisma.FieldRef<"gpstrack", 'String'>
  readonly geoidal: Prisma.FieldRef<"gpstrack", 'String'>
  readonly spd_over_grnd: Prisma.FieldRef<"gpstrack", 'String'>
  readonly spdkmph: Prisma.FieldRef<"gpstrack", 'String'>
  readonly spdknts: Prisma.FieldRef<"gpstrack", 'String'>
  readonly deg_compass: Prisma.FieldRef<"gpstrack", 'String'>
  readonly magnetic_var: Prisma.FieldRef<"gpstrack", 'String'>
  readonly gps_quality: Prisma.FieldRef<"gpstrack", 'String'>
  readonly dgps: Prisma.FieldRef<"gpstrack", 'String'>
  readonly dgps_stat: Prisma.FieldRef<"gpstrack", 'String'>
  readonly hdp: Prisma.FieldRef<"gpstrack", 'String'>
  readonly pdop: Prisma.FieldRef<"gpstrack", 'String'>
  readonly hdop: Prisma.FieldRef<"gpstrack", 'String'>
  readonly vdop: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat1: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat2: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat3: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat4: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat5: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat6: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat7: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat8: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat9: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat10: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat11: Prisma.FieldRef<"gpstrack", 'String'>
  readonly sat12: Prisma.FieldRef<"gpstrack", 'String'>
}
    

// Custom InputTypes
/**
 * gpstrack findUnique
 */
export type gpstrackFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * Filter, which gpstrack to fetch.
   */
  where: Prisma.gpstrackWhereUniqueInput
}

/**
 * gpstrack findUniqueOrThrow
 */
export type gpstrackFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * Filter, which gpstrack to fetch.
   */
  where: Prisma.gpstrackWhereUniqueInput
}

/**
 * gpstrack findFirst
 */
export type gpstrackFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * Filter, which gpstrack to fetch.
   */
  where?: Prisma.gpstrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of gpstracks to fetch.
   */
  orderBy?: Prisma.gpstrackOrderByWithRelationInput | Prisma.gpstrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for gpstracks.
   */
  cursor?: Prisma.gpstrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` gpstracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` gpstracks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of gpstracks.
   */
  distinct?: Prisma.GpstrackScalarFieldEnum | Prisma.GpstrackScalarFieldEnum[]
}

/**
 * gpstrack findFirstOrThrow
 */
export type gpstrackFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * Filter, which gpstrack to fetch.
   */
  where?: Prisma.gpstrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of gpstracks to fetch.
   */
  orderBy?: Prisma.gpstrackOrderByWithRelationInput | Prisma.gpstrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for gpstracks.
   */
  cursor?: Prisma.gpstrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` gpstracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` gpstracks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of gpstracks.
   */
  distinct?: Prisma.GpstrackScalarFieldEnum | Prisma.GpstrackScalarFieldEnum[]
}

/**
 * gpstrack findMany
 */
export type gpstrackFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * Filter, which gpstracks to fetch.
   */
  where?: Prisma.gpstrackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of gpstracks to fetch.
   */
  orderBy?: Prisma.gpstrackOrderByWithRelationInput | Prisma.gpstrackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing gpstracks.
   */
  cursor?: Prisma.gpstrackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` gpstracks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` gpstracks.
   */
  skip?: number
  distinct?: Prisma.GpstrackScalarFieldEnum | Prisma.GpstrackScalarFieldEnum[]
}

/**
 * gpstrack create
 */
export type gpstrackCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * The data needed to create a gpstrack.
   */
  data?: Prisma.XOR<Prisma.gpstrackCreateInput, Prisma.gpstrackUncheckedCreateInput>
}

/**
 * gpstrack createMany
 */
export type gpstrackCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many gpstracks.
   */
  data: Prisma.gpstrackCreateManyInput | Prisma.gpstrackCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * gpstrack createManyAndReturn
 */
export type gpstrackCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * The data used to create many gpstracks.
   */
  data: Prisma.gpstrackCreateManyInput | Prisma.gpstrackCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * gpstrack update
 */
export type gpstrackUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * The data needed to update a gpstrack.
   */
  data: Prisma.XOR<Prisma.gpstrackUpdateInput, Prisma.gpstrackUncheckedUpdateInput>
  /**
   * Choose, which gpstrack to update.
   */
  where: Prisma.gpstrackWhereUniqueInput
}

/**
 * gpstrack updateMany
 */
export type gpstrackUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update gpstracks.
   */
  data: Prisma.XOR<Prisma.gpstrackUpdateManyMutationInput, Prisma.gpstrackUncheckedUpdateManyInput>
  /**
   * Filter which gpstracks to update
   */
  where?: Prisma.gpstrackWhereInput
  /**
   * Limit how many gpstracks to update.
   */
  limit?: number
}

/**
 * gpstrack updateManyAndReturn
 */
export type gpstrackUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * The data used to update gpstracks.
   */
  data: Prisma.XOR<Prisma.gpstrackUpdateManyMutationInput, Prisma.gpstrackUncheckedUpdateManyInput>
  /**
   * Filter which gpstracks to update
   */
  where?: Prisma.gpstrackWhereInput
  /**
   * Limit how many gpstracks to update.
   */
  limit?: number
}

/**
 * gpstrack upsert
 */
export type gpstrackUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * The filter to search for the gpstrack to update in case it exists.
   */
  where: Prisma.gpstrackWhereUniqueInput
  /**
   * In case the gpstrack found by the `where` argument doesn't exist, create a new gpstrack with this data.
   */
  create: Prisma.XOR<Prisma.gpstrackCreateInput, Prisma.gpstrackUncheckedCreateInput>
  /**
   * In case the gpstrack was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.gpstrackUpdateInput, Prisma.gpstrackUncheckedUpdateInput>
}

/**
 * gpstrack delete
 */
export type gpstrackDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
  /**
   * Filter which gpstrack to delete.
   */
  where: Prisma.gpstrackWhereUniqueInput
}

/**
 * gpstrack deleteMany
 */
export type gpstrackDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which gpstracks to delete
   */
  where?: Prisma.gpstrackWhereInput
  /**
   * Limit how many gpstracks to delete.
   */
  limit?: number
}

/**
 * gpstrack without action
 */
export type gpstrackDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the gpstrack
   */
  select?: Prisma.gpstrackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the gpstrack
   */
  omit?: Prisma.gpstrackOmit<ExtArgs> | null
}
