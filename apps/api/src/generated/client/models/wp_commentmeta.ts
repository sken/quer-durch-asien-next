
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `wp_commentmeta` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model wp_commentmeta
 * This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
 */
export type wp_commentmetaModel = runtime.Types.Result.DefaultSelection<Prisma.$wp_commentmetaPayload>

export type AggregateWp_commentmeta = {
  _count: Wp_commentmetaCountAggregateOutputType | null
  _avg: Wp_commentmetaAvgAggregateOutputType | null
  _sum: Wp_commentmetaSumAggregateOutputType | null
  _min: Wp_commentmetaMinAggregateOutputType | null
  _max: Wp_commentmetaMaxAggregateOutputType | null
}

export type Wp_commentmetaAvgAggregateOutputType = {
  meta_id: number | null
  comment_id: runtime.Decimal | null
}

export type Wp_commentmetaSumAggregateOutputType = {
  meta_id: bigint | null
  comment_id: runtime.Decimal | null
}

export type Wp_commentmetaMinAggregateOutputType = {
  meta_id: bigint | null
  comment_id: runtime.Decimal | null
  meta_key: string | null
  meta_value: string | null
}

export type Wp_commentmetaMaxAggregateOutputType = {
  meta_id: bigint | null
  comment_id: runtime.Decimal | null
  meta_key: string | null
  meta_value: string | null
}

export type Wp_commentmetaCountAggregateOutputType = {
  meta_id: number
  comment_id: number
  meta_key: number
  meta_value: number
  _all: number
}


export type Wp_commentmetaAvgAggregateInputType = {
  meta_id?: true
  comment_id?: true
}

export type Wp_commentmetaSumAggregateInputType = {
  meta_id?: true
  comment_id?: true
}

export type Wp_commentmetaMinAggregateInputType = {
  meta_id?: true
  comment_id?: true
  meta_key?: true
  meta_value?: true
}

export type Wp_commentmetaMaxAggregateInputType = {
  meta_id?: true
  comment_id?: true
  meta_key?: true
  meta_value?: true
}

export type Wp_commentmetaCountAggregateInputType = {
  meta_id?: true
  comment_id?: true
  meta_key?: true
  meta_value?: true
  _all?: true
}

export type Wp_commentmetaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_commentmeta to aggregate.
   */
  where?: Prisma.wp_commentmetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_commentmetas to fetch.
   */
  orderBy?: Prisma.wp_commentmetaOrderByWithRelationInput | Prisma.wp_commentmetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.wp_commentmetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_commentmetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_commentmetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned wp_commentmetas
  **/
  _count?: true | Wp_commentmetaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Wp_commentmetaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Wp_commentmetaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Wp_commentmetaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Wp_commentmetaMaxAggregateInputType
}

export type GetWp_commentmetaAggregateType<T extends Wp_commentmetaAggregateArgs> = {
      [P in keyof T & keyof AggregateWp_commentmeta]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWp_commentmeta[P]>
    : Prisma.GetScalarType<T[P], AggregateWp_commentmeta[P]>
}




export type wp_commentmetaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.wp_commentmetaWhereInput
  orderBy?: Prisma.wp_commentmetaOrderByWithAggregationInput | Prisma.wp_commentmetaOrderByWithAggregationInput[]
  by: Prisma.Wp_commentmetaScalarFieldEnum[] | Prisma.Wp_commentmetaScalarFieldEnum
  having?: Prisma.wp_commentmetaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Wp_commentmetaCountAggregateInputType | true
  _avg?: Wp_commentmetaAvgAggregateInputType
  _sum?: Wp_commentmetaSumAggregateInputType
  _min?: Wp_commentmetaMinAggregateInputType
  _max?: Wp_commentmetaMaxAggregateInputType
}

export type Wp_commentmetaGroupByOutputType = {
  meta_id: bigint
  comment_id: runtime.Decimal
  meta_key: string | null
  meta_value: string | null
  _count: Wp_commentmetaCountAggregateOutputType | null
  _avg: Wp_commentmetaAvgAggregateOutputType | null
  _sum: Wp_commentmetaSumAggregateOutputType | null
  _min: Wp_commentmetaMinAggregateOutputType | null
  _max: Wp_commentmetaMaxAggregateOutputType | null
}

type GetWp_commentmetaGroupByPayload<T extends wp_commentmetaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Wp_commentmetaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Wp_commentmetaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Wp_commentmetaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Wp_commentmetaGroupByOutputType[P]>
      }
    >
  >



export type wp_commentmetaWhereInput = {
  AND?: Prisma.wp_commentmetaWhereInput | Prisma.wp_commentmetaWhereInput[]
  OR?: Prisma.wp_commentmetaWhereInput[]
  NOT?: Prisma.wp_commentmetaWhereInput | Prisma.wp_commentmetaWhereInput[]
  meta_id?: Prisma.BigIntFilter<"wp_commentmeta"> | bigint | number
  comment_id?: Prisma.DecimalFilter<"wp_commentmeta"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: Prisma.StringNullableFilter<"wp_commentmeta"> | string | null
  meta_value?: Prisma.StringNullableFilter<"wp_commentmeta"> | string | null
}

export type wp_commentmetaOrderByWithRelationInput = {
  meta_id?: Prisma.SortOrder
  comment_id?: Prisma.SortOrder
  meta_key?: Prisma.SortOrderInput | Prisma.SortOrder
  meta_value?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type wp_commentmetaWhereUniqueInput = Prisma.AtLeast<{
  meta_id?: bigint | number
  AND?: Prisma.wp_commentmetaWhereInput | Prisma.wp_commentmetaWhereInput[]
  OR?: Prisma.wp_commentmetaWhereInput[]
  NOT?: Prisma.wp_commentmetaWhereInput | Prisma.wp_commentmetaWhereInput[]
  comment_id?: Prisma.DecimalFilter<"wp_commentmeta"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: Prisma.StringNullableFilter<"wp_commentmeta"> | string | null
  meta_value?: Prisma.StringNullableFilter<"wp_commentmeta"> | string | null
}, "meta_id">

export type wp_commentmetaOrderByWithAggregationInput = {
  meta_id?: Prisma.SortOrder
  comment_id?: Prisma.SortOrder
  meta_key?: Prisma.SortOrderInput | Prisma.SortOrder
  meta_value?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.wp_commentmetaCountOrderByAggregateInput
  _avg?: Prisma.wp_commentmetaAvgOrderByAggregateInput
  _max?: Prisma.wp_commentmetaMaxOrderByAggregateInput
  _min?: Prisma.wp_commentmetaMinOrderByAggregateInput
  _sum?: Prisma.wp_commentmetaSumOrderByAggregateInput
}

export type wp_commentmetaScalarWhereWithAggregatesInput = {
  AND?: Prisma.wp_commentmetaScalarWhereWithAggregatesInput | Prisma.wp_commentmetaScalarWhereWithAggregatesInput[]
  OR?: Prisma.wp_commentmetaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.wp_commentmetaScalarWhereWithAggregatesInput | Prisma.wp_commentmetaScalarWhereWithAggregatesInput[]
  meta_id?: Prisma.BigIntWithAggregatesFilter<"wp_commentmeta"> | bigint | number
  comment_id?: Prisma.DecimalWithAggregatesFilter<"wp_commentmeta"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: Prisma.StringNullableWithAggregatesFilter<"wp_commentmeta"> | string | null
  meta_value?: Prisma.StringNullableWithAggregatesFilter<"wp_commentmeta"> | string | null
}

export type wp_commentmetaCreateInput = {
  meta_id?: bigint | number
  comment_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: string | null
  meta_value?: string | null
}

export type wp_commentmetaUncheckedCreateInput = {
  meta_id?: bigint | number
  comment_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: string | null
  meta_value?: string | null
}

export type wp_commentmetaUpdateInput = {
  meta_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta_value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type wp_commentmetaUncheckedUpdateInput = {
  meta_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta_value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type wp_commentmetaCreateManyInput = {
  meta_id?: bigint | number
  comment_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: string | null
  meta_value?: string | null
}

export type wp_commentmetaUpdateManyMutationInput = {
  meta_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta_value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type wp_commentmetaUncheckedUpdateManyInput = {
  meta_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  comment_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  meta_key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta_value?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type wp_commentmetaCountOrderByAggregateInput = {
  meta_id?: Prisma.SortOrder
  comment_id?: Prisma.SortOrder
  meta_key?: Prisma.SortOrder
  meta_value?: Prisma.SortOrder
}

export type wp_commentmetaAvgOrderByAggregateInput = {
  meta_id?: Prisma.SortOrder
  comment_id?: Prisma.SortOrder
}

export type wp_commentmetaMaxOrderByAggregateInput = {
  meta_id?: Prisma.SortOrder
  comment_id?: Prisma.SortOrder
  meta_key?: Prisma.SortOrder
  meta_value?: Prisma.SortOrder
}

export type wp_commentmetaMinOrderByAggregateInput = {
  meta_id?: Prisma.SortOrder
  comment_id?: Prisma.SortOrder
  meta_key?: Prisma.SortOrder
  meta_value?: Prisma.SortOrder
}

export type wp_commentmetaSumOrderByAggregateInput = {
  meta_id?: Prisma.SortOrder
  comment_id?: Prisma.SortOrder
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}



export type wp_commentmetaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  meta_id?: boolean
  comment_id?: boolean
  meta_key?: boolean
  meta_value?: boolean
}, ExtArgs["result"]["wp_commentmeta"]>

export type wp_commentmetaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  meta_id?: boolean
  comment_id?: boolean
  meta_key?: boolean
  meta_value?: boolean
}, ExtArgs["result"]["wp_commentmeta"]>

export type wp_commentmetaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  meta_id?: boolean
  comment_id?: boolean
  meta_key?: boolean
  meta_value?: boolean
}, ExtArgs["result"]["wp_commentmeta"]>

export type wp_commentmetaSelectScalar = {
  meta_id?: boolean
  comment_id?: boolean
  meta_key?: boolean
  meta_value?: boolean
}

export type wp_commentmetaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"meta_id" | "comment_id" | "meta_key" | "meta_value", ExtArgs["result"]["wp_commentmeta"]>

export type $wp_commentmetaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "wp_commentmeta"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    meta_id: bigint
    comment_id: runtime.Decimal
    meta_key: string | null
    meta_value: string | null
  }, ExtArgs["result"]["wp_commentmeta"]>
  composites: {}
}

export type wp_commentmetaGetPayload<S extends boolean | null | undefined | wp_commentmetaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload, S>

export type wp_commentmetaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<wp_commentmetaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Wp_commentmetaCountAggregateInputType | true
  }

export interface wp_commentmetaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wp_commentmeta'], meta: { name: 'wp_commentmeta' } }
  /**
   * Find zero or one Wp_commentmeta that matches the filter.
   * @param {wp_commentmetaFindUniqueArgs} args - Arguments to find a Wp_commentmeta
   * @example
   * // Get one Wp_commentmeta
   * const wp_commentmeta = await prisma.wp_commentmeta.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends wp_commentmetaFindUniqueArgs>(args: Prisma.SelectSubset<T, wp_commentmetaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Wp_commentmeta that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {wp_commentmetaFindUniqueOrThrowArgs} args - Arguments to find a Wp_commentmeta
   * @example
   * // Get one Wp_commentmeta
   * const wp_commentmeta = await prisma.wp_commentmeta.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends wp_commentmetaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, wp_commentmetaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_commentmeta that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentmetaFindFirstArgs} args - Arguments to find a Wp_commentmeta
   * @example
   * // Get one Wp_commentmeta
   * const wp_commentmeta = await prisma.wp_commentmeta.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends wp_commentmetaFindFirstArgs>(args?: Prisma.SelectSubset<T, wp_commentmetaFindFirstArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_commentmeta that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentmetaFindFirstOrThrowArgs} args - Arguments to find a Wp_commentmeta
   * @example
   * // Get one Wp_commentmeta
   * const wp_commentmeta = await prisma.wp_commentmeta.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends wp_commentmetaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, wp_commentmetaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Wp_commentmetas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentmetaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Wp_commentmetas
   * const wp_commentmetas = await prisma.wp_commentmeta.findMany()
   * 
   * // Get first 10 Wp_commentmetas
   * const wp_commentmetas = await prisma.wp_commentmeta.findMany({ take: 10 })
   * 
   * // Only select the `meta_id`
   * const wp_commentmetaWithMeta_idOnly = await prisma.wp_commentmeta.findMany({ select: { meta_id: true } })
   * 
   */
  findMany<T extends wp_commentmetaFindManyArgs>(args?: Prisma.SelectSubset<T, wp_commentmetaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Wp_commentmeta.
   * @param {wp_commentmetaCreateArgs} args - Arguments to create a Wp_commentmeta.
   * @example
   * // Create one Wp_commentmeta
   * const Wp_commentmeta = await prisma.wp_commentmeta.create({
   *   data: {
   *     // ... data to create a Wp_commentmeta
   *   }
   * })
   * 
   */
  create<T extends wp_commentmetaCreateArgs>(args: Prisma.SelectSubset<T, wp_commentmetaCreateArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Wp_commentmetas.
   * @param {wp_commentmetaCreateManyArgs} args - Arguments to create many Wp_commentmetas.
   * @example
   * // Create many Wp_commentmetas
   * const wp_commentmeta = await prisma.wp_commentmeta.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends wp_commentmetaCreateManyArgs>(args?: Prisma.SelectSubset<T, wp_commentmetaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Wp_commentmetas and returns the data saved in the database.
   * @param {wp_commentmetaCreateManyAndReturnArgs} args - Arguments to create many Wp_commentmetas.
   * @example
   * // Create many Wp_commentmetas
   * const wp_commentmeta = await prisma.wp_commentmeta.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Wp_commentmetas and only return the `meta_id`
   * const wp_commentmetaWithMeta_idOnly = await prisma.wp_commentmeta.createManyAndReturn({
   *   select: { meta_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends wp_commentmetaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, wp_commentmetaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Wp_commentmeta.
   * @param {wp_commentmetaDeleteArgs} args - Arguments to delete one Wp_commentmeta.
   * @example
   * // Delete one Wp_commentmeta
   * const Wp_commentmeta = await prisma.wp_commentmeta.delete({
   *   where: {
   *     // ... filter to delete one Wp_commentmeta
   *   }
   * })
   * 
   */
  delete<T extends wp_commentmetaDeleteArgs>(args: Prisma.SelectSubset<T, wp_commentmetaDeleteArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Wp_commentmeta.
   * @param {wp_commentmetaUpdateArgs} args - Arguments to update one Wp_commentmeta.
   * @example
   * // Update one Wp_commentmeta
   * const wp_commentmeta = await prisma.wp_commentmeta.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends wp_commentmetaUpdateArgs>(args: Prisma.SelectSubset<T, wp_commentmetaUpdateArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Wp_commentmetas.
   * @param {wp_commentmetaDeleteManyArgs} args - Arguments to filter Wp_commentmetas to delete.
   * @example
   * // Delete a few Wp_commentmetas
   * const { count } = await prisma.wp_commentmeta.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends wp_commentmetaDeleteManyArgs>(args?: Prisma.SelectSubset<T, wp_commentmetaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_commentmetas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentmetaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Wp_commentmetas
   * const wp_commentmeta = await prisma.wp_commentmeta.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends wp_commentmetaUpdateManyArgs>(args: Prisma.SelectSubset<T, wp_commentmetaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_commentmetas and returns the data updated in the database.
   * @param {wp_commentmetaUpdateManyAndReturnArgs} args - Arguments to update many Wp_commentmetas.
   * @example
   * // Update many Wp_commentmetas
   * const wp_commentmeta = await prisma.wp_commentmeta.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Wp_commentmetas and only return the `meta_id`
   * const wp_commentmetaWithMeta_idOnly = await prisma.wp_commentmeta.updateManyAndReturn({
   *   select: { meta_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends wp_commentmetaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, wp_commentmetaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Wp_commentmeta.
   * @param {wp_commentmetaUpsertArgs} args - Arguments to update or create a Wp_commentmeta.
   * @example
   * // Update or create a Wp_commentmeta
   * const wp_commentmeta = await prisma.wp_commentmeta.upsert({
   *   create: {
   *     // ... data to create a Wp_commentmeta
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Wp_commentmeta we want to update
   *   }
   * })
   */
  upsert<T extends wp_commentmetaUpsertArgs>(args: Prisma.SelectSubset<T, wp_commentmetaUpsertArgs<ExtArgs>>): Prisma.Prisma__wp_commentmetaClient<runtime.Types.Result.GetResult<Prisma.$wp_commentmetaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Wp_commentmetas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentmetaCountArgs} args - Arguments to filter Wp_commentmetas to count.
   * @example
   * // Count the number of Wp_commentmetas
   * const count = await prisma.wp_commentmeta.count({
   *   where: {
   *     // ... the filter for the Wp_commentmetas we want to count
   *   }
   * })
  **/
  count<T extends wp_commentmetaCountArgs>(
    args?: Prisma.Subset<T, wp_commentmetaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Wp_commentmetaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Wp_commentmeta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Wp_commentmetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Wp_commentmetaAggregateArgs>(args: Prisma.Subset<T, Wp_commentmetaAggregateArgs>): Prisma.PrismaPromise<GetWp_commentmetaAggregateType<T>>

  /**
   * Group by Wp_commentmeta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_commentmetaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends wp_commentmetaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: wp_commentmetaGroupByArgs['orderBy'] }
      : { orderBy?: wp_commentmetaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, wp_commentmetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWp_commentmetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the wp_commentmeta model
 */
readonly fields: wp_commentmetaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for wp_commentmeta.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__wp_commentmetaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the wp_commentmeta model
 */
export interface wp_commentmetaFieldRefs {
  readonly meta_id: Prisma.FieldRef<"wp_commentmeta", 'BigInt'>
  readonly comment_id: Prisma.FieldRef<"wp_commentmeta", 'Decimal'>
  readonly meta_key: Prisma.FieldRef<"wp_commentmeta", 'String'>
  readonly meta_value: Prisma.FieldRef<"wp_commentmeta", 'String'>
}
    

// Custom InputTypes
/**
 * wp_commentmeta findUnique
 */
export type wp_commentmetaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * Filter, which wp_commentmeta to fetch.
   */
  where: Prisma.wp_commentmetaWhereUniqueInput
}

/**
 * wp_commentmeta findUniqueOrThrow
 */
export type wp_commentmetaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * Filter, which wp_commentmeta to fetch.
   */
  where: Prisma.wp_commentmetaWhereUniqueInput
}

/**
 * wp_commentmeta findFirst
 */
export type wp_commentmetaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * Filter, which wp_commentmeta to fetch.
   */
  where?: Prisma.wp_commentmetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_commentmetas to fetch.
   */
  orderBy?: Prisma.wp_commentmetaOrderByWithRelationInput | Prisma.wp_commentmetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_commentmetas.
   */
  cursor?: Prisma.wp_commentmetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_commentmetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_commentmetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_commentmetas.
   */
  distinct?: Prisma.Wp_commentmetaScalarFieldEnum | Prisma.Wp_commentmetaScalarFieldEnum[]
}

/**
 * wp_commentmeta findFirstOrThrow
 */
export type wp_commentmetaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * Filter, which wp_commentmeta to fetch.
   */
  where?: Prisma.wp_commentmetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_commentmetas to fetch.
   */
  orderBy?: Prisma.wp_commentmetaOrderByWithRelationInput | Prisma.wp_commentmetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_commentmetas.
   */
  cursor?: Prisma.wp_commentmetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_commentmetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_commentmetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_commentmetas.
   */
  distinct?: Prisma.Wp_commentmetaScalarFieldEnum | Prisma.Wp_commentmetaScalarFieldEnum[]
}

/**
 * wp_commentmeta findMany
 */
export type wp_commentmetaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * Filter, which wp_commentmetas to fetch.
   */
  where?: Prisma.wp_commentmetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_commentmetas to fetch.
   */
  orderBy?: Prisma.wp_commentmetaOrderByWithRelationInput | Prisma.wp_commentmetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing wp_commentmetas.
   */
  cursor?: Prisma.wp_commentmetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_commentmetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_commentmetas.
   */
  skip?: number
  distinct?: Prisma.Wp_commentmetaScalarFieldEnum | Prisma.Wp_commentmetaScalarFieldEnum[]
}

/**
 * wp_commentmeta create
 */
export type wp_commentmetaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * The data needed to create a wp_commentmeta.
   */
  data?: Prisma.XOR<Prisma.wp_commentmetaCreateInput, Prisma.wp_commentmetaUncheckedCreateInput>
}

/**
 * wp_commentmeta createMany
 */
export type wp_commentmetaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many wp_commentmetas.
   */
  data: Prisma.wp_commentmetaCreateManyInput | Prisma.wp_commentmetaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_commentmeta createManyAndReturn
 */
export type wp_commentmetaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * The data used to create many wp_commentmetas.
   */
  data: Prisma.wp_commentmetaCreateManyInput | Prisma.wp_commentmetaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_commentmeta update
 */
export type wp_commentmetaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * The data needed to update a wp_commentmeta.
   */
  data: Prisma.XOR<Prisma.wp_commentmetaUpdateInput, Prisma.wp_commentmetaUncheckedUpdateInput>
  /**
   * Choose, which wp_commentmeta to update.
   */
  where: Prisma.wp_commentmetaWhereUniqueInput
}

/**
 * wp_commentmeta updateMany
 */
export type wp_commentmetaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update wp_commentmetas.
   */
  data: Prisma.XOR<Prisma.wp_commentmetaUpdateManyMutationInput, Prisma.wp_commentmetaUncheckedUpdateManyInput>
  /**
   * Filter which wp_commentmetas to update
   */
  where?: Prisma.wp_commentmetaWhereInput
  /**
   * Limit how many wp_commentmetas to update.
   */
  limit?: number
}

/**
 * wp_commentmeta updateManyAndReturn
 */
export type wp_commentmetaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * The data used to update wp_commentmetas.
   */
  data: Prisma.XOR<Prisma.wp_commentmetaUpdateManyMutationInput, Prisma.wp_commentmetaUncheckedUpdateManyInput>
  /**
   * Filter which wp_commentmetas to update
   */
  where?: Prisma.wp_commentmetaWhereInput
  /**
   * Limit how many wp_commentmetas to update.
   */
  limit?: number
}

/**
 * wp_commentmeta upsert
 */
export type wp_commentmetaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * The filter to search for the wp_commentmeta to update in case it exists.
   */
  where: Prisma.wp_commentmetaWhereUniqueInput
  /**
   * In case the wp_commentmeta found by the `where` argument doesn't exist, create a new wp_commentmeta with this data.
   */
  create: Prisma.XOR<Prisma.wp_commentmetaCreateInput, Prisma.wp_commentmetaUncheckedCreateInput>
  /**
   * In case the wp_commentmeta was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.wp_commentmetaUpdateInput, Prisma.wp_commentmetaUncheckedUpdateInput>
}

/**
 * wp_commentmeta delete
 */
export type wp_commentmetaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
  /**
   * Filter which wp_commentmeta to delete.
   */
  where: Prisma.wp_commentmetaWhereUniqueInput
}

/**
 * wp_commentmeta deleteMany
 */
export type wp_commentmetaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_commentmetas to delete
   */
  where?: Prisma.wp_commentmetaWhereInput
  /**
   * Limit how many wp_commentmetas to delete.
   */
  limit?: number
}

/**
 * wp_commentmeta without action
 */
export type wp_commentmetaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_commentmeta
   */
  select?: Prisma.wp_commentmetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_commentmeta
   */
  omit?: Prisma.wp_commentmetaOmit<ExtArgs> | null
}
