
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `keywords` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model keywords
 * 
 */
export type keywordsModel = runtime.Types.Result.DefaultSelection<Prisma.$keywordsPayload>

export type AggregateKeywords = {
  _count: KeywordsCountAggregateOutputType | null
  _avg: KeywordsAvgAggregateOutputType | null
  _sum: KeywordsSumAggregateOutputType | null
  _min: KeywordsMinAggregateOutputType | null
  _max: KeywordsMaxAggregateOutputType | null
}

export type KeywordsAvgAggregateOutputType = {
  id: number | null
}

export type KeywordsSumAggregateOutputType = {
  id: bigint | null
}

export type KeywordsMinAggregateOutputType = {
  id: bigint | null
  name: string | null
  slug: string | null
}

export type KeywordsMaxAggregateOutputType = {
  id: bigint | null
  name: string | null
  slug: string | null
}

export type KeywordsCountAggregateOutputType = {
  id: number
  name: number
  slug: number
  _all: number
}


export type KeywordsAvgAggregateInputType = {
  id?: true
}

export type KeywordsSumAggregateInputType = {
  id?: true
}

export type KeywordsMinAggregateInputType = {
  id?: true
  name?: true
  slug?: true
}

export type KeywordsMaxAggregateInputType = {
  id?: true
  name?: true
  slug?: true
}

export type KeywordsCountAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  _all?: true
}

export type KeywordsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which keywords to aggregate.
   */
  where?: Prisma.keywordsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keywords to fetch.
   */
  orderBy?: Prisma.keywordsOrderByWithRelationInput | Prisma.keywordsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.keywordsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keywords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keywords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned keywords
  **/
  _count?: true | KeywordsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: KeywordsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: KeywordsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: KeywordsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: KeywordsMaxAggregateInputType
}

export type GetKeywordsAggregateType<T extends KeywordsAggregateArgs> = {
      [P in keyof T & keyof AggregateKeywords]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKeywords[P]>
    : Prisma.GetScalarType<T[P], AggregateKeywords[P]>
}




export type keywordsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.keywordsWhereInput
  orderBy?: Prisma.keywordsOrderByWithAggregationInput | Prisma.keywordsOrderByWithAggregationInput[]
  by: Prisma.KeywordsScalarFieldEnum[] | Prisma.KeywordsScalarFieldEnum
  having?: Prisma.keywordsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: KeywordsCountAggregateInputType | true
  _avg?: KeywordsAvgAggregateInputType
  _sum?: KeywordsSumAggregateInputType
  _min?: KeywordsMinAggregateInputType
  _max?: KeywordsMaxAggregateInputType
}

export type KeywordsGroupByOutputType = {
  id: bigint
  name: string
  slug: string
  _count: KeywordsCountAggregateOutputType | null
  _avg: KeywordsAvgAggregateOutputType | null
  _sum: KeywordsSumAggregateOutputType | null
  _min: KeywordsMinAggregateOutputType | null
  _max: KeywordsMaxAggregateOutputType | null
}

type GetKeywordsGroupByPayload<T extends keywordsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<KeywordsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof KeywordsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], KeywordsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], KeywordsGroupByOutputType[P]>
      }
    >
  >



export type keywordsWhereInput = {
  AND?: Prisma.keywordsWhereInput | Prisma.keywordsWhereInput[]
  OR?: Prisma.keywordsWhereInput[]
  NOT?: Prisma.keywordsWhereInput | Prisma.keywordsWhereInput[]
  id?: Prisma.BigIntFilter<"keywords"> | bigint | number
  name?: Prisma.StringFilter<"keywords"> | string
  slug?: Prisma.StringFilter<"keywords"> | string
}

export type keywordsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
}

export type keywordsWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.keywordsWhereInput | Prisma.keywordsWhereInput[]
  OR?: Prisma.keywordsWhereInput[]
  NOT?: Prisma.keywordsWhereInput | Prisma.keywordsWhereInput[]
  name?: Prisma.StringFilter<"keywords"> | string
  slug?: Prisma.StringFilter<"keywords"> | string
}, "id">

export type keywordsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  _count?: Prisma.keywordsCountOrderByAggregateInput
  _avg?: Prisma.keywordsAvgOrderByAggregateInput
  _max?: Prisma.keywordsMaxOrderByAggregateInput
  _min?: Prisma.keywordsMinOrderByAggregateInput
  _sum?: Prisma.keywordsSumOrderByAggregateInput
}

export type keywordsScalarWhereWithAggregatesInput = {
  AND?: Prisma.keywordsScalarWhereWithAggregatesInput | Prisma.keywordsScalarWhereWithAggregatesInput[]
  OR?: Prisma.keywordsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.keywordsScalarWhereWithAggregatesInput | Prisma.keywordsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"keywords"> | bigint | number
  name?: Prisma.StringWithAggregatesFilter<"keywords"> | string
  slug?: Prisma.StringWithAggregatesFilter<"keywords"> | string
}

export type keywordsCreateInput = {
  id?: bigint | number
  name: string
  slug: string
}

export type keywordsUncheckedCreateInput = {
  id?: bigint | number
  name: string
  slug: string
}

export type keywordsUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
}

export type keywordsUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
}

export type keywordsCreateManyInput = {
  id?: bigint | number
  name: string
  slug: string
}

export type keywordsUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
}

export type keywordsUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
}

export type keywordsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
}

export type keywordsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type keywordsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
}

export type keywordsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
}

export type keywordsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type keywordsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
}, ExtArgs["result"]["keywords"]>

export type keywordsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
}, ExtArgs["result"]["keywords"]>

export type keywordsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
}, ExtArgs["result"]["keywords"]>

export type keywordsSelectScalar = {
  id?: boolean
  name?: boolean
  slug?: boolean
}

export type keywordsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "slug", ExtArgs["result"]["keywords"]>

export type $keywordsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "keywords"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    name: string
    slug: string
  }, ExtArgs["result"]["keywords"]>
  composites: {}
}

export type keywordsGetPayload<S extends boolean | null | undefined | keywordsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$keywordsPayload, S>

export type keywordsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<keywordsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: KeywordsCountAggregateInputType | true
  }

export interface keywordsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['keywords'], meta: { name: 'keywords' } }
  /**
   * Find zero or one Keywords that matches the filter.
   * @param {keywordsFindUniqueArgs} args - Arguments to find a Keywords
   * @example
   * // Get one Keywords
   * const keywords = await prisma.keywords.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends keywordsFindUniqueArgs>(args: Prisma.SelectSubset<T, keywordsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Keywords that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {keywordsFindUniqueOrThrowArgs} args - Arguments to find a Keywords
   * @example
   * // Get one Keywords
   * const keywords = await prisma.keywords.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends keywordsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, keywordsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Keywords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keywordsFindFirstArgs} args - Arguments to find a Keywords
   * @example
   * // Get one Keywords
   * const keywords = await prisma.keywords.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends keywordsFindFirstArgs>(args?: Prisma.SelectSubset<T, keywordsFindFirstArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Keywords that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keywordsFindFirstOrThrowArgs} args - Arguments to find a Keywords
   * @example
   * // Get one Keywords
   * const keywords = await prisma.keywords.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends keywordsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, keywordsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Keywords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keywordsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Keywords
   * const keywords = await prisma.keywords.findMany()
   * 
   * // Get first 10 Keywords
   * const keywords = await prisma.keywords.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const keywordsWithIdOnly = await prisma.keywords.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends keywordsFindManyArgs>(args?: Prisma.SelectSubset<T, keywordsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Keywords.
   * @param {keywordsCreateArgs} args - Arguments to create a Keywords.
   * @example
   * // Create one Keywords
   * const Keywords = await prisma.keywords.create({
   *   data: {
   *     // ... data to create a Keywords
   *   }
   * })
   * 
   */
  create<T extends keywordsCreateArgs>(args: Prisma.SelectSubset<T, keywordsCreateArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Keywords.
   * @param {keywordsCreateManyArgs} args - Arguments to create many Keywords.
   * @example
   * // Create many Keywords
   * const keywords = await prisma.keywords.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends keywordsCreateManyArgs>(args?: Prisma.SelectSubset<T, keywordsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Keywords and returns the data saved in the database.
   * @param {keywordsCreateManyAndReturnArgs} args - Arguments to create many Keywords.
   * @example
   * // Create many Keywords
   * const keywords = await prisma.keywords.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Keywords and only return the `id`
   * const keywordsWithIdOnly = await prisma.keywords.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends keywordsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, keywordsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Keywords.
   * @param {keywordsDeleteArgs} args - Arguments to delete one Keywords.
   * @example
   * // Delete one Keywords
   * const Keywords = await prisma.keywords.delete({
   *   where: {
   *     // ... filter to delete one Keywords
   *   }
   * })
   * 
   */
  delete<T extends keywordsDeleteArgs>(args: Prisma.SelectSubset<T, keywordsDeleteArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Keywords.
   * @param {keywordsUpdateArgs} args - Arguments to update one Keywords.
   * @example
   * // Update one Keywords
   * const keywords = await prisma.keywords.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends keywordsUpdateArgs>(args: Prisma.SelectSubset<T, keywordsUpdateArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Keywords.
   * @param {keywordsDeleteManyArgs} args - Arguments to filter Keywords to delete.
   * @example
   * // Delete a few Keywords
   * const { count } = await prisma.keywords.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends keywordsDeleteManyArgs>(args?: Prisma.SelectSubset<T, keywordsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Keywords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keywordsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Keywords
   * const keywords = await prisma.keywords.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends keywordsUpdateManyArgs>(args: Prisma.SelectSubset<T, keywordsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Keywords and returns the data updated in the database.
   * @param {keywordsUpdateManyAndReturnArgs} args - Arguments to update many Keywords.
   * @example
   * // Update many Keywords
   * const keywords = await prisma.keywords.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Keywords and only return the `id`
   * const keywordsWithIdOnly = await prisma.keywords.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends keywordsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, keywordsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Keywords.
   * @param {keywordsUpsertArgs} args - Arguments to update or create a Keywords.
   * @example
   * // Update or create a Keywords
   * const keywords = await prisma.keywords.upsert({
   *   create: {
   *     // ... data to create a Keywords
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Keywords we want to update
   *   }
   * })
   */
  upsert<T extends keywordsUpsertArgs>(args: Prisma.SelectSubset<T, keywordsUpsertArgs<ExtArgs>>): Prisma.Prisma__keywordsClient<runtime.Types.Result.GetResult<Prisma.$keywordsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Keywords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keywordsCountArgs} args - Arguments to filter Keywords to count.
   * @example
   * // Count the number of Keywords
   * const count = await prisma.keywords.count({
   *   where: {
   *     // ... the filter for the Keywords we want to count
   *   }
   * })
  **/
  count<T extends keywordsCountArgs>(
    args?: Prisma.Subset<T, keywordsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], KeywordsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Keywords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeywordsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends KeywordsAggregateArgs>(args: Prisma.Subset<T, KeywordsAggregateArgs>): Prisma.PrismaPromise<GetKeywordsAggregateType<T>>

  /**
   * Group by Keywords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keywordsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends keywordsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: keywordsGroupByArgs['orderBy'] }
      : { orderBy?: keywordsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, keywordsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the keywords model
 */
readonly fields: keywordsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for keywords.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__keywordsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the keywords model
 */
export interface keywordsFieldRefs {
  readonly id: Prisma.FieldRef<"keywords", 'BigInt'>
  readonly name: Prisma.FieldRef<"keywords", 'String'>
  readonly slug: Prisma.FieldRef<"keywords", 'String'>
}
    

// Custom InputTypes
/**
 * keywords findUnique
 */
export type keywordsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * Filter, which keywords to fetch.
   */
  where: Prisma.keywordsWhereUniqueInput
}

/**
 * keywords findUniqueOrThrow
 */
export type keywordsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * Filter, which keywords to fetch.
   */
  where: Prisma.keywordsWhereUniqueInput
}

/**
 * keywords findFirst
 */
export type keywordsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * Filter, which keywords to fetch.
   */
  where?: Prisma.keywordsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keywords to fetch.
   */
  orderBy?: Prisma.keywordsOrderByWithRelationInput | Prisma.keywordsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for keywords.
   */
  cursor?: Prisma.keywordsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keywords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keywords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of keywords.
   */
  distinct?: Prisma.KeywordsScalarFieldEnum | Prisma.KeywordsScalarFieldEnum[]
}

/**
 * keywords findFirstOrThrow
 */
export type keywordsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * Filter, which keywords to fetch.
   */
  where?: Prisma.keywordsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keywords to fetch.
   */
  orderBy?: Prisma.keywordsOrderByWithRelationInput | Prisma.keywordsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for keywords.
   */
  cursor?: Prisma.keywordsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keywords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keywords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of keywords.
   */
  distinct?: Prisma.KeywordsScalarFieldEnum | Prisma.KeywordsScalarFieldEnum[]
}

/**
 * keywords findMany
 */
export type keywordsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * Filter, which keywords to fetch.
   */
  where?: Prisma.keywordsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keywords to fetch.
   */
  orderBy?: Prisma.keywordsOrderByWithRelationInput | Prisma.keywordsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing keywords.
   */
  cursor?: Prisma.keywordsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keywords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keywords.
   */
  skip?: number
  distinct?: Prisma.KeywordsScalarFieldEnum | Prisma.KeywordsScalarFieldEnum[]
}

/**
 * keywords create
 */
export type keywordsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * The data needed to create a keywords.
   */
  data: Prisma.XOR<Prisma.keywordsCreateInput, Prisma.keywordsUncheckedCreateInput>
}

/**
 * keywords createMany
 */
export type keywordsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many keywords.
   */
  data: Prisma.keywordsCreateManyInput | Prisma.keywordsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * keywords createManyAndReturn
 */
export type keywordsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * The data used to create many keywords.
   */
  data: Prisma.keywordsCreateManyInput | Prisma.keywordsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * keywords update
 */
export type keywordsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * The data needed to update a keywords.
   */
  data: Prisma.XOR<Prisma.keywordsUpdateInput, Prisma.keywordsUncheckedUpdateInput>
  /**
   * Choose, which keywords to update.
   */
  where: Prisma.keywordsWhereUniqueInput
}

/**
 * keywords updateMany
 */
export type keywordsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update keywords.
   */
  data: Prisma.XOR<Prisma.keywordsUpdateManyMutationInput, Prisma.keywordsUncheckedUpdateManyInput>
  /**
   * Filter which keywords to update
   */
  where?: Prisma.keywordsWhereInput
  /**
   * Limit how many keywords to update.
   */
  limit?: number
}

/**
 * keywords updateManyAndReturn
 */
export type keywordsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * The data used to update keywords.
   */
  data: Prisma.XOR<Prisma.keywordsUpdateManyMutationInput, Prisma.keywordsUncheckedUpdateManyInput>
  /**
   * Filter which keywords to update
   */
  where?: Prisma.keywordsWhereInput
  /**
   * Limit how many keywords to update.
   */
  limit?: number
}

/**
 * keywords upsert
 */
export type keywordsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * The filter to search for the keywords to update in case it exists.
   */
  where: Prisma.keywordsWhereUniqueInput
  /**
   * In case the keywords found by the `where` argument doesn't exist, create a new keywords with this data.
   */
  create: Prisma.XOR<Prisma.keywordsCreateInput, Prisma.keywordsUncheckedCreateInput>
  /**
   * In case the keywords was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.keywordsUpdateInput, Prisma.keywordsUncheckedUpdateInput>
}

/**
 * keywords delete
 */
export type keywordsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
  /**
   * Filter which keywords to delete.
   */
  where: Prisma.keywordsWhereUniqueInput
}

/**
 * keywords deleteMany
 */
export type keywordsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which keywords to delete
   */
  where?: Prisma.keywordsWhereInput
  /**
   * Limit how many keywords to delete.
   */
  limit?: number
}

/**
 * keywords without action
 */
export type keywordsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keywords
   */
  select?: Prisma.keywordsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keywords
   */
  omit?: Prisma.keywordsOmit<ExtArgs> | null
}
