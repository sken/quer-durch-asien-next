
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `wp_term_taxonomy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model wp_term_taxonomy
 * 
 */
export type wp_term_taxonomyModel = runtime.Types.Result.DefaultSelection<Prisma.$wp_term_taxonomyPayload>

export type AggregateWp_term_taxonomy = {
  _count: Wp_term_taxonomyCountAggregateOutputType | null
  _avg: Wp_term_taxonomyAvgAggregateOutputType | null
  _sum: Wp_term_taxonomySumAggregateOutputType | null
  _min: Wp_term_taxonomyMinAggregateOutputType | null
  _max: Wp_term_taxonomyMaxAggregateOutputType | null
}

export type Wp_term_taxonomyAvgAggregateOutputType = {
  term_taxonomy_id: number | null
  term_id: runtime.Decimal | null
  parent: runtime.Decimal | null
  count: number | null
}

export type Wp_term_taxonomySumAggregateOutputType = {
  term_taxonomy_id: bigint | null
  term_id: runtime.Decimal | null
  parent: runtime.Decimal | null
  count: bigint | null
}

export type Wp_term_taxonomyMinAggregateOutputType = {
  term_taxonomy_id: bigint | null
  term_id: runtime.Decimal | null
  taxonomy: string | null
  description: string | null
  parent: runtime.Decimal | null
  count: bigint | null
}

export type Wp_term_taxonomyMaxAggregateOutputType = {
  term_taxonomy_id: bigint | null
  term_id: runtime.Decimal | null
  taxonomy: string | null
  description: string | null
  parent: runtime.Decimal | null
  count: bigint | null
}

export type Wp_term_taxonomyCountAggregateOutputType = {
  term_taxonomy_id: number
  term_id: number
  taxonomy: number
  description: number
  parent: number
  count: number
  _all: number
}


export type Wp_term_taxonomyAvgAggregateInputType = {
  term_taxonomy_id?: true
  term_id?: true
  parent?: true
  count?: true
}

export type Wp_term_taxonomySumAggregateInputType = {
  term_taxonomy_id?: true
  term_id?: true
  parent?: true
  count?: true
}

export type Wp_term_taxonomyMinAggregateInputType = {
  term_taxonomy_id?: true
  term_id?: true
  taxonomy?: true
  description?: true
  parent?: true
  count?: true
}

export type Wp_term_taxonomyMaxAggregateInputType = {
  term_taxonomy_id?: true
  term_id?: true
  taxonomy?: true
  description?: true
  parent?: true
  count?: true
}

export type Wp_term_taxonomyCountAggregateInputType = {
  term_taxonomy_id?: true
  term_id?: true
  taxonomy?: true
  description?: true
  parent?: true
  count?: true
  _all?: true
}

export type Wp_term_taxonomyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_term_taxonomy to aggregate.
   */
  where?: Prisma.wp_term_taxonomyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_term_taxonomies to fetch.
   */
  orderBy?: Prisma.wp_term_taxonomyOrderByWithRelationInput | Prisma.wp_term_taxonomyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.wp_term_taxonomyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_term_taxonomies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_term_taxonomies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned wp_term_taxonomies
  **/
  _count?: true | Wp_term_taxonomyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Wp_term_taxonomyAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Wp_term_taxonomySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Wp_term_taxonomyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Wp_term_taxonomyMaxAggregateInputType
}

export type GetWp_term_taxonomyAggregateType<T extends Wp_term_taxonomyAggregateArgs> = {
      [P in keyof T & keyof AggregateWp_term_taxonomy]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWp_term_taxonomy[P]>
    : Prisma.GetScalarType<T[P], AggregateWp_term_taxonomy[P]>
}




export type wp_term_taxonomyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.wp_term_taxonomyWhereInput
  orderBy?: Prisma.wp_term_taxonomyOrderByWithAggregationInput | Prisma.wp_term_taxonomyOrderByWithAggregationInput[]
  by: Prisma.Wp_term_taxonomyScalarFieldEnum[] | Prisma.Wp_term_taxonomyScalarFieldEnum
  having?: Prisma.wp_term_taxonomyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Wp_term_taxonomyCountAggregateInputType | true
  _avg?: Wp_term_taxonomyAvgAggregateInputType
  _sum?: Wp_term_taxonomySumAggregateInputType
  _min?: Wp_term_taxonomyMinAggregateInputType
  _max?: Wp_term_taxonomyMaxAggregateInputType
}

export type Wp_term_taxonomyGroupByOutputType = {
  term_taxonomy_id: bigint
  term_id: runtime.Decimal
  taxonomy: string
  description: string
  parent: runtime.Decimal
  count: bigint
  _count: Wp_term_taxonomyCountAggregateOutputType | null
  _avg: Wp_term_taxonomyAvgAggregateOutputType | null
  _sum: Wp_term_taxonomySumAggregateOutputType | null
  _min: Wp_term_taxonomyMinAggregateOutputType | null
  _max: Wp_term_taxonomyMaxAggregateOutputType | null
}

type GetWp_term_taxonomyGroupByPayload<T extends wp_term_taxonomyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Wp_term_taxonomyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Wp_term_taxonomyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Wp_term_taxonomyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Wp_term_taxonomyGroupByOutputType[P]>
      }
    >
  >



export type wp_term_taxonomyWhereInput = {
  AND?: Prisma.wp_term_taxonomyWhereInput | Prisma.wp_term_taxonomyWhereInput[]
  OR?: Prisma.wp_term_taxonomyWhereInput[]
  NOT?: Prisma.wp_term_taxonomyWhereInput | Prisma.wp_term_taxonomyWhereInput[]
  term_taxonomy_id?: Prisma.BigIntFilter<"wp_term_taxonomy"> | bigint | number
  term_id?: Prisma.DecimalFilter<"wp_term_taxonomy"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: Prisma.StringFilter<"wp_term_taxonomy"> | string
  description?: Prisma.StringFilter<"wp_term_taxonomy"> | string
  parent?: Prisma.DecimalFilter<"wp_term_taxonomy"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: Prisma.BigIntFilter<"wp_term_taxonomy"> | bigint | number
}

export type wp_term_taxonomyOrderByWithRelationInput = {
  term_taxonomy_id?: Prisma.SortOrder
  term_id?: Prisma.SortOrder
  taxonomy?: Prisma.SortOrder
  description?: Prisma.SortOrder
  parent?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type wp_term_taxonomyWhereUniqueInput = Prisma.AtLeast<{
  term_taxonomy_id?: bigint | number
  term_id_taxonomy?: Prisma.wp_term_taxonomyTerm_idTaxonomyCompoundUniqueInput
  AND?: Prisma.wp_term_taxonomyWhereInput | Prisma.wp_term_taxonomyWhereInput[]
  OR?: Prisma.wp_term_taxonomyWhereInput[]
  NOT?: Prisma.wp_term_taxonomyWhereInput | Prisma.wp_term_taxonomyWhereInput[]
  term_id?: Prisma.DecimalFilter<"wp_term_taxonomy"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: Prisma.StringFilter<"wp_term_taxonomy"> | string
  description?: Prisma.StringFilter<"wp_term_taxonomy"> | string
  parent?: Prisma.DecimalFilter<"wp_term_taxonomy"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: Prisma.BigIntFilter<"wp_term_taxonomy"> | bigint | number
}, "term_taxonomy_id" | "term_id_taxonomy">

export type wp_term_taxonomyOrderByWithAggregationInput = {
  term_taxonomy_id?: Prisma.SortOrder
  term_id?: Prisma.SortOrder
  taxonomy?: Prisma.SortOrder
  description?: Prisma.SortOrder
  parent?: Prisma.SortOrder
  count?: Prisma.SortOrder
  _count?: Prisma.wp_term_taxonomyCountOrderByAggregateInput
  _avg?: Prisma.wp_term_taxonomyAvgOrderByAggregateInput
  _max?: Prisma.wp_term_taxonomyMaxOrderByAggregateInput
  _min?: Prisma.wp_term_taxonomyMinOrderByAggregateInput
  _sum?: Prisma.wp_term_taxonomySumOrderByAggregateInput
}

export type wp_term_taxonomyScalarWhereWithAggregatesInput = {
  AND?: Prisma.wp_term_taxonomyScalarWhereWithAggregatesInput | Prisma.wp_term_taxonomyScalarWhereWithAggregatesInput[]
  OR?: Prisma.wp_term_taxonomyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.wp_term_taxonomyScalarWhereWithAggregatesInput | Prisma.wp_term_taxonomyScalarWhereWithAggregatesInput[]
  term_taxonomy_id?: Prisma.BigIntWithAggregatesFilter<"wp_term_taxonomy"> | bigint | number
  term_id?: Prisma.DecimalWithAggregatesFilter<"wp_term_taxonomy"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: Prisma.StringWithAggregatesFilter<"wp_term_taxonomy"> | string
  description?: Prisma.StringWithAggregatesFilter<"wp_term_taxonomy"> | string
  parent?: Prisma.DecimalWithAggregatesFilter<"wp_term_taxonomy"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: Prisma.BigIntWithAggregatesFilter<"wp_term_taxonomy"> | bigint | number
}

export type wp_term_taxonomyCreateInput = {
  term_taxonomy_id?: bigint | number
  term_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: string
  description: string
  parent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: bigint | number
}

export type wp_term_taxonomyUncheckedCreateInput = {
  term_taxonomy_id?: bigint | number
  term_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: string
  description: string
  parent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: bigint | number
}

export type wp_term_taxonomyUpdateInput = {
  term_taxonomy_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  term_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_term_taxonomyUncheckedUpdateInput = {
  term_taxonomy_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  term_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_term_taxonomyCreateManyInput = {
  term_taxonomy_id?: bigint | number
  term_id?: runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: string
  description: string
  parent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: bigint | number
}

export type wp_term_taxonomyUpdateManyMutationInput = {
  term_taxonomy_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  term_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_term_taxonomyUncheckedUpdateManyInput = {
  term_taxonomy_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  term_id?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  parent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  count?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_term_taxonomyTerm_idTaxonomyCompoundUniqueInput = {
  term_id: runtime.Decimal | runtime.DecimalJsLike | number | string
  taxonomy: string
}

export type wp_term_taxonomyCountOrderByAggregateInput = {
  term_taxonomy_id?: Prisma.SortOrder
  term_id?: Prisma.SortOrder
  taxonomy?: Prisma.SortOrder
  description?: Prisma.SortOrder
  parent?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type wp_term_taxonomyAvgOrderByAggregateInput = {
  term_taxonomy_id?: Prisma.SortOrder
  term_id?: Prisma.SortOrder
  parent?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type wp_term_taxonomyMaxOrderByAggregateInput = {
  term_taxonomy_id?: Prisma.SortOrder
  term_id?: Prisma.SortOrder
  taxonomy?: Prisma.SortOrder
  description?: Prisma.SortOrder
  parent?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type wp_term_taxonomyMinOrderByAggregateInput = {
  term_taxonomy_id?: Prisma.SortOrder
  term_id?: Prisma.SortOrder
  taxonomy?: Prisma.SortOrder
  description?: Prisma.SortOrder
  parent?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type wp_term_taxonomySumOrderByAggregateInput = {
  term_taxonomy_id?: Prisma.SortOrder
  term_id?: Prisma.SortOrder
  parent?: Prisma.SortOrder
  count?: Prisma.SortOrder
}



export type wp_term_taxonomySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  term_taxonomy_id?: boolean
  term_id?: boolean
  taxonomy?: boolean
  description?: boolean
  parent?: boolean
  count?: boolean
}, ExtArgs["result"]["wp_term_taxonomy"]>

export type wp_term_taxonomySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  term_taxonomy_id?: boolean
  term_id?: boolean
  taxonomy?: boolean
  description?: boolean
  parent?: boolean
  count?: boolean
}, ExtArgs["result"]["wp_term_taxonomy"]>

export type wp_term_taxonomySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  term_taxonomy_id?: boolean
  term_id?: boolean
  taxonomy?: boolean
  description?: boolean
  parent?: boolean
  count?: boolean
}, ExtArgs["result"]["wp_term_taxonomy"]>

export type wp_term_taxonomySelectScalar = {
  term_taxonomy_id?: boolean
  term_id?: boolean
  taxonomy?: boolean
  description?: boolean
  parent?: boolean
  count?: boolean
}

export type wp_term_taxonomyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"term_taxonomy_id" | "term_id" | "taxonomy" | "description" | "parent" | "count", ExtArgs["result"]["wp_term_taxonomy"]>

export type $wp_term_taxonomyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "wp_term_taxonomy"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    term_taxonomy_id: bigint
    term_id: runtime.Decimal
    taxonomy: string
    description: string
    parent: runtime.Decimal
    count: bigint
  }, ExtArgs["result"]["wp_term_taxonomy"]>
  composites: {}
}

export type wp_term_taxonomyGetPayload<S extends boolean | null | undefined | wp_term_taxonomyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload, S>

export type wp_term_taxonomyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<wp_term_taxonomyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Wp_term_taxonomyCountAggregateInputType | true
  }

export interface wp_term_taxonomyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wp_term_taxonomy'], meta: { name: 'wp_term_taxonomy' } }
  /**
   * Find zero or one Wp_term_taxonomy that matches the filter.
   * @param {wp_term_taxonomyFindUniqueArgs} args - Arguments to find a Wp_term_taxonomy
   * @example
   * // Get one Wp_term_taxonomy
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends wp_term_taxonomyFindUniqueArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Wp_term_taxonomy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {wp_term_taxonomyFindUniqueOrThrowArgs} args - Arguments to find a Wp_term_taxonomy
   * @example
   * // Get one Wp_term_taxonomy
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends wp_term_taxonomyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_term_taxonomy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_term_taxonomyFindFirstArgs} args - Arguments to find a Wp_term_taxonomy
   * @example
   * // Get one Wp_term_taxonomy
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends wp_term_taxonomyFindFirstArgs>(args?: Prisma.SelectSubset<T, wp_term_taxonomyFindFirstArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_term_taxonomy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_term_taxonomyFindFirstOrThrowArgs} args - Arguments to find a Wp_term_taxonomy
   * @example
   * // Get one Wp_term_taxonomy
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends wp_term_taxonomyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, wp_term_taxonomyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Wp_term_taxonomies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_term_taxonomyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Wp_term_taxonomies
   * const wp_term_taxonomies = await prisma.wp_term_taxonomy.findMany()
   * 
   * // Get first 10 Wp_term_taxonomies
   * const wp_term_taxonomies = await prisma.wp_term_taxonomy.findMany({ take: 10 })
   * 
   * // Only select the `term_taxonomy_id`
   * const wp_term_taxonomyWithTerm_taxonomy_idOnly = await prisma.wp_term_taxonomy.findMany({ select: { term_taxonomy_id: true } })
   * 
   */
  findMany<T extends wp_term_taxonomyFindManyArgs>(args?: Prisma.SelectSubset<T, wp_term_taxonomyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Wp_term_taxonomy.
   * @param {wp_term_taxonomyCreateArgs} args - Arguments to create a Wp_term_taxonomy.
   * @example
   * // Create one Wp_term_taxonomy
   * const Wp_term_taxonomy = await prisma.wp_term_taxonomy.create({
   *   data: {
   *     // ... data to create a Wp_term_taxonomy
   *   }
   * })
   * 
   */
  create<T extends wp_term_taxonomyCreateArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyCreateArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Wp_term_taxonomies.
   * @param {wp_term_taxonomyCreateManyArgs} args - Arguments to create many Wp_term_taxonomies.
   * @example
   * // Create many Wp_term_taxonomies
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends wp_term_taxonomyCreateManyArgs>(args?: Prisma.SelectSubset<T, wp_term_taxonomyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Wp_term_taxonomies and returns the data saved in the database.
   * @param {wp_term_taxonomyCreateManyAndReturnArgs} args - Arguments to create many Wp_term_taxonomies.
   * @example
   * // Create many Wp_term_taxonomies
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Wp_term_taxonomies and only return the `term_taxonomy_id`
   * const wp_term_taxonomyWithTerm_taxonomy_idOnly = await prisma.wp_term_taxonomy.createManyAndReturn({
   *   select: { term_taxonomy_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends wp_term_taxonomyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, wp_term_taxonomyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Wp_term_taxonomy.
   * @param {wp_term_taxonomyDeleteArgs} args - Arguments to delete one Wp_term_taxonomy.
   * @example
   * // Delete one Wp_term_taxonomy
   * const Wp_term_taxonomy = await prisma.wp_term_taxonomy.delete({
   *   where: {
   *     // ... filter to delete one Wp_term_taxonomy
   *   }
   * })
   * 
   */
  delete<T extends wp_term_taxonomyDeleteArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyDeleteArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Wp_term_taxonomy.
   * @param {wp_term_taxonomyUpdateArgs} args - Arguments to update one Wp_term_taxonomy.
   * @example
   * // Update one Wp_term_taxonomy
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends wp_term_taxonomyUpdateArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyUpdateArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Wp_term_taxonomies.
   * @param {wp_term_taxonomyDeleteManyArgs} args - Arguments to filter Wp_term_taxonomies to delete.
   * @example
   * // Delete a few Wp_term_taxonomies
   * const { count } = await prisma.wp_term_taxonomy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends wp_term_taxonomyDeleteManyArgs>(args?: Prisma.SelectSubset<T, wp_term_taxonomyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_term_taxonomies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_term_taxonomyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Wp_term_taxonomies
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends wp_term_taxonomyUpdateManyArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_term_taxonomies and returns the data updated in the database.
   * @param {wp_term_taxonomyUpdateManyAndReturnArgs} args - Arguments to update many Wp_term_taxonomies.
   * @example
   * // Update many Wp_term_taxonomies
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Wp_term_taxonomies and only return the `term_taxonomy_id`
   * const wp_term_taxonomyWithTerm_taxonomy_idOnly = await prisma.wp_term_taxonomy.updateManyAndReturn({
   *   select: { term_taxonomy_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends wp_term_taxonomyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Wp_term_taxonomy.
   * @param {wp_term_taxonomyUpsertArgs} args - Arguments to update or create a Wp_term_taxonomy.
   * @example
   * // Update or create a Wp_term_taxonomy
   * const wp_term_taxonomy = await prisma.wp_term_taxonomy.upsert({
   *   create: {
   *     // ... data to create a Wp_term_taxonomy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Wp_term_taxonomy we want to update
   *   }
   * })
   */
  upsert<T extends wp_term_taxonomyUpsertArgs>(args: Prisma.SelectSubset<T, wp_term_taxonomyUpsertArgs<ExtArgs>>): Prisma.Prisma__wp_term_taxonomyClient<runtime.Types.Result.GetResult<Prisma.$wp_term_taxonomyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Wp_term_taxonomies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_term_taxonomyCountArgs} args - Arguments to filter Wp_term_taxonomies to count.
   * @example
   * // Count the number of Wp_term_taxonomies
   * const count = await prisma.wp_term_taxonomy.count({
   *   where: {
   *     // ... the filter for the Wp_term_taxonomies we want to count
   *   }
   * })
  **/
  count<T extends wp_term_taxonomyCountArgs>(
    args?: Prisma.Subset<T, wp_term_taxonomyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Wp_term_taxonomyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Wp_term_taxonomy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Wp_term_taxonomyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Wp_term_taxonomyAggregateArgs>(args: Prisma.Subset<T, Wp_term_taxonomyAggregateArgs>): Prisma.PrismaPromise<GetWp_term_taxonomyAggregateType<T>>

  /**
   * Group by Wp_term_taxonomy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_term_taxonomyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends wp_term_taxonomyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: wp_term_taxonomyGroupByArgs['orderBy'] }
      : { orderBy?: wp_term_taxonomyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, wp_term_taxonomyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWp_term_taxonomyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the wp_term_taxonomy model
 */
readonly fields: wp_term_taxonomyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for wp_term_taxonomy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__wp_term_taxonomyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the wp_term_taxonomy model
 */
export interface wp_term_taxonomyFieldRefs {
  readonly term_taxonomy_id: Prisma.FieldRef<"wp_term_taxonomy", 'BigInt'>
  readonly term_id: Prisma.FieldRef<"wp_term_taxonomy", 'Decimal'>
  readonly taxonomy: Prisma.FieldRef<"wp_term_taxonomy", 'String'>
  readonly description: Prisma.FieldRef<"wp_term_taxonomy", 'String'>
  readonly parent: Prisma.FieldRef<"wp_term_taxonomy", 'Decimal'>
  readonly count: Prisma.FieldRef<"wp_term_taxonomy", 'BigInt'>
}
    

// Custom InputTypes
/**
 * wp_term_taxonomy findUnique
 */
export type wp_term_taxonomyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * Filter, which wp_term_taxonomy to fetch.
   */
  where: Prisma.wp_term_taxonomyWhereUniqueInput
}

/**
 * wp_term_taxonomy findUniqueOrThrow
 */
export type wp_term_taxonomyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * Filter, which wp_term_taxonomy to fetch.
   */
  where: Prisma.wp_term_taxonomyWhereUniqueInput
}

/**
 * wp_term_taxonomy findFirst
 */
export type wp_term_taxonomyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * Filter, which wp_term_taxonomy to fetch.
   */
  where?: Prisma.wp_term_taxonomyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_term_taxonomies to fetch.
   */
  orderBy?: Prisma.wp_term_taxonomyOrderByWithRelationInput | Prisma.wp_term_taxonomyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_term_taxonomies.
   */
  cursor?: Prisma.wp_term_taxonomyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_term_taxonomies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_term_taxonomies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_term_taxonomies.
   */
  distinct?: Prisma.Wp_term_taxonomyScalarFieldEnum | Prisma.Wp_term_taxonomyScalarFieldEnum[]
}

/**
 * wp_term_taxonomy findFirstOrThrow
 */
export type wp_term_taxonomyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * Filter, which wp_term_taxonomy to fetch.
   */
  where?: Prisma.wp_term_taxonomyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_term_taxonomies to fetch.
   */
  orderBy?: Prisma.wp_term_taxonomyOrderByWithRelationInput | Prisma.wp_term_taxonomyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_term_taxonomies.
   */
  cursor?: Prisma.wp_term_taxonomyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_term_taxonomies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_term_taxonomies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_term_taxonomies.
   */
  distinct?: Prisma.Wp_term_taxonomyScalarFieldEnum | Prisma.Wp_term_taxonomyScalarFieldEnum[]
}

/**
 * wp_term_taxonomy findMany
 */
export type wp_term_taxonomyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * Filter, which wp_term_taxonomies to fetch.
   */
  where?: Prisma.wp_term_taxonomyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_term_taxonomies to fetch.
   */
  orderBy?: Prisma.wp_term_taxonomyOrderByWithRelationInput | Prisma.wp_term_taxonomyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing wp_term_taxonomies.
   */
  cursor?: Prisma.wp_term_taxonomyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_term_taxonomies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_term_taxonomies.
   */
  skip?: number
  distinct?: Prisma.Wp_term_taxonomyScalarFieldEnum | Prisma.Wp_term_taxonomyScalarFieldEnum[]
}

/**
 * wp_term_taxonomy create
 */
export type wp_term_taxonomyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * The data needed to create a wp_term_taxonomy.
   */
  data: Prisma.XOR<Prisma.wp_term_taxonomyCreateInput, Prisma.wp_term_taxonomyUncheckedCreateInput>
}

/**
 * wp_term_taxonomy createMany
 */
export type wp_term_taxonomyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many wp_term_taxonomies.
   */
  data: Prisma.wp_term_taxonomyCreateManyInput | Prisma.wp_term_taxonomyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_term_taxonomy createManyAndReturn
 */
export type wp_term_taxonomyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * The data used to create many wp_term_taxonomies.
   */
  data: Prisma.wp_term_taxonomyCreateManyInput | Prisma.wp_term_taxonomyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_term_taxonomy update
 */
export type wp_term_taxonomyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * The data needed to update a wp_term_taxonomy.
   */
  data: Prisma.XOR<Prisma.wp_term_taxonomyUpdateInput, Prisma.wp_term_taxonomyUncheckedUpdateInput>
  /**
   * Choose, which wp_term_taxonomy to update.
   */
  where: Prisma.wp_term_taxonomyWhereUniqueInput
}

/**
 * wp_term_taxonomy updateMany
 */
export type wp_term_taxonomyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update wp_term_taxonomies.
   */
  data: Prisma.XOR<Prisma.wp_term_taxonomyUpdateManyMutationInput, Prisma.wp_term_taxonomyUncheckedUpdateManyInput>
  /**
   * Filter which wp_term_taxonomies to update
   */
  where?: Prisma.wp_term_taxonomyWhereInput
  /**
   * Limit how many wp_term_taxonomies to update.
   */
  limit?: number
}

/**
 * wp_term_taxonomy updateManyAndReturn
 */
export type wp_term_taxonomyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * The data used to update wp_term_taxonomies.
   */
  data: Prisma.XOR<Prisma.wp_term_taxonomyUpdateManyMutationInput, Prisma.wp_term_taxonomyUncheckedUpdateManyInput>
  /**
   * Filter which wp_term_taxonomies to update
   */
  where?: Prisma.wp_term_taxonomyWhereInput
  /**
   * Limit how many wp_term_taxonomies to update.
   */
  limit?: number
}

/**
 * wp_term_taxonomy upsert
 */
export type wp_term_taxonomyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * The filter to search for the wp_term_taxonomy to update in case it exists.
   */
  where: Prisma.wp_term_taxonomyWhereUniqueInput
  /**
   * In case the wp_term_taxonomy found by the `where` argument doesn't exist, create a new wp_term_taxonomy with this data.
   */
  create: Prisma.XOR<Prisma.wp_term_taxonomyCreateInput, Prisma.wp_term_taxonomyUncheckedCreateInput>
  /**
   * In case the wp_term_taxonomy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.wp_term_taxonomyUpdateInput, Prisma.wp_term_taxonomyUncheckedUpdateInput>
}

/**
 * wp_term_taxonomy delete
 */
export type wp_term_taxonomyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
  /**
   * Filter which wp_term_taxonomy to delete.
   */
  where: Prisma.wp_term_taxonomyWhereUniqueInput
}

/**
 * wp_term_taxonomy deleteMany
 */
export type wp_term_taxonomyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_term_taxonomies to delete
   */
  where?: Prisma.wp_term_taxonomyWhereInput
  /**
   * Limit how many wp_term_taxonomies to delete.
   */
  limit?: number
}

/**
 * wp_term_taxonomy without action
 */
export type wp_term_taxonomyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_term_taxonomy
   */
  select?: Prisma.wp_term_taxonomySelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_term_taxonomy
   */
  omit?: Prisma.wp_term_taxonomyOmit<ExtArgs> | null
}
