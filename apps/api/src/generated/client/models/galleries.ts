
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `galleries` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model galleries
 * 
 */
export type galleriesModel = runtime.Types.Result.DefaultSelection<Prisma.$galleriesPayload>

export type AggregateGalleries = {
  _count: GalleriesCountAggregateOutputType | null
  _avg: GalleriesAvgAggregateOutputType | null
  _sum: GalleriesSumAggregateOutputType | null
  _min: GalleriesMinAggregateOutputType | null
  _max: GalleriesMaxAggregateOutputType | null
}

export type GalleriesAvgAggregateOutputType = {
  id: number | null
  previewpic: number | null
}

export type GalleriesSumAggregateOutputType = {
  id: bigint | null
  previewpic: bigint | null
}

export type GalleriesMinAggregateOutputType = {
  id: bigint | null
  name: string | null
  title: string | null
  galdesc: string | null
  previewpic: bigint | null
}

export type GalleriesMaxAggregateOutputType = {
  id: bigint | null
  name: string | null
  title: string | null
  galdesc: string | null
  previewpic: bigint | null
}

export type GalleriesCountAggregateOutputType = {
  id: number
  name: number
  title: number
  galdesc: number
  previewpic: number
  _all: number
}


export type GalleriesAvgAggregateInputType = {
  id?: true
  previewpic?: true
}

export type GalleriesSumAggregateInputType = {
  id?: true
  previewpic?: true
}

export type GalleriesMinAggregateInputType = {
  id?: true
  name?: true
  title?: true
  galdesc?: true
  previewpic?: true
}

export type GalleriesMaxAggregateInputType = {
  id?: true
  name?: true
  title?: true
  galdesc?: true
  previewpic?: true
}

export type GalleriesCountAggregateInputType = {
  id?: true
  name?: true
  title?: true
  galdesc?: true
  previewpic?: true
  _all?: true
}

export type GalleriesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which galleries to aggregate.
   */
  where?: Prisma.galleriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of galleries to fetch.
   */
  orderBy?: Prisma.galleriesOrderByWithRelationInput | Prisma.galleriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.galleriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` galleries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` galleries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned galleries
  **/
  _count?: true | GalleriesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GalleriesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GalleriesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GalleriesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GalleriesMaxAggregateInputType
}

export type GetGalleriesAggregateType<T extends GalleriesAggregateArgs> = {
      [P in keyof T & keyof AggregateGalleries]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGalleries[P]>
    : Prisma.GetScalarType<T[P], AggregateGalleries[P]>
}




export type galleriesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.galleriesWhereInput
  orderBy?: Prisma.galleriesOrderByWithAggregationInput | Prisma.galleriesOrderByWithAggregationInput[]
  by: Prisma.GalleriesScalarFieldEnum[] | Prisma.GalleriesScalarFieldEnum
  having?: Prisma.galleriesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GalleriesCountAggregateInputType | true
  _avg?: GalleriesAvgAggregateInputType
  _sum?: GalleriesSumAggregateInputType
  _min?: GalleriesMinAggregateInputType
  _max?: GalleriesMaxAggregateInputType
}

export type GalleriesGroupByOutputType = {
  id: bigint
  name: string | null
  title: string | null
  galdesc: string | null
  previewpic: bigint | null
  _count: GalleriesCountAggregateOutputType | null
  _avg: GalleriesAvgAggregateOutputType | null
  _sum: GalleriesSumAggregateOutputType | null
  _min: GalleriesMinAggregateOutputType | null
  _max: GalleriesMaxAggregateOutputType | null
}

type GetGalleriesGroupByPayload<T extends galleriesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GalleriesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GalleriesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GalleriesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GalleriesGroupByOutputType[P]>
      }
    >
  >



export type galleriesWhereInput = {
  AND?: Prisma.galleriesWhereInput | Prisma.galleriesWhereInput[]
  OR?: Prisma.galleriesWhereInput[]
  NOT?: Prisma.galleriesWhereInput | Prisma.galleriesWhereInput[]
  id?: Prisma.BigIntFilter<"galleries"> | bigint | number
  name?: Prisma.StringNullableFilter<"galleries"> | string | null
  title?: Prisma.StringNullableFilter<"galleries"> | string | null
  galdesc?: Prisma.StringNullableFilter<"galleries"> | string | null
  previewpic?: Prisma.BigIntNullableFilter<"galleries"> | bigint | number | null
}

export type galleriesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  galdesc?: Prisma.SortOrderInput | Prisma.SortOrder
  previewpic?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type galleriesWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.galleriesWhereInput | Prisma.galleriesWhereInput[]
  OR?: Prisma.galleriesWhereInput[]
  NOT?: Prisma.galleriesWhereInput | Prisma.galleriesWhereInput[]
  name?: Prisma.StringNullableFilter<"galleries"> | string | null
  title?: Prisma.StringNullableFilter<"galleries"> | string | null
  galdesc?: Prisma.StringNullableFilter<"galleries"> | string | null
  previewpic?: Prisma.BigIntNullableFilter<"galleries"> | bigint | number | null
}, "id">

export type galleriesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  galdesc?: Prisma.SortOrderInput | Prisma.SortOrder
  previewpic?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.galleriesCountOrderByAggregateInput
  _avg?: Prisma.galleriesAvgOrderByAggregateInput
  _max?: Prisma.galleriesMaxOrderByAggregateInput
  _min?: Prisma.galleriesMinOrderByAggregateInput
  _sum?: Prisma.galleriesSumOrderByAggregateInput
}

export type galleriesScalarWhereWithAggregatesInput = {
  AND?: Prisma.galleriesScalarWhereWithAggregatesInput | Prisma.galleriesScalarWhereWithAggregatesInput[]
  OR?: Prisma.galleriesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.galleriesScalarWhereWithAggregatesInput | Prisma.galleriesScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"galleries"> | bigint | number
  name?: Prisma.StringNullableWithAggregatesFilter<"galleries"> | string | null
  title?: Prisma.StringNullableWithAggregatesFilter<"galleries"> | string | null
  galdesc?: Prisma.StringNullableWithAggregatesFilter<"galleries"> | string | null
  previewpic?: Prisma.BigIntNullableWithAggregatesFilter<"galleries"> | bigint | number | null
}

export type galleriesCreateInput = {
  id?: bigint | number
  name?: string | null
  title?: string | null
  galdesc?: string | null
  previewpic?: bigint | number | null
}

export type galleriesUncheckedCreateInput = {
  id?: bigint | number
  name?: string | null
  title?: string | null
  galdesc?: string | null
  previewpic?: bigint | number | null
}

export type galleriesUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  galdesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  previewpic?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type galleriesUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  galdesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  previewpic?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type galleriesCreateManyInput = {
  id?: bigint | number
  name?: string | null
  title?: string | null
  galdesc?: string | null
  previewpic?: bigint | number | null
}

export type galleriesUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  galdesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  previewpic?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type galleriesUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  galdesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  previewpic?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type galleriesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  galdesc?: Prisma.SortOrder
  previewpic?: Prisma.SortOrder
}

export type galleriesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  previewpic?: Prisma.SortOrder
}

export type galleriesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  galdesc?: Prisma.SortOrder
  previewpic?: Prisma.SortOrder
}

export type galleriesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  galdesc?: Prisma.SortOrder
  previewpic?: Prisma.SortOrder
}

export type galleriesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  previewpic?: Prisma.SortOrder
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableBigIntFieldUpdateOperationsInput = {
  set?: bigint | number | null
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}



export type galleriesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  galdesc?: boolean
  previewpic?: boolean
}, ExtArgs["result"]["galleries"]>

export type galleriesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  galdesc?: boolean
  previewpic?: boolean
}, ExtArgs["result"]["galleries"]>

export type galleriesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  galdesc?: boolean
  previewpic?: boolean
}, ExtArgs["result"]["galleries"]>

export type galleriesSelectScalar = {
  id?: boolean
  name?: boolean
  title?: boolean
  galdesc?: boolean
  previewpic?: boolean
}

export type galleriesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "title" | "galdesc" | "previewpic", ExtArgs["result"]["galleries"]>

export type $galleriesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "galleries"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    name: string | null
    title: string | null
    galdesc: string | null
    previewpic: bigint | null
  }, ExtArgs["result"]["galleries"]>
  composites: {}
}

export type galleriesGetPayload<S extends boolean | null | undefined | galleriesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$galleriesPayload, S>

export type galleriesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<galleriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GalleriesCountAggregateInputType | true
  }

export interface galleriesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['galleries'], meta: { name: 'galleries' } }
  /**
   * Find zero or one Galleries that matches the filter.
   * @param {galleriesFindUniqueArgs} args - Arguments to find a Galleries
   * @example
   * // Get one Galleries
   * const galleries = await prisma.galleries.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends galleriesFindUniqueArgs>(args: Prisma.SelectSubset<T, galleriesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Galleries that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {galleriesFindUniqueOrThrowArgs} args - Arguments to find a Galleries
   * @example
   * // Get one Galleries
   * const galleries = await prisma.galleries.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends galleriesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, galleriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Galleries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {galleriesFindFirstArgs} args - Arguments to find a Galleries
   * @example
   * // Get one Galleries
   * const galleries = await prisma.galleries.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends galleriesFindFirstArgs>(args?: Prisma.SelectSubset<T, galleriesFindFirstArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Galleries that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {galleriesFindFirstOrThrowArgs} args - Arguments to find a Galleries
   * @example
   * // Get one Galleries
   * const galleries = await prisma.galleries.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends galleriesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, galleriesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Galleries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {galleriesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Galleries
   * const galleries = await prisma.galleries.findMany()
   * 
   * // Get first 10 Galleries
   * const galleries = await prisma.galleries.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const galleriesWithIdOnly = await prisma.galleries.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends galleriesFindManyArgs>(args?: Prisma.SelectSubset<T, galleriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Galleries.
   * @param {galleriesCreateArgs} args - Arguments to create a Galleries.
   * @example
   * // Create one Galleries
   * const Galleries = await prisma.galleries.create({
   *   data: {
   *     // ... data to create a Galleries
   *   }
   * })
   * 
   */
  create<T extends galleriesCreateArgs>(args: Prisma.SelectSubset<T, galleriesCreateArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Galleries.
   * @param {galleriesCreateManyArgs} args - Arguments to create many Galleries.
   * @example
   * // Create many Galleries
   * const galleries = await prisma.galleries.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends galleriesCreateManyArgs>(args?: Prisma.SelectSubset<T, galleriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Galleries and returns the data saved in the database.
   * @param {galleriesCreateManyAndReturnArgs} args - Arguments to create many Galleries.
   * @example
   * // Create many Galleries
   * const galleries = await prisma.galleries.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Galleries and only return the `id`
   * const galleriesWithIdOnly = await prisma.galleries.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends galleriesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, galleriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Galleries.
   * @param {galleriesDeleteArgs} args - Arguments to delete one Galleries.
   * @example
   * // Delete one Galleries
   * const Galleries = await prisma.galleries.delete({
   *   where: {
   *     // ... filter to delete one Galleries
   *   }
   * })
   * 
   */
  delete<T extends galleriesDeleteArgs>(args: Prisma.SelectSubset<T, galleriesDeleteArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Galleries.
   * @param {galleriesUpdateArgs} args - Arguments to update one Galleries.
   * @example
   * // Update one Galleries
   * const galleries = await prisma.galleries.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends galleriesUpdateArgs>(args: Prisma.SelectSubset<T, galleriesUpdateArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Galleries.
   * @param {galleriesDeleteManyArgs} args - Arguments to filter Galleries to delete.
   * @example
   * // Delete a few Galleries
   * const { count } = await prisma.galleries.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends galleriesDeleteManyArgs>(args?: Prisma.SelectSubset<T, galleriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Galleries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {galleriesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Galleries
   * const galleries = await prisma.galleries.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends galleriesUpdateManyArgs>(args: Prisma.SelectSubset<T, galleriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Galleries and returns the data updated in the database.
   * @param {galleriesUpdateManyAndReturnArgs} args - Arguments to update many Galleries.
   * @example
   * // Update many Galleries
   * const galleries = await prisma.galleries.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Galleries and only return the `id`
   * const galleriesWithIdOnly = await prisma.galleries.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends galleriesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, galleriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Galleries.
   * @param {galleriesUpsertArgs} args - Arguments to update or create a Galleries.
   * @example
   * // Update or create a Galleries
   * const galleries = await prisma.galleries.upsert({
   *   create: {
   *     // ... data to create a Galleries
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Galleries we want to update
   *   }
   * })
   */
  upsert<T extends galleriesUpsertArgs>(args: Prisma.SelectSubset<T, galleriesUpsertArgs<ExtArgs>>): Prisma.Prisma__galleriesClient<runtime.Types.Result.GetResult<Prisma.$galleriesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Galleries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {galleriesCountArgs} args - Arguments to filter Galleries to count.
   * @example
   * // Count the number of Galleries
   * const count = await prisma.galleries.count({
   *   where: {
   *     // ... the filter for the Galleries we want to count
   *   }
   * })
  **/
  count<T extends galleriesCountArgs>(
    args?: Prisma.Subset<T, galleriesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GalleriesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Galleries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GalleriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GalleriesAggregateArgs>(args: Prisma.Subset<T, GalleriesAggregateArgs>): Prisma.PrismaPromise<GetGalleriesAggregateType<T>>

  /**
   * Group by Galleries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {galleriesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends galleriesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: galleriesGroupByArgs['orderBy'] }
      : { orderBy?: galleriesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, galleriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGalleriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the galleries model
 */
readonly fields: galleriesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for galleries.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__galleriesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the galleries model
 */
export interface galleriesFieldRefs {
  readonly id: Prisma.FieldRef<"galleries", 'BigInt'>
  readonly name: Prisma.FieldRef<"galleries", 'String'>
  readonly title: Prisma.FieldRef<"galleries", 'String'>
  readonly galdesc: Prisma.FieldRef<"galleries", 'String'>
  readonly previewpic: Prisma.FieldRef<"galleries", 'BigInt'>
}
    

// Custom InputTypes
/**
 * galleries findUnique
 */
export type galleriesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * Filter, which galleries to fetch.
   */
  where: Prisma.galleriesWhereUniqueInput
}

/**
 * galleries findUniqueOrThrow
 */
export type galleriesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * Filter, which galleries to fetch.
   */
  where: Prisma.galleriesWhereUniqueInput
}

/**
 * galleries findFirst
 */
export type galleriesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * Filter, which galleries to fetch.
   */
  where?: Prisma.galleriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of galleries to fetch.
   */
  orderBy?: Prisma.galleriesOrderByWithRelationInput | Prisma.galleriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for galleries.
   */
  cursor?: Prisma.galleriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` galleries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` galleries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of galleries.
   */
  distinct?: Prisma.GalleriesScalarFieldEnum | Prisma.GalleriesScalarFieldEnum[]
}

/**
 * galleries findFirstOrThrow
 */
export type galleriesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * Filter, which galleries to fetch.
   */
  where?: Prisma.galleriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of galleries to fetch.
   */
  orderBy?: Prisma.galleriesOrderByWithRelationInput | Prisma.galleriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for galleries.
   */
  cursor?: Prisma.galleriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` galleries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` galleries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of galleries.
   */
  distinct?: Prisma.GalleriesScalarFieldEnum | Prisma.GalleriesScalarFieldEnum[]
}

/**
 * galleries findMany
 */
export type galleriesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * Filter, which galleries to fetch.
   */
  where?: Prisma.galleriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of galleries to fetch.
   */
  orderBy?: Prisma.galleriesOrderByWithRelationInput | Prisma.galleriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing galleries.
   */
  cursor?: Prisma.galleriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` galleries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` galleries.
   */
  skip?: number
  distinct?: Prisma.GalleriesScalarFieldEnum | Prisma.GalleriesScalarFieldEnum[]
}

/**
 * galleries create
 */
export type galleriesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * The data needed to create a galleries.
   */
  data?: Prisma.XOR<Prisma.galleriesCreateInput, Prisma.galleriesUncheckedCreateInput>
}

/**
 * galleries createMany
 */
export type galleriesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many galleries.
   */
  data: Prisma.galleriesCreateManyInput | Prisma.galleriesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * galleries createManyAndReturn
 */
export type galleriesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * The data used to create many galleries.
   */
  data: Prisma.galleriesCreateManyInput | Prisma.galleriesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * galleries update
 */
export type galleriesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * The data needed to update a galleries.
   */
  data: Prisma.XOR<Prisma.galleriesUpdateInput, Prisma.galleriesUncheckedUpdateInput>
  /**
   * Choose, which galleries to update.
   */
  where: Prisma.galleriesWhereUniqueInput
}

/**
 * galleries updateMany
 */
export type galleriesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update galleries.
   */
  data: Prisma.XOR<Prisma.galleriesUpdateManyMutationInput, Prisma.galleriesUncheckedUpdateManyInput>
  /**
   * Filter which galleries to update
   */
  where?: Prisma.galleriesWhereInput
  /**
   * Limit how many galleries to update.
   */
  limit?: number
}

/**
 * galleries updateManyAndReturn
 */
export type galleriesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * The data used to update galleries.
   */
  data: Prisma.XOR<Prisma.galleriesUpdateManyMutationInput, Prisma.galleriesUncheckedUpdateManyInput>
  /**
   * Filter which galleries to update
   */
  where?: Prisma.galleriesWhereInput
  /**
   * Limit how many galleries to update.
   */
  limit?: number
}

/**
 * galleries upsert
 */
export type galleriesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * The filter to search for the galleries to update in case it exists.
   */
  where: Prisma.galleriesWhereUniqueInput
  /**
   * In case the galleries found by the `where` argument doesn't exist, create a new galleries with this data.
   */
  create: Prisma.XOR<Prisma.galleriesCreateInput, Prisma.galleriesUncheckedCreateInput>
  /**
   * In case the galleries was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.galleriesUpdateInput, Prisma.galleriesUncheckedUpdateInput>
}

/**
 * galleries delete
 */
export type galleriesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
  /**
   * Filter which galleries to delete.
   */
  where: Prisma.galleriesWhereUniqueInput
}

/**
 * galleries deleteMany
 */
export type galleriesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which galleries to delete
   */
  where?: Prisma.galleriesWhereInput
  /**
   * Limit how many galleries to delete.
   */
  limit?: number
}

/**
 * galleries without action
 */
export type galleriesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the galleries
   */
  select?: Prisma.galleriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the galleries
   */
  omit?: Prisma.galleriesOmit<ExtArgs> | null
}
