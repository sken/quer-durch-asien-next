
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `keyword_to_image` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model keyword_to_image
 * 
 */
export type keyword_to_imageModel = runtime.Types.Result.DefaultSelection<Prisma.$keyword_to_imagePayload>

export type AggregateKeyword_to_image = {
  _count: Keyword_to_imageCountAggregateOutputType | null
  _avg: Keyword_to_imageAvgAggregateOutputType | null
  _sum: Keyword_to_imageSumAggregateOutputType | null
  _min: Keyword_to_imageMinAggregateOutputType | null
  _max: Keyword_to_imageMaxAggregateOutputType | null
}

export type Keyword_to_imageAvgAggregateOutputType = {
  image_id: number | null
  keyword_id: number | null
}

export type Keyword_to_imageSumAggregateOutputType = {
  image_id: bigint | null
  keyword_id: bigint | null
}

export type Keyword_to_imageMinAggregateOutputType = {
  image_id: bigint | null
  keyword_id: bigint | null
}

export type Keyword_to_imageMaxAggregateOutputType = {
  image_id: bigint | null
  keyword_id: bigint | null
}

export type Keyword_to_imageCountAggregateOutputType = {
  image_id: number
  keyword_id: number
  _all: number
}


export type Keyword_to_imageAvgAggregateInputType = {
  image_id?: true
  keyword_id?: true
}

export type Keyword_to_imageSumAggregateInputType = {
  image_id?: true
  keyword_id?: true
}

export type Keyword_to_imageMinAggregateInputType = {
  image_id?: true
  keyword_id?: true
}

export type Keyword_to_imageMaxAggregateInputType = {
  image_id?: true
  keyword_id?: true
}

export type Keyword_to_imageCountAggregateInputType = {
  image_id?: true
  keyword_id?: true
  _all?: true
}

export type Keyword_to_imageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which keyword_to_image to aggregate.
   */
  where?: Prisma.keyword_to_imageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keyword_to_images to fetch.
   */
  orderBy?: Prisma.keyword_to_imageOrderByWithRelationInput | Prisma.keyword_to_imageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.keyword_to_imageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keyword_to_images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keyword_to_images.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned keyword_to_images
  **/
  _count?: true | Keyword_to_imageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Keyword_to_imageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Keyword_to_imageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Keyword_to_imageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Keyword_to_imageMaxAggregateInputType
}

export type GetKeyword_to_imageAggregateType<T extends Keyword_to_imageAggregateArgs> = {
      [P in keyof T & keyof AggregateKeyword_to_image]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKeyword_to_image[P]>
    : Prisma.GetScalarType<T[P], AggregateKeyword_to_image[P]>
}




export type keyword_to_imageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.keyword_to_imageWhereInput
  orderBy?: Prisma.keyword_to_imageOrderByWithAggregationInput | Prisma.keyword_to_imageOrderByWithAggregationInput[]
  by: Prisma.Keyword_to_imageScalarFieldEnum[] | Prisma.Keyword_to_imageScalarFieldEnum
  having?: Prisma.keyword_to_imageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Keyword_to_imageCountAggregateInputType | true
  _avg?: Keyword_to_imageAvgAggregateInputType
  _sum?: Keyword_to_imageSumAggregateInputType
  _min?: Keyword_to_imageMinAggregateInputType
  _max?: Keyword_to_imageMaxAggregateInputType
}

export type Keyword_to_imageGroupByOutputType = {
  image_id: bigint
  keyword_id: bigint
  _count: Keyword_to_imageCountAggregateOutputType | null
  _avg: Keyword_to_imageAvgAggregateOutputType | null
  _sum: Keyword_to_imageSumAggregateOutputType | null
  _min: Keyword_to_imageMinAggregateOutputType | null
  _max: Keyword_to_imageMaxAggregateOutputType | null
}

type GetKeyword_to_imageGroupByPayload<T extends keyword_to_imageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Keyword_to_imageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Keyword_to_imageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Keyword_to_imageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Keyword_to_imageGroupByOutputType[P]>
      }
    >
  >



export type keyword_to_imageWhereInput = {
  AND?: Prisma.keyword_to_imageWhereInput | Prisma.keyword_to_imageWhereInput[]
  OR?: Prisma.keyword_to_imageWhereInput[]
  NOT?: Prisma.keyword_to_imageWhereInput | Prisma.keyword_to_imageWhereInput[]
  image_id?: Prisma.BigIntFilter<"keyword_to_image"> | bigint | number
  keyword_id?: Prisma.BigIntFilter<"keyword_to_image"> | bigint | number
}

export type keyword_to_imageOrderByWithRelationInput = {
  image_id?: Prisma.SortOrder
  keyword_id?: Prisma.SortOrder
}

export type keyword_to_imageWhereUniqueInput = Prisma.AtLeast<{
  image_id_keyword_id?: Prisma.keyword_to_imageImage_idKeyword_idCompoundUniqueInput
  AND?: Prisma.keyword_to_imageWhereInput | Prisma.keyword_to_imageWhereInput[]
  OR?: Prisma.keyword_to_imageWhereInput[]
  NOT?: Prisma.keyword_to_imageWhereInput | Prisma.keyword_to_imageWhereInput[]
  image_id?: Prisma.BigIntFilter<"keyword_to_image"> | bigint | number
  keyword_id?: Prisma.BigIntFilter<"keyword_to_image"> | bigint | number
}, "image_id_keyword_id">

export type keyword_to_imageOrderByWithAggregationInput = {
  image_id?: Prisma.SortOrder
  keyword_id?: Prisma.SortOrder
  _count?: Prisma.keyword_to_imageCountOrderByAggregateInput
  _avg?: Prisma.keyword_to_imageAvgOrderByAggregateInput
  _max?: Prisma.keyword_to_imageMaxOrderByAggregateInput
  _min?: Prisma.keyword_to_imageMinOrderByAggregateInput
  _sum?: Prisma.keyword_to_imageSumOrderByAggregateInput
}

export type keyword_to_imageScalarWhereWithAggregatesInput = {
  AND?: Prisma.keyword_to_imageScalarWhereWithAggregatesInput | Prisma.keyword_to_imageScalarWhereWithAggregatesInput[]
  OR?: Prisma.keyword_to_imageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.keyword_to_imageScalarWhereWithAggregatesInput | Prisma.keyword_to_imageScalarWhereWithAggregatesInput[]
  image_id?: Prisma.BigIntWithAggregatesFilter<"keyword_to_image"> | bigint | number
  keyword_id?: Prisma.BigIntWithAggregatesFilter<"keyword_to_image"> | bigint | number
}

export type keyword_to_imageCreateInput = {
  image_id: bigint | number
  keyword_id: bigint | number
}

export type keyword_to_imageUncheckedCreateInput = {
  image_id: bigint | number
  keyword_id: bigint | number
}

export type keyword_to_imageUpdateInput = {
  image_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  keyword_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type keyword_to_imageUncheckedUpdateInput = {
  image_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  keyword_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type keyword_to_imageCreateManyInput = {
  image_id: bigint | number
  keyword_id: bigint | number
}

export type keyword_to_imageUpdateManyMutationInput = {
  image_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  keyword_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type keyword_to_imageUncheckedUpdateManyInput = {
  image_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  keyword_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type keyword_to_imageImage_idKeyword_idCompoundUniqueInput = {
  image_id: bigint | number
  keyword_id: bigint | number
}

export type keyword_to_imageCountOrderByAggregateInput = {
  image_id?: Prisma.SortOrder
  keyword_id?: Prisma.SortOrder
}

export type keyword_to_imageAvgOrderByAggregateInput = {
  image_id?: Prisma.SortOrder
  keyword_id?: Prisma.SortOrder
}

export type keyword_to_imageMaxOrderByAggregateInput = {
  image_id?: Prisma.SortOrder
  keyword_id?: Prisma.SortOrder
}

export type keyword_to_imageMinOrderByAggregateInput = {
  image_id?: Prisma.SortOrder
  keyword_id?: Prisma.SortOrder
}

export type keyword_to_imageSumOrderByAggregateInput = {
  image_id?: Prisma.SortOrder
  keyword_id?: Prisma.SortOrder
}



export type keyword_to_imageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  image_id?: boolean
  keyword_id?: boolean
}, ExtArgs["result"]["keyword_to_image"]>

export type keyword_to_imageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  image_id?: boolean
  keyword_id?: boolean
}, ExtArgs["result"]["keyword_to_image"]>

export type keyword_to_imageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  image_id?: boolean
  keyword_id?: boolean
}, ExtArgs["result"]["keyword_to_image"]>

export type keyword_to_imageSelectScalar = {
  image_id?: boolean
  keyword_id?: boolean
}

export type keyword_to_imageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"image_id" | "keyword_id", ExtArgs["result"]["keyword_to_image"]>

export type $keyword_to_imagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "keyword_to_image"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    image_id: bigint
    keyword_id: bigint
  }, ExtArgs["result"]["keyword_to_image"]>
  composites: {}
}

export type keyword_to_imageGetPayload<S extends boolean | null | undefined | keyword_to_imageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload, S>

export type keyword_to_imageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<keyword_to_imageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Keyword_to_imageCountAggregateInputType | true
  }

export interface keyword_to_imageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['keyword_to_image'], meta: { name: 'keyword_to_image' } }
  /**
   * Find zero or one Keyword_to_image that matches the filter.
   * @param {keyword_to_imageFindUniqueArgs} args - Arguments to find a Keyword_to_image
   * @example
   * // Get one Keyword_to_image
   * const keyword_to_image = await prisma.keyword_to_image.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends keyword_to_imageFindUniqueArgs>(args: Prisma.SelectSubset<T, keyword_to_imageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Keyword_to_image that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {keyword_to_imageFindUniqueOrThrowArgs} args - Arguments to find a Keyword_to_image
   * @example
   * // Get one Keyword_to_image
   * const keyword_to_image = await prisma.keyword_to_image.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends keyword_to_imageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, keyword_to_imageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Keyword_to_image that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keyword_to_imageFindFirstArgs} args - Arguments to find a Keyword_to_image
   * @example
   * // Get one Keyword_to_image
   * const keyword_to_image = await prisma.keyword_to_image.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends keyword_to_imageFindFirstArgs>(args?: Prisma.SelectSubset<T, keyword_to_imageFindFirstArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Keyword_to_image that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keyword_to_imageFindFirstOrThrowArgs} args - Arguments to find a Keyword_to_image
   * @example
   * // Get one Keyword_to_image
   * const keyword_to_image = await prisma.keyword_to_image.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends keyword_to_imageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, keyword_to_imageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Keyword_to_images that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keyword_to_imageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Keyword_to_images
   * const keyword_to_images = await prisma.keyword_to_image.findMany()
   * 
   * // Get first 10 Keyword_to_images
   * const keyword_to_images = await prisma.keyword_to_image.findMany({ take: 10 })
   * 
   * // Only select the `image_id`
   * const keyword_to_imageWithImage_idOnly = await prisma.keyword_to_image.findMany({ select: { image_id: true } })
   * 
   */
  findMany<T extends keyword_to_imageFindManyArgs>(args?: Prisma.SelectSubset<T, keyword_to_imageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Keyword_to_image.
   * @param {keyword_to_imageCreateArgs} args - Arguments to create a Keyword_to_image.
   * @example
   * // Create one Keyword_to_image
   * const Keyword_to_image = await prisma.keyword_to_image.create({
   *   data: {
   *     // ... data to create a Keyword_to_image
   *   }
   * })
   * 
   */
  create<T extends keyword_to_imageCreateArgs>(args: Prisma.SelectSubset<T, keyword_to_imageCreateArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Keyword_to_images.
   * @param {keyword_to_imageCreateManyArgs} args - Arguments to create many Keyword_to_images.
   * @example
   * // Create many Keyword_to_images
   * const keyword_to_image = await prisma.keyword_to_image.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends keyword_to_imageCreateManyArgs>(args?: Prisma.SelectSubset<T, keyword_to_imageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Keyword_to_images and returns the data saved in the database.
   * @param {keyword_to_imageCreateManyAndReturnArgs} args - Arguments to create many Keyword_to_images.
   * @example
   * // Create many Keyword_to_images
   * const keyword_to_image = await prisma.keyword_to_image.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Keyword_to_images and only return the `image_id`
   * const keyword_to_imageWithImage_idOnly = await prisma.keyword_to_image.createManyAndReturn({
   *   select: { image_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends keyword_to_imageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, keyword_to_imageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Keyword_to_image.
   * @param {keyword_to_imageDeleteArgs} args - Arguments to delete one Keyword_to_image.
   * @example
   * // Delete one Keyword_to_image
   * const Keyword_to_image = await prisma.keyword_to_image.delete({
   *   where: {
   *     // ... filter to delete one Keyword_to_image
   *   }
   * })
   * 
   */
  delete<T extends keyword_to_imageDeleteArgs>(args: Prisma.SelectSubset<T, keyword_to_imageDeleteArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Keyword_to_image.
   * @param {keyword_to_imageUpdateArgs} args - Arguments to update one Keyword_to_image.
   * @example
   * // Update one Keyword_to_image
   * const keyword_to_image = await prisma.keyword_to_image.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends keyword_to_imageUpdateArgs>(args: Prisma.SelectSubset<T, keyword_to_imageUpdateArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Keyword_to_images.
   * @param {keyword_to_imageDeleteManyArgs} args - Arguments to filter Keyword_to_images to delete.
   * @example
   * // Delete a few Keyword_to_images
   * const { count } = await prisma.keyword_to_image.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends keyword_to_imageDeleteManyArgs>(args?: Prisma.SelectSubset<T, keyword_to_imageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Keyword_to_images.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keyword_to_imageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Keyword_to_images
   * const keyword_to_image = await prisma.keyword_to_image.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends keyword_to_imageUpdateManyArgs>(args: Prisma.SelectSubset<T, keyword_to_imageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Keyword_to_images and returns the data updated in the database.
   * @param {keyword_to_imageUpdateManyAndReturnArgs} args - Arguments to update many Keyword_to_images.
   * @example
   * // Update many Keyword_to_images
   * const keyword_to_image = await prisma.keyword_to_image.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Keyword_to_images and only return the `image_id`
   * const keyword_to_imageWithImage_idOnly = await prisma.keyword_to_image.updateManyAndReturn({
   *   select: { image_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends keyword_to_imageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, keyword_to_imageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Keyword_to_image.
   * @param {keyword_to_imageUpsertArgs} args - Arguments to update or create a Keyword_to_image.
   * @example
   * // Update or create a Keyword_to_image
   * const keyword_to_image = await prisma.keyword_to_image.upsert({
   *   create: {
   *     // ... data to create a Keyword_to_image
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Keyword_to_image we want to update
   *   }
   * })
   */
  upsert<T extends keyword_to_imageUpsertArgs>(args: Prisma.SelectSubset<T, keyword_to_imageUpsertArgs<ExtArgs>>): Prisma.Prisma__keyword_to_imageClient<runtime.Types.Result.GetResult<Prisma.$keyword_to_imagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Keyword_to_images.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keyword_to_imageCountArgs} args - Arguments to filter Keyword_to_images to count.
   * @example
   * // Count the number of Keyword_to_images
   * const count = await prisma.keyword_to_image.count({
   *   where: {
   *     // ... the filter for the Keyword_to_images we want to count
   *   }
   * })
  **/
  count<T extends keyword_to_imageCountArgs>(
    args?: Prisma.Subset<T, keyword_to_imageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Keyword_to_imageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Keyword_to_image.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Keyword_to_imageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Keyword_to_imageAggregateArgs>(args: Prisma.Subset<T, Keyword_to_imageAggregateArgs>): Prisma.PrismaPromise<GetKeyword_to_imageAggregateType<T>>

  /**
   * Group by Keyword_to_image.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {keyword_to_imageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends keyword_to_imageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: keyword_to_imageGroupByArgs['orderBy'] }
      : { orderBy?: keyword_to_imageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, keyword_to_imageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyword_to_imageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the keyword_to_image model
 */
readonly fields: keyword_to_imageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for keyword_to_image.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__keyword_to_imageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the keyword_to_image model
 */
export interface keyword_to_imageFieldRefs {
  readonly image_id: Prisma.FieldRef<"keyword_to_image", 'BigInt'>
  readonly keyword_id: Prisma.FieldRef<"keyword_to_image", 'BigInt'>
}
    

// Custom InputTypes
/**
 * keyword_to_image findUnique
 */
export type keyword_to_imageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * Filter, which keyword_to_image to fetch.
   */
  where: Prisma.keyword_to_imageWhereUniqueInput
}

/**
 * keyword_to_image findUniqueOrThrow
 */
export type keyword_to_imageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * Filter, which keyword_to_image to fetch.
   */
  where: Prisma.keyword_to_imageWhereUniqueInput
}

/**
 * keyword_to_image findFirst
 */
export type keyword_to_imageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * Filter, which keyword_to_image to fetch.
   */
  where?: Prisma.keyword_to_imageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keyword_to_images to fetch.
   */
  orderBy?: Prisma.keyword_to_imageOrderByWithRelationInput | Prisma.keyword_to_imageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for keyword_to_images.
   */
  cursor?: Prisma.keyword_to_imageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keyword_to_images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keyword_to_images.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of keyword_to_images.
   */
  distinct?: Prisma.Keyword_to_imageScalarFieldEnum | Prisma.Keyword_to_imageScalarFieldEnum[]
}

/**
 * keyword_to_image findFirstOrThrow
 */
export type keyword_to_imageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * Filter, which keyword_to_image to fetch.
   */
  where?: Prisma.keyword_to_imageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keyword_to_images to fetch.
   */
  orderBy?: Prisma.keyword_to_imageOrderByWithRelationInput | Prisma.keyword_to_imageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for keyword_to_images.
   */
  cursor?: Prisma.keyword_to_imageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keyword_to_images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keyword_to_images.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of keyword_to_images.
   */
  distinct?: Prisma.Keyword_to_imageScalarFieldEnum | Prisma.Keyword_to_imageScalarFieldEnum[]
}

/**
 * keyword_to_image findMany
 */
export type keyword_to_imageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * Filter, which keyword_to_images to fetch.
   */
  where?: Prisma.keyword_to_imageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of keyword_to_images to fetch.
   */
  orderBy?: Prisma.keyword_to_imageOrderByWithRelationInput | Prisma.keyword_to_imageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing keyword_to_images.
   */
  cursor?: Prisma.keyword_to_imageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` keyword_to_images from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` keyword_to_images.
   */
  skip?: number
  distinct?: Prisma.Keyword_to_imageScalarFieldEnum | Prisma.Keyword_to_imageScalarFieldEnum[]
}

/**
 * keyword_to_image create
 */
export type keyword_to_imageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * The data needed to create a keyword_to_image.
   */
  data: Prisma.XOR<Prisma.keyword_to_imageCreateInput, Prisma.keyword_to_imageUncheckedCreateInput>
}

/**
 * keyword_to_image createMany
 */
export type keyword_to_imageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many keyword_to_images.
   */
  data: Prisma.keyword_to_imageCreateManyInput | Prisma.keyword_to_imageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * keyword_to_image createManyAndReturn
 */
export type keyword_to_imageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * The data used to create many keyword_to_images.
   */
  data: Prisma.keyword_to_imageCreateManyInput | Prisma.keyword_to_imageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * keyword_to_image update
 */
export type keyword_to_imageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * The data needed to update a keyword_to_image.
   */
  data: Prisma.XOR<Prisma.keyword_to_imageUpdateInput, Prisma.keyword_to_imageUncheckedUpdateInput>
  /**
   * Choose, which keyword_to_image to update.
   */
  where: Prisma.keyword_to_imageWhereUniqueInput
}

/**
 * keyword_to_image updateMany
 */
export type keyword_to_imageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update keyword_to_images.
   */
  data: Prisma.XOR<Prisma.keyword_to_imageUpdateManyMutationInput, Prisma.keyword_to_imageUncheckedUpdateManyInput>
  /**
   * Filter which keyword_to_images to update
   */
  where?: Prisma.keyword_to_imageWhereInput
  /**
   * Limit how many keyword_to_images to update.
   */
  limit?: number
}

/**
 * keyword_to_image updateManyAndReturn
 */
export type keyword_to_imageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * The data used to update keyword_to_images.
   */
  data: Prisma.XOR<Prisma.keyword_to_imageUpdateManyMutationInput, Prisma.keyword_to_imageUncheckedUpdateManyInput>
  /**
   * Filter which keyword_to_images to update
   */
  where?: Prisma.keyword_to_imageWhereInput
  /**
   * Limit how many keyword_to_images to update.
   */
  limit?: number
}

/**
 * keyword_to_image upsert
 */
export type keyword_to_imageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * The filter to search for the keyword_to_image to update in case it exists.
   */
  where: Prisma.keyword_to_imageWhereUniqueInput
  /**
   * In case the keyword_to_image found by the `where` argument doesn't exist, create a new keyword_to_image with this data.
   */
  create: Prisma.XOR<Prisma.keyword_to_imageCreateInput, Prisma.keyword_to_imageUncheckedCreateInput>
  /**
   * In case the keyword_to_image was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.keyword_to_imageUpdateInput, Prisma.keyword_to_imageUncheckedUpdateInput>
}

/**
 * keyword_to_image delete
 */
export type keyword_to_imageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
  /**
   * Filter which keyword_to_image to delete.
   */
  where: Prisma.keyword_to_imageWhereUniqueInput
}

/**
 * keyword_to_image deleteMany
 */
export type keyword_to_imageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which keyword_to_images to delete
   */
  where?: Prisma.keyword_to_imageWhereInput
  /**
   * Limit how many keyword_to_images to delete.
   */
  limit?: number
}

/**
 * keyword_to_image without action
 */
export type keyword_to_imageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the keyword_to_image
   */
  select?: Prisma.keyword_to_imageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the keyword_to_image
   */
  omit?: Prisma.keyword_to_imageOmit<ExtArgs> | null
}
