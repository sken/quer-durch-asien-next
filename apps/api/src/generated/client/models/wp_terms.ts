
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `wp_terms` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model wp_terms
 * 
 */
export type wp_termsModel = runtime.Types.Result.DefaultSelection<Prisma.$wp_termsPayload>

export type AggregateWp_terms = {
  _count: Wp_termsCountAggregateOutputType | null
  _avg: Wp_termsAvgAggregateOutputType | null
  _sum: Wp_termsSumAggregateOutputType | null
  _min: Wp_termsMinAggregateOutputType | null
  _max: Wp_termsMaxAggregateOutputType | null
}

export type Wp_termsAvgAggregateOutputType = {
  term_id: number | null
  term_group: number | null
}

export type Wp_termsSumAggregateOutputType = {
  term_id: bigint | null
  term_group: bigint | null
}

export type Wp_termsMinAggregateOutputType = {
  term_id: bigint | null
  name: string | null
  slug: string | null
  term_group: bigint | null
}

export type Wp_termsMaxAggregateOutputType = {
  term_id: bigint | null
  name: string | null
  slug: string | null
  term_group: bigint | null
}

export type Wp_termsCountAggregateOutputType = {
  term_id: number
  name: number
  slug: number
  term_group: number
  _all: number
}


export type Wp_termsAvgAggregateInputType = {
  term_id?: true
  term_group?: true
}

export type Wp_termsSumAggregateInputType = {
  term_id?: true
  term_group?: true
}

export type Wp_termsMinAggregateInputType = {
  term_id?: true
  name?: true
  slug?: true
  term_group?: true
}

export type Wp_termsMaxAggregateInputType = {
  term_id?: true
  name?: true
  slug?: true
  term_group?: true
}

export type Wp_termsCountAggregateInputType = {
  term_id?: true
  name?: true
  slug?: true
  term_group?: true
  _all?: true
}

export type Wp_termsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_terms to aggregate.
   */
  where?: Prisma.wp_termsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_terms to fetch.
   */
  orderBy?: Prisma.wp_termsOrderByWithRelationInput | Prisma.wp_termsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.wp_termsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned wp_terms
  **/
  _count?: true | Wp_termsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Wp_termsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Wp_termsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Wp_termsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Wp_termsMaxAggregateInputType
}

export type GetWp_termsAggregateType<T extends Wp_termsAggregateArgs> = {
      [P in keyof T & keyof AggregateWp_terms]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWp_terms[P]>
    : Prisma.GetScalarType<T[P], AggregateWp_terms[P]>
}




export type wp_termsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.wp_termsWhereInput
  orderBy?: Prisma.wp_termsOrderByWithAggregationInput | Prisma.wp_termsOrderByWithAggregationInput[]
  by: Prisma.Wp_termsScalarFieldEnum[] | Prisma.Wp_termsScalarFieldEnum
  having?: Prisma.wp_termsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Wp_termsCountAggregateInputType | true
  _avg?: Wp_termsAvgAggregateInputType
  _sum?: Wp_termsSumAggregateInputType
  _min?: Wp_termsMinAggregateInputType
  _max?: Wp_termsMaxAggregateInputType
}

export type Wp_termsGroupByOutputType = {
  term_id: bigint
  name: string
  slug: string
  term_group: bigint
  _count: Wp_termsCountAggregateOutputType | null
  _avg: Wp_termsAvgAggregateOutputType | null
  _sum: Wp_termsSumAggregateOutputType | null
  _min: Wp_termsMinAggregateOutputType | null
  _max: Wp_termsMaxAggregateOutputType | null
}

type GetWp_termsGroupByPayload<T extends wp_termsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Wp_termsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Wp_termsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Wp_termsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Wp_termsGroupByOutputType[P]>
      }
    >
  >



export type wp_termsWhereInput = {
  AND?: Prisma.wp_termsWhereInput | Prisma.wp_termsWhereInput[]
  OR?: Prisma.wp_termsWhereInput[]
  NOT?: Prisma.wp_termsWhereInput | Prisma.wp_termsWhereInput[]
  term_id?: Prisma.BigIntFilter<"wp_terms"> | bigint | number
  name?: Prisma.StringFilter<"wp_terms"> | string
  slug?: Prisma.StringFilter<"wp_terms"> | string
  term_group?: Prisma.BigIntFilter<"wp_terms"> | bigint | number
}

export type wp_termsOrderByWithRelationInput = {
  term_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  term_group?: Prisma.SortOrder
}

export type wp_termsWhereUniqueInput = Prisma.AtLeast<{
  term_id?: bigint | number
  slug?: string
  AND?: Prisma.wp_termsWhereInput | Prisma.wp_termsWhereInput[]
  OR?: Prisma.wp_termsWhereInput[]
  NOT?: Prisma.wp_termsWhereInput | Prisma.wp_termsWhereInput[]
  name?: Prisma.StringFilter<"wp_terms"> | string
  term_group?: Prisma.BigIntFilter<"wp_terms"> | bigint | number
}, "term_id" | "slug">

export type wp_termsOrderByWithAggregationInput = {
  term_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  term_group?: Prisma.SortOrder
  _count?: Prisma.wp_termsCountOrderByAggregateInput
  _avg?: Prisma.wp_termsAvgOrderByAggregateInput
  _max?: Prisma.wp_termsMaxOrderByAggregateInput
  _min?: Prisma.wp_termsMinOrderByAggregateInput
  _sum?: Prisma.wp_termsSumOrderByAggregateInput
}

export type wp_termsScalarWhereWithAggregatesInput = {
  AND?: Prisma.wp_termsScalarWhereWithAggregatesInput | Prisma.wp_termsScalarWhereWithAggregatesInput[]
  OR?: Prisma.wp_termsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.wp_termsScalarWhereWithAggregatesInput | Prisma.wp_termsScalarWhereWithAggregatesInput[]
  term_id?: Prisma.BigIntWithAggregatesFilter<"wp_terms"> | bigint | number
  name?: Prisma.StringWithAggregatesFilter<"wp_terms"> | string
  slug?: Prisma.StringWithAggregatesFilter<"wp_terms"> | string
  term_group?: Prisma.BigIntWithAggregatesFilter<"wp_terms"> | bigint | number
}

export type wp_termsCreateInput = {
  term_id?: bigint | number
  name?: string
  slug?: string
  term_group?: bigint | number
}

export type wp_termsUncheckedCreateInput = {
  term_id?: bigint | number
  name?: string
  slug?: string
  term_group?: bigint | number
}

export type wp_termsUpdateInput = {
  term_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  term_group?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_termsUncheckedUpdateInput = {
  term_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  term_group?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_termsCreateManyInput = {
  term_id?: bigint | number
  name?: string
  slug?: string
  term_group?: bigint | number
}

export type wp_termsUpdateManyMutationInput = {
  term_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  term_group?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_termsUncheckedUpdateManyInput = {
  term_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  term_group?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type wp_termsCountOrderByAggregateInput = {
  term_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  term_group?: Prisma.SortOrder
}

export type wp_termsAvgOrderByAggregateInput = {
  term_id?: Prisma.SortOrder
  term_group?: Prisma.SortOrder
}

export type wp_termsMaxOrderByAggregateInput = {
  term_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  term_group?: Prisma.SortOrder
}

export type wp_termsMinOrderByAggregateInput = {
  term_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  term_group?: Prisma.SortOrder
}

export type wp_termsSumOrderByAggregateInput = {
  term_id?: Prisma.SortOrder
  term_group?: Prisma.SortOrder
}



export type wp_termsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  term_id?: boolean
  name?: boolean
  slug?: boolean
  term_group?: boolean
}, ExtArgs["result"]["wp_terms"]>

export type wp_termsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  term_id?: boolean
  name?: boolean
  slug?: boolean
  term_group?: boolean
}, ExtArgs["result"]["wp_terms"]>

export type wp_termsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  term_id?: boolean
  name?: boolean
  slug?: boolean
  term_group?: boolean
}, ExtArgs["result"]["wp_terms"]>

export type wp_termsSelectScalar = {
  term_id?: boolean
  name?: boolean
  slug?: boolean
  term_group?: boolean
}

export type wp_termsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"term_id" | "name" | "slug" | "term_group", ExtArgs["result"]["wp_terms"]>

export type $wp_termsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "wp_terms"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    term_id: bigint
    name: string
    slug: string
    term_group: bigint
  }, ExtArgs["result"]["wp_terms"]>
  composites: {}
}

export type wp_termsGetPayload<S extends boolean | null | undefined | wp_termsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$wp_termsPayload, S>

export type wp_termsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<wp_termsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Wp_termsCountAggregateInputType | true
  }

export interface wp_termsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wp_terms'], meta: { name: 'wp_terms' } }
  /**
   * Find zero or one Wp_terms that matches the filter.
   * @param {wp_termsFindUniqueArgs} args - Arguments to find a Wp_terms
   * @example
   * // Get one Wp_terms
   * const wp_terms = await prisma.wp_terms.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends wp_termsFindUniqueArgs>(args: Prisma.SelectSubset<T, wp_termsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Wp_terms that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {wp_termsFindUniqueOrThrowArgs} args - Arguments to find a Wp_terms
   * @example
   * // Get one Wp_terms
   * const wp_terms = await prisma.wp_terms.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends wp_termsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, wp_termsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_terms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_termsFindFirstArgs} args - Arguments to find a Wp_terms
   * @example
   * // Get one Wp_terms
   * const wp_terms = await prisma.wp_terms.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends wp_termsFindFirstArgs>(args?: Prisma.SelectSubset<T, wp_termsFindFirstArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wp_terms that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_termsFindFirstOrThrowArgs} args - Arguments to find a Wp_terms
   * @example
   * // Get one Wp_terms
   * const wp_terms = await prisma.wp_terms.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends wp_termsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, wp_termsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Wp_terms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_termsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Wp_terms
   * const wp_terms = await prisma.wp_terms.findMany()
   * 
   * // Get first 10 Wp_terms
   * const wp_terms = await prisma.wp_terms.findMany({ take: 10 })
   * 
   * // Only select the `term_id`
   * const wp_termsWithTerm_idOnly = await prisma.wp_terms.findMany({ select: { term_id: true } })
   * 
   */
  findMany<T extends wp_termsFindManyArgs>(args?: Prisma.SelectSubset<T, wp_termsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Wp_terms.
   * @param {wp_termsCreateArgs} args - Arguments to create a Wp_terms.
   * @example
   * // Create one Wp_terms
   * const Wp_terms = await prisma.wp_terms.create({
   *   data: {
   *     // ... data to create a Wp_terms
   *   }
   * })
   * 
   */
  create<T extends wp_termsCreateArgs>(args: Prisma.SelectSubset<T, wp_termsCreateArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Wp_terms.
   * @param {wp_termsCreateManyArgs} args - Arguments to create many Wp_terms.
   * @example
   * // Create many Wp_terms
   * const wp_terms = await prisma.wp_terms.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends wp_termsCreateManyArgs>(args?: Prisma.SelectSubset<T, wp_termsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Wp_terms and returns the data saved in the database.
   * @param {wp_termsCreateManyAndReturnArgs} args - Arguments to create many Wp_terms.
   * @example
   * // Create many Wp_terms
   * const wp_terms = await prisma.wp_terms.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Wp_terms and only return the `term_id`
   * const wp_termsWithTerm_idOnly = await prisma.wp_terms.createManyAndReturn({
   *   select: { term_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends wp_termsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, wp_termsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Wp_terms.
   * @param {wp_termsDeleteArgs} args - Arguments to delete one Wp_terms.
   * @example
   * // Delete one Wp_terms
   * const Wp_terms = await prisma.wp_terms.delete({
   *   where: {
   *     // ... filter to delete one Wp_terms
   *   }
   * })
   * 
   */
  delete<T extends wp_termsDeleteArgs>(args: Prisma.SelectSubset<T, wp_termsDeleteArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Wp_terms.
   * @param {wp_termsUpdateArgs} args - Arguments to update one Wp_terms.
   * @example
   * // Update one Wp_terms
   * const wp_terms = await prisma.wp_terms.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends wp_termsUpdateArgs>(args: Prisma.SelectSubset<T, wp_termsUpdateArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Wp_terms.
   * @param {wp_termsDeleteManyArgs} args - Arguments to filter Wp_terms to delete.
   * @example
   * // Delete a few Wp_terms
   * const { count } = await prisma.wp_terms.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends wp_termsDeleteManyArgs>(args?: Prisma.SelectSubset<T, wp_termsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_termsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Wp_terms
   * const wp_terms = await prisma.wp_terms.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends wp_termsUpdateManyArgs>(args: Prisma.SelectSubset<T, wp_termsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wp_terms and returns the data updated in the database.
   * @param {wp_termsUpdateManyAndReturnArgs} args - Arguments to update many Wp_terms.
   * @example
   * // Update many Wp_terms
   * const wp_terms = await prisma.wp_terms.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Wp_terms and only return the `term_id`
   * const wp_termsWithTerm_idOnly = await prisma.wp_terms.updateManyAndReturn({
   *   select: { term_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends wp_termsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, wp_termsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Wp_terms.
   * @param {wp_termsUpsertArgs} args - Arguments to update or create a Wp_terms.
   * @example
   * // Update or create a Wp_terms
   * const wp_terms = await prisma.wp_terms.upsert({
   *   create: {
   *     // ... data to create a Wp_terms
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Wp_terms we want to update
   *   }
   * })
   */
  upsert<T extends wp_termsUpsertArgs>(args: Prisma.SelectSubset<T, wp_termsUpsertArgs<ExtArgs>>): Prisma.Prisma__wp_termsClient<runtime.Types.Result.GetResult<Prisma.$wp_termsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Wp_terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_termsCountArgs} args - Arguments to filter Wp_terms to count.
   * @example
   * // Count the number of Wp_terms
   * const count = await prisma.wp_terms.count({
   *   where: {
   *     // ... the filter for the Wp_terms we want to count
   *   }
   * })
  **/
  count<T extends wp_termsCountArgs>(
    args?: Prisma.Subset<T, wp_termsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Wp_termsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Wp_terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Wp_termsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Wp_termsAggregateArgs>(args: Prisma.Subset<T, Wp_termsAggregateArgs>): Prisma.PrismaPromise<GetWp_termsAggregateType<T>>

  /**
   * Group by Wp_terms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {wp_termsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends wp_termsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: wp_termsGroupByArgs['orderBy'] }
      : { orderBy?: wp_termsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, wp_termsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWp_termsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the wp_terms model
 */
readonly fields: wp_termsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for wp_terms.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__wp_termsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the wp_terms model
 */
export interface wp_termsFieldRefs {
  readonly term_id: Prisma.FieldRef<"wp_terms", 'BigInt'>
  readonly name: Prisma.FieldRef<"wp_terms", 'String'>
  readonly slug: Prisma.FieldRef<"wp_terms", 'String'>
  readonly term_group: Prisma.FieldRef<"wp_terms", 'BigInt'>
}
    

// Custom InputTypes
/**
 * wp_terms findUnique
 */
export type wp_termsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * Filter, which wp_terms to fetch.
   */
  where: Prisma.wp_termsWhereUniqueInput
}

/**
 * wp_terms findUniqueOrThrow
 */
export type wp_termsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * Filter, which wp_terms to fetch.
   */
  where: Prisma.wp_termsWhereUniqueInput
}

/**
 * wp_terms findFirst
 */
export type wp_termsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * Filter, which wp_terms to fetch.
   */
  where?: Prisma.wp_termsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_terms to fetch.
   */
  orderBy?: Prisma.wp_termsOrderByWithRelationInput | Prisma.wp_termsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_terms.
   */
  cursor?: Prisma.wp_termsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_terms.
   */
  distinct?: Prisma.Wp_termsScalarFieldEnum | Prisma.Wp_termsScalarFieldEnum[]
}

/**
 * wp_terms findFirstOrThrow
 */
export type wp_termsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * Filter, which wp_terms to fetch.
   */
  where?: Prisma.wp_termsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_terms to fetch.
   */
  orderBy?: Prisma.wp_termsOrderByWithRelationInput | Prisma.wp_termsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for wp_terms.
   */
  cursor?: Prisma.wp_termsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_terms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of wp_terms.
   */
  distinct?: Prisma.Wp_termsScalarFieldEnum | Prisma.Wp_termsScalarFieldEnum[]
}

/**
 * wp_terms findMany
 */
export type wp_termsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * Filter, which wp_terms to fetch.
   */
  where?: Prisma.wp_termsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of wp_terms to fetch.
   */
  orderBy?: Prisma.wp_termsOrderByWithRelationInput | Prisma.wp_termsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing wp_terms.
   */
  cursor?: Prisma.wp_termsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` wp_terms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` wp_terms.
   */
  skip?: number
  distinct?: Prisma.Wp_termsScalarFieldEnum | Prisma.Wp_termsScalarFieldEnum[]
}

/**
 * wp_terms create
 */
export type wp_termsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * The data needed to create a wp_terms.
   */
  data?: Prisma.XOR<Prisma.wp_termsCreateInput, Prisma.wp_termsUncheckedCreateInput>
}

/**
 * wp_terms createMany
 */
export type wp_termsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many wp_terms.
   */
  data: Prisma.wp_termsCreateManyInput | Prisma.wp_termsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_terms createManyAndReturn
 */
export type wp_termsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * The data used to create many wp_terms.
   */
  data: Prisma.wp_termsCreateManyInput | Prisma.wp_termsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * wp_terms update
 */
export type wp_termsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * The data needed to update a wp_terms.
   */
  data: Prisma.XOR<Prisma.wp_termsUpdateInput, Prisma.wp_termsUncheckedUpdateInput>
  /**
   * Choose, which wp_terms to update.
   */
  where: Prisma.wp_termsWhereUniqueInput
}

/**
 * wp_terms updateMany
 */
export type wp_termsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update wp_terms.
   */
  data: Prisma.XOR<Prisma.wp_termsUpdateManyMutationInput, Prisma.wp_termsUncheckedUpdateManyInput>
  /**
   * Filter which wp_terms to update
   */
  where?: Prisma.wp_termsWhereInput
  /**
   * Limit how many wp_terms to update.
   */
  limit?: number
}

/**
 * wp_terms updateManyAndReturn
 */
export type wp_termsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * The data used to update wp_terms.
   */
  data: Prisma.XOR<Prisma.wp_termsUpdateManyMutationInput, Prisma.wp_termsUncheckedUpdateManyInput>
  /**
   * Filter which wp_terms to update
   */
  where?: Prisma.wp_termsWhereInput
  /**
   * Limit how many wp_terms to update.
   */
  limit?: number
}

/**
 * wp_terms upsert
 */
export type wp_termsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * The filter to search for the wp_terms to update in case it exists.
   */
  where: Prisma.wp_termsWhereUniqueInput
  /**
   * In case the wp_terms found by the `where` argument doesn't exist, create a new wp_terms with this data.
   */
  create: Prisma.XOR<Prisma.wp_termsCreateInput, Prisma.wp_termsUncheckedCreateInput>
  /**
   * In case the wp_terms was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.wp_termsUpdateInput, Prisma.wp_termsUncheckedUpdateInput>
}

/**
 * wp_terms delete
 */
export type wp_termsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
  /**
   * Filter which wp_terms to delete.
   */
  where: Prisma.wp_termsWhereUniqueInput
}

/**
 * wp_terms deleteMany
 */
export type wp_termsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which wp_terms to delete
   */
  where?: Prisma.wp_termsWhereInput
  /**
   * Limit how many wp_terms to delete.
   */
  limit?: number
}

/**
 * wp_terms without action
 */
export type wp_termsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the wp_terms
   */
  select?: Prisma.wp_termsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the wp_terms
   */
  omit?: Prisma.wp_termsOmit<ExtArgs> | null
}
