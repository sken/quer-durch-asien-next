
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
export const prismaVersion: PrismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  captcha: 'captcha',
  color_to_image: 'color_to_image',
  colors: 'colors',
  diary: 'diary',
  galleries: 'galleries',
  gpstrack: 'gpstrack',
  images: 'images',
  keyword_to_image: 'keyword_to_image',
  keywords: 'keywords',
  wp_commentmeta: 'wp_commentmeta',
  wp_comments: 'wp_comments',
  wp_links: 'wp_links',
  wp_options: 'wp_options',
  wp_postmeta: 'wp_postmeta',
  wp_posts: 'wp_posts',
  wp_term_relationships: 'wp_term_relationships',
  wp_term_taxonomy: 'wp_term_taxonomy',
  wp_terms: 'wp_terms',
  wp_usermeta: 'wp_usermeta',
  wp_users: 'wp_users'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "captcha" | "color_to_image" | "colors" | "diary" | "galleries" | "gpstrack" | "images" | "keyword_to_image" | "keywords" | "wp_commentmeta" | "wp_comments" | "wp_links" | "wp_options" | "wp_postmeta" | "wp_posts" | "wp_term_relationships" | "wp_term_taxonomy" | "wp_terms" | "wp_usermeta" | "wp_users"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    captcha: {
      payload: Prisma.$captchaPayload<ExtArgs>
      fields: Prisma.captchaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.captchaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.captchaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>
        }
        findFirst: {
          args: Prisma.captchaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.captchaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>
        }
        findMany: {
          args: Prisma.captchaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>[]
        }
        create: {
          args: Prisma.captchaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>
        }
        createMany: {
          args: Prisma.captchaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.captchaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>[]
        }
        delete: {
          args: Prisma.captchaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>
        }
        update: {
          args: Prisma.captchaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>
        }
        deleteMany: {
          args: Prisma.captchaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.captchaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.captchaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>[]
        }
        upsert: {
          args: Prisma.captchaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$captchaPayload>
        }
        aggregate: {
          args: Prisma.CaptchaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCaptcha>
        }
        groupBy: {
          args: Prisma.captchaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CaptchaGroupByOutputType>[]
        }
        count: {
          args: Prisma.captchaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CaptchaCountAggregateOutputType> | number
        }
      }
    }
    color_to_image: {
      payload: Prisma.$color_to_imagePayload<ExtArgs>
      fields: Prisma.color_to_imageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.color_to_imageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.color_to_imageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>
        }
        findFirst: {
          args: Prisma.color_to_imageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.color_to_imageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>
        }
        findMany: {
          args: Prisma.color_to_imageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>[]
        }
        create: {
          args: Prisma.color_to_imageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>
        }
        createMany: {
          args: Prisma.color_to_imageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.color_to_imageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>[]
        }
        delete: {
          args: Prisma.color_to_imageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>
        }
        update: {
          args: Prisma.color_to_imageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>
        }
        deleteMany: {
          args: Prisma.color_to_imageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.color_to_imageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.color_to_imageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>[]
        }
        upsert: {
          args: Prisma.color_to_imageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$color_to_imagePayload>
        }
        aggregate: {
          args: Prisma.Color_to_imageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateColor_to_image>
        }
        groupBy: {
          args: Prisma.color_to_imageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Color_to_imageGroupByOutputType>[]
        }
        count: {
          args: Prisma.color_to_imageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Color_to_imageCountAggregateOutputType> | number
        }
      }
    }
    colors: {
      payload: Prisma.$colorsPayload<ExtArgs>
      fields: Prisma.colorsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.colorsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.colorsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>
        }
        findFirst: {
          args: Prisma.colorsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.colorsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>
        }
        findMany: {
          args: Prisma.colorsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>[]
        }
        create: {
          args: Prisma.colorsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>
        }
        createMany: {
          args: Prisma.colorsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.colorsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>[]
        }
        delete: {
          args: Prisma.colorsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>
        }
        update: {
          args: Prisma.colorsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>
        }
        deleteMany: {
          args: Prisma.colorsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.colorsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.colorsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>[]
        }
        upsert: {
          args: Prisma.colorsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$colorsPayload>
        }
        aggregate: {
          args: Prisma.ColorsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateColors>
        }
        groupBy: {
          args: Prisma.colorsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ColorsGroupByOutputType>[]
        }
        count: {
          args: Prisma.colorsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ColorsCountAggregateOutputType> | number
        }
      }
    }
    diary: {
      payload: Prisma.$diaryPayload<ExtArgs>
      fields: Prisma.diaryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.diaryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.diaryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>
        }
        findFirst: {
          args: Prisma.diaryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.diaryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>
        }
        findMany: {
          args: Prisma.diaryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>[]
        }
        create: {
          args: Prisma.diaryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>
        }
        createMany: {
          args: Prisma.diaryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.diaryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>[]
        }
        delete: {
          args: Prisma.diaryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>
        }
        update: {
          args: Prisma.diaryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>
        }
        deleteMany: {
          args: Prisma.diaryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.diaryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.diaryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>[]
        }
        upsert: {
          args: Prisma.diaryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$diaryPayload>
        }
        aggregate: {
          args: Prisma.DiaryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDiary>
        }
        groupBy: {
          args: Prisma.diaryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DiaryGroupByOutputType>[]
        }
        count: {
          args: Prisma.diaryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DiaryCountAggregateOutputType> | number
        }
      }
    }
    galleries: {
      payload: Prisma.$galleriesPayload<ExtArgs>
      fields: Prisma.galleriesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.galleriesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.galleriesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>
        }
        findFirst: {
          args: Prisma.galleriesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.galleriesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>
        }
        findMany: {
          args: Prisma.galleriesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>[]
        }
        create: {
          args: Prisma.galleriesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>
        }
        createMany: {
          args: Prisma.galleriesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.galleriesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>[]
        }
        delete: {
          args: Prisma.galleriesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>
        }
        update: {
          args: Prisma.galleriesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>
        }
        deleteMany: {
          args: Prisma.galleriesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.galleriesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.galleriesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>[]
        }
        upsert: {
          args: Prisma.galleriesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$galleriesPayload>
        }
        aggregate: {
          args: Prisma.GalleriesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGalleries>
        }
        groupBy: {
          args: Prisma.galleriesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GalleriesGroupByOutputType>[]
        }
        count: {
          args: Prisma.galleriesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GalleriesCountAggregateOutputType> | number
        }
      }
    }
    gpstrack: {
      payload: Prisma.$gpstrackPayload<ExtArgs>
      fields: Prisma.gpstrackFieldRefs
      operations: {
        findUnique: {
          args: Prisma.gpstrackFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.gpstrackFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>
        }
        findFirst: {
          args: Prisma.gpstrackFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.gpstrackFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>
        }
        findMany: {
          args: Prisma.gpstrackFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>[]
        }
        create: {
          args: Prisma.gpstrackCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>
        }
        createMany: {
          args: Prisma.gpstrackCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.gpstrackCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>[]
        }
        delete: {
          args: Prisma.gpstrackDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>
        }
        update: {
          args: Prisma.gpstrackUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>
        }
        deleteMany: {
          args: Prisma.gpstrackDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.gpstrackUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.gpstrackUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>[]
        }
        upsert: {
          args: Prisma.gpstrackUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gpstrackPayload>
        }
        aggregate: {
          args: Prisma.GpstrackAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGpstrack>
        }
        groupBy: {
          args: Prisma.gpstrackGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GpstrackGroupByOutputType>[]
        }
        count: {
          args: Prisma.gpstrackCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GpstrackCountAggregateOutputType> | number
        }
      }
    }
    images: {
      payload: Prisma.$imagesPayload<ExtArgs>
      fields: Prisma.imagesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.imagesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.imagesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>
        }
        findFirst: {
          args: Prisma.imagesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.imagesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>
        }
        findMany: {
          args: Prisma.imagesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>[]
        }
        create: {
          args: Prisma.imagesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>
        }
        createMany: {
          args: Prisma.imagesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.imagesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>[]
        }
        delete: {
          args: Prisma.imagesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>
        }
        update: {
          args: Prisma.imagesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>
        }
        deleteMany: {
          args: Prisma.imagesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.imagesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.imagesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>[]
        }
        upsert: {
          args: Prisma.imagesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$imagesPayload>
        }
        aggregate: {
          args: Prisma.ImagesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateImages>
        }
        groupBy: {
          args: Prisma.imagesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ImagesGroupByOutputType>[]
        }
        count: {
          args: Prisma.imagesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ImagesCountAggregateOutputType> | number
        }
      }
    }
    keyword_to_image: {
      payload: Prisma.$keyword_to_imagePayload<ExtArgs>
      fields: Prisma.keyword_to_imageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.keyword_to_imageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.keyword_to_imageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>
        }
        findFirst: {
          args: Prisma.keyword_to_imageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.keyword_to_imageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>
        }
        findMany: {
          args: Prisma.keyword_to_imageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>[]
        }
        create: {
          args: Prisma.keyword_to_imageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>
        }
        createMany: {
          args: Prisma.keyword_to_imageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.keyword_to_imageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>[]
        }
        delete: {
          args: Prisma.keyword_to_imageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>
        }
        update: {
          args: Prisma.keyword_to_imageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>
        }
        deleteMany: {
          args: Prisma.keyword_to_imageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.keyword_to_imageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.keyword_to_imageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>[]
        }
        upsert: {
          args: Prisma.keyword_to_imageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keyword_to_imagePayload>
        }
        aggregate: {
          args: Prisma.Keyword_to_imageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateKeyword_to_image>
        }
        groupBy: {
          args: Prisma.keyword_to_imageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Keyword_to_imageGroupByOutputType>[]
        }
        count: {
          args: Prisma.keyword_to_imageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Keyword_to_imageCountAggregateOutputType> | number
        }
      }
    }
    keywords: {
      payload: Prisma.$keywordsPayload<ExtArgs>
      fields: Prisma.keywordsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.keywordsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.keywordsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>
        }
        findFirst: {
          args: Prisma.keywordsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.keywordsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>
        }
        findMany: {
          args: Prisma.keywordsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>[]
        }
        create: {
          args: Prisma.keywordsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>
        }
        createMany: {
          args: Prisma.keywordsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.keywordsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>[]
        }
        delete: {
          args: Prisma.keywordsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>
        }
        update: {
          args: Prisma.keywordsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>
        }
        deleteMany: {
          args: Prisma.keywordsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.keywordsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.keywordsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>[]
        }
        upsert: {
          args: Prisma.keywordsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$keywordsPayload>
        }
        aggregate: {
          args: Prisma.KeywordsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateKeywords>
        }
        groupBy: {
          args: Prisma.keywordsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KeywordsGroupByOutputType>[]
        }
        count: {
          args: Prisma.keywordsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KeywordsCountAggregateOutputType> | number
        }
      }
    }
    wp_commentmeta: {
      payload: Prisma.$wp_commentmetaPayload<ExtArgs>
      fields: Prisma.wp_commentmetaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_commentmetaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_commentmetaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>
        }
        findFirst: {
          args: Prisma.wp_commentmetaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_commentmetaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>
        }
        findMany: {
          args: Prisma.wp_commentmetaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>[]
        }
        create: {
          args: Prisma.wp_commentmetaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>
        }
        createMany: {
          args: Prisma.wp_commentmetaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_commentmetaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>[]
        }
        delete: {
          args: Prisma.wp_commentmetaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>
        }
        update: {
          args: Prisma.wp_commentmetaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>
        }
        deleteMany: {
          args: Prisma.wp_commentmetaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_commentmetaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_commentmetaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>[]
        }
        upsert: {
          args: Prisma.wp_commentmetaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentmetaPayload>
        }
        aggregate: {
          args: Prisma.Wp_commentmetaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_commentmeta>
        }
        groupBy: {
          args: Prisma.wp_commentmetaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_commentmetaGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_commentmetaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_commentmetaCountAggregateOutputType> | number
        }
      }
    }
    wp_comments: {
      payload: Prisma.$wp_commentsPayload<ExtArgs>
      fields: Prisma.wp_commentsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_commentsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_commentsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>
        }
        findFirst: {
          args: Prisma.wp_commentsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_commentsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>
        }
        findMany: {
          args: Prisma.wp_commentsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>[]
        }
        create: {
          args: Prisma.wp_commentsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>
        }
        createMany: {
          args: Prisma.wp_commentsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_commentsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>[]
        }
        delete: {
          args: Prisma.wp_commentsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>
        }
        update: {
          args: Prisma.wp_commentsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>
        }
        deleteMany: {
          args: Prisma.wp_commentsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_commentsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_commentsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>[]
        }
        upsert: {
          args: Prisma.wp_commentsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_commentsPayload>
        }
        aggregate: {
          args: Prisma.Wp_commentsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_comments>
        }
        groupBy: {
          args: Prisma.wp_commentsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_commentsGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_commentsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_commentsCountAggregateOutputType> | number
        }
      }
    }
    wp_links: {
      payload: Prisma.$wp_linksPayload<ExtArgs>
      fields: Prisma.wp_linksFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_linksFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_linksFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>
        }
        findFirst: {
          args: Prisma.wp_linksFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_linksFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>
        }
        findMany: {
          args: Prisma.wp_linksFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>[]
        }
        create: {
          args: Prisma.wp_linksCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>
        }
        createMany: {
          args: Prisma.wp_linksCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_linksCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>[]
        }
        delete: {
          args: Prisma.wp_linksDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>
        }
        update: {
          args: Prisma.wp_linksUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>
        }
        deleteMany: {
          args: Prisma.wp_linksDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_linksUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_linksUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>[]
        }
        upsert: {
          args: Prisma.wp_linksUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_linksPayload>
        }
        aggregate: {
          args: Prisma.Wp_linksAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_links>
        }
        groupBy: {
          args: Prisma.wp_linksGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_linksGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_linksCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_linksCountAggregateOutputType> | number
        }
      }
    }
    wp_options: {
      payload: Prisma.$wp_optionsPayload<ExtArgs>
      fields: Prisma.wp_optionsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_optionsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_optionsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>
        }
        findFirst: {
          args: Prisma.wp_optionsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_optionsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>
        }
        findMany: {
          args: Prisma.wp_optionsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>[]
        }
        create: {
          args: Prisma.wp_optionsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>
        }
        createMany: {
          args: Prisma.wp_optionsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_optionsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>[]
        }
        delete: {
          args: Prisma.wp_optionsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>
        }
        update: {
          args: Prisma.wp_optionsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>
        }
        deleteMany: {
          args: Prisma.wp_optionsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_optionsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_optionsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>[]
        }
        upsert: {
          args: Prisma.wp_optionsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_optionsPayload>
        }
        aggregate: {
          args: Prisma.Wp_optionsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_options>
        }
        groupBy: {
          args: Prisma.wp_optionsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_optionsGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_optionsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_optionsCountAggregateOutputType> | number
        }
      }
    }
    wp_postmeta: {
      payload: Prisma.$wp_postmetaPayload<ExtArgs>
      fields: Prisma.wp_postmetaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_postmetaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_postmetaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>
        }
        findFirst: {
          args: Prisma.wp_postmetaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_postmetaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>
        }
        findMany: {
          args: Prisma.wp_postmetaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>[]
        }
        create: {
          args: Prisma.wp_postmetaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>
        }
        createMany: {
          args: Prisma.wp_postmetaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_postmetaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>[]
        }
        delete: {
          args: Prisma.wp_postmetaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>
        }
        update: {
          args: Prisma.wp_postmetaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>
        }
        deleteMany: {
          args: Prisma.wp_postmetaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_postmetaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_postmetaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>[]
        }
        upsert: {
          args: Prisma.wp_postmetaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postmetaPayload>
        }
        aggregate: {
          args: Prisma.Wp_postmetaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_postmeta>
        }
        groupBy: {
          args: Prisma.wp_postmetaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_postmetaGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_postmetaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_postmetaCountAggregateOutputType> | number
        }
      }
    }
    wp_posts: {
      payload: Prisma.$wp_postsPayload<ExtArgs>
      fields: Prisma.wp_postsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_postsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_postsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>
        }
        findFirst: {
          args: Prisma.wp_postsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_postsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>
        }
        findMany: {
          args: Prisma.wp_postsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>[]
        }
        create: {
          args: Prisma.wp_postsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>
        }
        createMany: {
          args: Prisma.wp_postsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_postsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>[]
        }
        delete: {
          args: Prisma.wp_postsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>
        }
        update: {
          args: Prisma.wp_postsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>
        }
        deleteMany: {
          args: Prisma.wp_postsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_postsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_postsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>[]
        }
        upsert: {
          args: Prisma.wp_postsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_postsPayload>
        }
        aggregate: {
          args: Prisma.Wp_postsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_posts>
        }
        groupBy: {
          args: Prisma.wp_postsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_postsGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_postsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_postsCountAggregateOutputType> | number
        }
      }
    }
    wp_term_relationships: {
      payload: Prisma.$wp_term_relationshipsPayload<ExtArgs>
      fields: Prisma.wp_term_relationshipsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_term_relationshipsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_term_relationshipsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>
        }
        findFirst: {
          args: Prisma.wp_term_relationshipsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_term_relationshipsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>
        }
        findMany: {
          args: Prisma.wp_term_relationshipsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>[]
        }
        create: {
          args: Prisma.wp_term_relationshipsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>
        }
        createMany: {
          args: Prisma.wp_term_relationshipsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_term_relationshipsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>[]
        }
        delete: {
          args: Prisma.wp_term_relationshipsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>
        }
        update: {
          args: Prisma.wp_term_relationshipsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>
        }
        deleteMany: {
          args: Prisma.wp_term_relationshipsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_term_relationshipsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_term_relationshipsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>[]
        }
        upsert: {
          args: Prisma.wp_term_relationshipsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_relationshipsPayload>
        }
        aggregate: {
          args: Prisma.Wp_term_relationshipsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_term_relationships>
        }
        groupBy: {
          args: Prisma.wp_term_relationshipsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_term_relationshipsGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_term_relationshipsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_term_relationshipsCountAggregateOutputType> | number
        }
      }
    }
    wp_term_taxonomy: {
      payload: Prisma.$wp_term_taxonomyPayload<ExtArgs>
      fields: Prisma.wp_term_taxonomyFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_term_taxonomyFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_term_taxonomyFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>
        }
        findFirst: {
          args: Prisma.wp_term_taxonomyFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_term_taxonomyFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>
        }
        findMany: {
          args: Prisma.wp_term_taxonomyFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>[]
        }
        create: {
          args: Prisma.wp_term_taxonomyCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>
        }
        createMany: {
          args: Prisma.wp_term_taxonomyCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_term_taxonomyCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>[]
        }
        delete: {
          args: Prisma.wp_term_taxonomyDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>
        }
        update: {
          args: Prisma.wp_term_taxonomyUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>
        }
        deleteMany: {
          args: Prisma.wp_term_taxonomyDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_term_taxonomyUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_term_taxonomyUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>[]
        }
        upsert: {
          args: Prisma.wp_term_taxonomyUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_term_taxonomyPayload>
        }
        aggregate: {
          args: Prisma.Wp_term_taxonomyAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_term_taxonomy>
        }
        groupBy: {
          args: Prisma.wp_term_taxonomyGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_term_taxonomyGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_term_taxonomyCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_term_taxonomyCountAggregateOutputType> | number
        }
      }
    }
    wp_terms: {
      payload: Prisma.$wp_termsPayload<ExtArgs>
      fields: Prisma.wp_termsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_termsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_termsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>
        }
        findFirst: {
          args: Prisma.wp_termsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_termsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>
        }
        findMany: {
          args: Prisma.wp_termsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>[]
        }
        create: {
          args: Prisma.wp_termsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>
        }
        createMany: {
          args: Prisma.wp_termsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_termsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>[]
        }
        delete: {
          args: Prisma.wp_termsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>
        }
        update: {
          args: Prisma.wp_termsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>
        }
        deleteMany: {
          args: Prisma.wp_termsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_termsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_termsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>[]
        }
        upsert: {
          args: Prisma.wp_termsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_termsPayload>
        }
        aggregate: {
          args: Prisma.Wp_termsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_terms>
        }
        groupBy: {
          args: Prisma.wp_termsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_termsGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_termsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_termsCountAggregateOutputType> | number
        }
      }
    }
    wp_usermeta: {
      payload: Prisma.$wp_usermetaPayload<ExtArgs>
      fields: Prisma.wp_usermetaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_usermetaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_usermetaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>
        }
        findFirst: {
          args: Prisma.wp_usermetaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_usermetaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>
        }
        findMany: {
          args: Prisma.wp_usermetaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>[]
        }
        create: {
          args: Prisma.wp_usermetaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>
        }
        createMany: {
          args: Prisma.wp_usermetaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_usermetaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>[]
        }
        delete: {
          args: Prisma.wp_usermetaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>
        }
        update: {
          args: Prisma.wp_usermetaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>
        }
        deleteMany: {
          args: Prisma.wp_usermetaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_usermetaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_usermetaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>[]
        }
        upsert: {
          args: Prisma.wp_usermetaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usermetaPayload>
        }
        aggregate: {
          args: Prisma.Wp_usermetaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_usermeta>
        }
        groupBy: {
          args: Prisma.wp_usermetaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_usermetaGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_usermetaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_usermetaCountAggregateOutputType> | number
        }
      }
    }
    wp_users: {
      payload: Prisma.$wp_usersPayload<ExtArgs>
      fields: Prisma.wp_usersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.wp_usersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.wp_usersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>
        }
        findFirst: {
          args: Prisma.wp_usersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.wp_usersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>
        }
        findMany: {
          args: Prisma.wp_usersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>[]
        }
        create: {
          args: Prisma.wp_usersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>
        }
        createMany: {
          args: Prisma.wp_usersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.wp_usersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>[]
        }
        delete: {
          args: Prisma.wp_usersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>
        }
        update: {
          args: Prisma.wp_usersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>
        }
        deleteMany: {
          args: Prisma.wp_usersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.wp_usersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.wp_usersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>[]
        }
        upsert: {
          args: Prisma.wp_usersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$wp_usersPayload>
        }
        aggregate: {
          args: Prisma.Wp_usersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWp_users>
        }
        groupBy: {
          args: Prisma.wp_usersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_usersGroupByOutputType>[]
        }
        count: {
          args: Prisma.wp_usersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Wp_usersCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const CaptchaScalarFieldEnum = {
  captcha_id: 'captcha_id',
  captcha_time: 'captcha_time',
  ip_address: 'ip_address',
  word: 'word'
} as const

export type CaptchaScalarFieldEnum = (typeof CaptchaScalarFieldEnum)[keyof typeof CaptchaScalarFieldEnum]


export const Color_to_imageScalarFieldEnum = {
  image_id: 'image_id',
  color_id: 'color_id'
} as const

export type Color_to_imageScalarFieldEnum = (typeof Color_to_imageScalarFieldEnum)[keyof typeof Color_to_imageScalarFieldEnum]


export const ColorsScalarFieldEnum = {
  id: 'id',
  hue: 'hue',
  saturation: 'saturation',
  value: 'value',
  red: 'red',
  green: 'green',
  blue: 'blue',
  hex: 'hex',
  websafe: 'websafe'
} as const

export type ColorsScalarFieldEnum = (typeof ColorsScalarFieldEnum)[keyof typeof ColorsScalarFieldEnum]


export const DiaryScalarFieldEnum = {
  ID: 'ID',
  post_date: 'post_date',
  post_content: 'post_content',
  post_title: 'post_title',
  post_name: 'post_name'
} as const

export type DiaryScalarFieldEnum = (typeof DiaryScalarFieldEnum)[keyof typeof DiaryScalarFieldEnum]


export const GalleriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  galdesc: 'galdesc',
  previewpic: 'previewpic'
} as const

export type GalleriesScalarFieldEnum = (typeof GalleriesScalarFieldEnum)[keyof typeof GalleriesScalarFieldEnum]


export const GpstrackScalarFieldEnum = {
  id: 'id',
  data: 'data',
  utc: 'utc',
  lat: 'lat',
  ns: 'ns',
  lon: 'lon',
  ew: 'ew',
  altitude: 'altitude',
  countrycode: 'countrycode',
  geoidal: 'geoidal',
  spd_over_grnd: 'spd_over_grnd',
  spdkmph: 'spdkmph',
  spdknts: 'spdknts',
  deg_compass: 'deg_compass',
  magnetic_var: 'magnetic_var',
  gps_quality: 'gps_quality',
  dgps: 'dgps',
  dgps_stat: 'dgps_stat',
  hdp: 'hdp',
  pdop: 'pdop',
  hdop: 'hdop',
  vdop: 'vdop',
  sat1: 'sat1',
  sat2: 'sat2',
  sat3: 'sat3',
  sat4: 'sat4',
  sat5: 'sat5',
  sat6: 'sat6',
  sat7: 'sat7',
  sat8: 'sat8',
  sat9: 'sat9',
  sat10: 'sat10',
  sat11: 'sat11',
  sat12: 'sat12'
} as const

export type GpstrackScalarFieldEnum = (typeof GpstrackScalarFieldEnum)[keyof typeof GpstrackScalarFieldEnum]


export const ImagesScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  title: 'title',
  title_number: 'title_number',
  desc: 'desc',
  country: 'country',
  copyright: 'copyright',
  commentson: 'commentson',
  show: 'show',
  date: 'date',
  height: 'height',
  width: 'width',
  thumb_x: 'thumb_x',
  thumb_y: 'thumb_y',
  thumb_w: 'thumb_w',
  thumb_h: 'thumb_h',
  mtime: 'mtime',
  hitcounter: 'hitcounter',
  EXIFValid: 'EXIFValid',
  EXIFOrientation: 'EXIFOrientation',
  EXIFMake: 'EXIFMake',
  EXIFModel: 'EXIFModel',
  EXIFExposureTime: 'EXIFExposureTime',
  EXIFFNumber: 'EXIFFNumber',
  EXIFFocalLength: 'EXIFFocalLength',
  EXIFFocalLength35mm: 'EXIFFocalLength35mm',
  EXIFISOSpeedRatings: 'EXIFISOSpeedRatings',
  EXIFDateTimeOriginal: 'EXIFDateTimeOriginal',
  EXIFExposureBiasValue: 'EXIFExposureBiasValue',
  EXIFMeteringMode: 'EXIFMeteringMode',
  EXIFFlash: 'EXIFFlash',
  EXIFImageWidth: 'EXIFImageWidth',
  EXIFImageHeight: 'EXIFImageHeight',
  EXIFContrast: 'EXIFContrast',
  EXIFSharpness: 'EXIFSharpness',
  EXIFSaturation: 'EXIFSaturation',
  EXIFWhiteBalance: 'EXIFWhiteBalance',
  EXIFSubjectDistance: 'EXIFSubjectDistance',
  EXIFGPSLatitude: 'EXIFGPSLatitude',
  EXIFGPSLatitudeRef: 'EXIFGPSLatitudeRef',
  EXIFGPSLongitude: 'EXIFGPSLongitude',
  EXIFGPSLongitudeRef: 'EXIFGPSLongitudeRef',
  EXIFGPSAltitude: 'EXIFGPSAltitude',
  EXIFGPSAltitudeRef: 'EXIFGPSAltitudeRef',
  custom_data: 'custom_data',
  hue: 'hue',
  saturation: 'saturation',
  value: 'value',
  rgb: 'rgb',
  created_on: 'created_on'
} as const

export type ImagesScalarFieldEnum = (typeof ImagesScalarFieldEnum)[keyof typeof ImagesScalarFieldEnum]


export const Keyword_to_imageScalarFieldEnum = {
  image_id: 'image_id',
  keyword_id: 'keyword_id'
} as const

export type Keyword_to_imageScalarFieldEnum = (typeof Keyword_to_imageScalarFieldEnum)[keyof typeof Keyword_to_imageScalarFieldEnum]


export const KeywordsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug'
} as const

export type KeywordsScalarFieldEnum = (typeof KeywordsScalarFieldEnum)[keyof typeof KeywordsScalarFieldEnum]


export const Wp_commentmetaScalarFieldEnum = {
  meta_id: 'meta_id',
  comment_id: 'comment_id',
  meta_key: 'meta_key',
  meta_value: 'meta_value'
} as const

export type Wp_commentmetaScalarFieldEnum = (typeof Wp_commentmetaScalarFieldEnum)[keyof typeof Wp_commentmetaScalarFieldEnum]


export const Wp_commentsScalarFieldEnum = {
  comment_ID: 'comment_ID',
  comment_post_ID: 'comment_post_ID',
  comment_author: 'comment_author',
  comment_author_email: 'comment_author_email',
  comment_author_url: 'comment_author_url',
  comment_author_IP: 'comment_author_IP',
  comment_date: 'comment_date',
  comment_date_gmt: 'comment_date_gmt',
  comment_content: 'comment_content',
  comment_karma: 'comment_karma',
  comment_approved: 'comment_approved',
  comment_agent: 'comment_agent',
  comment_type: 'comment_type',
  comment_parent: 'comment_parent',
  user_id: 'user_id'
} as const

export type Wp_commentsScalarFieldEnum = (typeof Wp_commentsScalarFieldEnum)[keyof typeof Wp_commentsScalarFieldEnum]


export const Wp_linksScalarFieldEnum = {
  link_id: 'link_id',
  link_url: 'link_url',
  link_name: 'link_name',
  link_image: 'link_image',
  link_target: 'link_target',
  link_description: 'link_description',
  link_visible: 'link_visible',
  link_owner: 'link_owner',
  link_rating: 'link_rating',
  link_updated: 'link_updated',
  link_rel: 'link_rel',
  link_notes: 'link_notes',
  link_rss: 'link_rss'
} as const

export type Wp_linksScalarFieldEnum = (typeof Wp_linksScalarFieldEnum)[keyof typeof Wp_linksScalarFieldEnum]


export const Wp_optionsScalarFieldEnum = {
  option_id: 'option_id',
  blog_id: 'blog_id',
  option_name: 'option_name',
  option_value: 'option_value',
  autoload: 'autoload'
} as const

export type Wp_optionsScalarFieldEnum = (typeof Wp_optionsScalarFieldEnum)[keyof typeof Wp_optionsScalarFieldEnum]


export const Wp_postmetaScalarFieldEnum = {
  meta_id: 'meta_id',
  post_id: 'post_id',
  meta_key: 'meta_key',
  meta_value: 'meta_value'
} as const

export type Wp_postmetaScalarFieldEnum = (typeof Wp_postmetaScalarFieldEnum)[keyof typeof Wp_postmetaScalarFieldEnum]


export const Wp_postsScalarFieldEnum = {
  ID: 'ID',
  post_author: 'post_author',
  post_date: 'post_date',
  post_date_gmt: 'post_date_gmt',
  post_content: 'post_content',
  post_title: 'post_title',
  post_excerpt: 'post_excerpt',
  post_status: 'post_status',
  comment_status: 'comment_status',
  ping_status: 'ping_status',
  post_password: 'post_password',
  post_name: 'post_name',
  to_ping: 'to_ping',
  pinged: 'pinged',
  post_modified: 'post_modified',
  post_modified_gmt: 'post_modified_gmt',
  post_content_filtered: 'post_content_filtered',
  post_parent: 'post_parent',
  guid: 'guid',
  menu_order: 'menu_order',
  post_type: 'post_type',
  post_mime_type: 'post_mime_type',
  comment_count: 'comment_count'
} as const

export type Wp_postsScalarFieldEnum = (typeof Wp_postsScalarFieldEnum)[keyof typeof Wp_postsScalarFieldEnum]


export const Wp_term_relationshipsScalarFieldEnum = {
  object_id: 'object_id',
  term_taxonomy_id: 'term_taxonomy_id',
  term_order: 'term_order'
} as const

export type Wp_term_relationshipsScalarFieldEnum = (typeof Wp_term_relationshipsScalarFieldEnum)[keyof typeof Wp_term_relationshipsScalarFieldEnum]


export const Wp_term_taxonomyScalarFieldEnum = {
  term_taxonomy_id: 'term_taxonomy_id',
  term_id: 'term_id',
  taxonomy: 'taxonomy',
  description: 'description',
  parent: 'parent',
  count: 'count'
} as const

export type Wp_term_taxonomyScalarFieldEnum = (typeof Wp_term_taxonomyScalarFieldEnum)[keyof typeof Wp_term_taxonomyScalarFieldEnum]


export const Wp_termsScalarFieldEnum = {
  term_id: 'term_id',
  name: 'name',
  slug: 'slug',
  term_group: 'term_group'
} as const

export type Wp_termsScalarFieldEnum = (typeof Wp_termsScalarFieldEnum)[keyof typeof Wp_termsScalarFieldEnum]


export const Wp_usermetaScalarFieldEnum = {
  umeta_id: 'umeta_id',
  user_id: 'user_id',
  meta_key: 'meta_key',
  meta_value: 'meta_value'
} as const

export type Wp_usermetaScalarFieldEnum = (typeof Wp_usermetaScalarFieldEnum)[keyof typeof Wp_usermetaScalarFieldEnum]


export const Wp_usersScalarFieldEnum = {
  ID: 'ID',
  user_login: 'user_login',
  user_pass: 'user_pass',
  user_nicename: 'user_nicename',
  user_email: 'user_email',
  user_url: 'user_url',
  user_registered: 'user_registered',
  user_activation_key: 'user_activation_key',
  user_status: 'user_status',
  display_name: 'display_name'
} as const

export type Wp_usersScalarFieldEnum = (typeof Wp_usersScalarFieldEnum)[keyof typeof Wp_usersScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'BigInt'
 */
export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


/**
 * Reference to a field of type 'BigInt[]'
 */
export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  captcha?: Prisma.captchaOmit
  color_to_image?: Prisma.color_to_imageOmit
  colors?: Prisma.colorsOmit
  diary?: Prisma.diaryOmit
  galleries?: Prisma.galleriesOmit
  gpstrack?: Prisma.gpstrackOmit
  images?: Prisma.imagesOmit
  keyword_to_image?: Prisma.keyword_to_imageOmit
  keywords?: Prisma.keywordsOmit
  wp_commentmeta?: Prisma.wp_commentmetaOmit
  wp_comments?: Prisma.wp_commentsOmit
  wp_links?: Prisma.wp_linksOmit
  wp_options?: Prisma.wp_optionsOmit
  wp_postmeta?: Prisma.wp_postmetaOmit
  wp_posts?: Prisma.wp_postsOmit
  wp_term_relationships?: Prisma.wp_term_relationshipsOmit
  wp_term_taxonomy?: Prisma.wp_term_taxonomyOmit
  wp_terms?: Prisma.wp_termsOmit
  wp_usermeta?: Prisma.wp_usermetaOmit
  wp_users?: Prisma.wp_usersOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

